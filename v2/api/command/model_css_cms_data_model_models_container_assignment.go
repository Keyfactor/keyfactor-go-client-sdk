/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the CSSCMSDataModelModelsContainerAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSSCMSDataModelModelsContainerAssignment{}

// CSSCMSDataModelModelsContainerAssignment struct for CSSCMSDataModelModelsContainerAssignment
type CSSCMSDataModelModelsContainerAssignment struct {
	CertStoreContainerId *int32         `json:"certStoreContainerId,omitempty"`
	NewContainerName     NullableString `json:"newContainerName,omitempty"`
	NewContainerType     *int32         `json:"newContainerType,omitempty"`
	KeystoreIds          []string       `json:"keystoreIds"`
}

// NewCSSCMSDataModelModelsContainerAssignment instantiates a new CSSCMSDataModelModelsContainerAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSSCMSDataModelModelsContainerAssignment(keystoreIds []string) *CSSCMSDataModelModelsContainerAssignment {
	this := CSSCMSDataModelModelsContainerAssignment{}
	this.KeystoreIds = keystoreIds
	return &this
}

// NewCSSCMSDataModelModelsContainerAssignmentWithDefaults instantiates a new CSSCMSDataModelModelsContainerAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSSCMSDataModelModelsContainerAssignmentWithDefaults() *CSSCMSDataModelModelsContainerAssignment {
	this := CSSCMSDataModelModelsContainerAssignment{}
	return &this
}

// GetCertStoreContainerId returns the CertStoreContainerId field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsContainerAssignment) GetCertStoreContainerId() int32 {
	if o == nil || isNil(o.CertStoreContainerId) {
		var ret int32
		return ret
	}
	return *o.CertStoreContainerId
}

// GetCertStoreContainerIdOk returns a tuple with the CertStoreContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsContainerAssignment) GetCertStoreContainerIdOk() (*int32, bool) {
	if o == nil || isNil(o.CertStoreContainerId) {
		return nil, false
	}
	return o.CertStoreContainerId, true
}

// HasCertStoreContainerId returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsContainerAssignment) HasCertStoreContainerId() bool {
	if o != nil && !isNil(o.CertStoreContainerId) {
		return true
	}

	return false
}

// SetCertStoreContainerId gets a reference to the given int32 and assigns it to the CertStoreContainerId field.
func (o *CSSCMSDataModelModelsContainerAssignment) SetCertStoreContainerId(v int32) {
	o.CertStoreContainerId = &v
}

// GetNewContainerName returns the NewContainerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsContainerAssignment) GetNewContainerName() string {
	if o == nil || isNil(o.NewContainerName.Get()) {
		var ret string
		return ret
	}
	return *o.NewContainerName.Get()
}

// GetNewContainerNameOk returns a tuple with the NewContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsContainerAssignment) GetNewContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewContainerName.Get(), o.NewContainerName.IsSet()
}

// HasNewContainerName returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsContainerAssignment) HasNewContainerName() bool {
	if o != nil && o.NewContainerName.IsSet() {
		return true
	}

	return false
}

// SetNewContainerName gets a reference to the given NullableString and assigns it to the NewContainerName field.
func (o *CSSCMSDataModelModelsContainerAssignment) SetNewContainerName(v string) {
	o.NewContainerName.Set(&v)
}

// SetNewContainerNameNil sets the value for NewContainerName to be an explicit nil
func (o *CSSCMSDataModelModelsContainerAssignment) SetNewContainerNameNil() {
	o.NewContainerName.Set(nil)
}

// UnsetNewContainerName ensures that no value is present for NewContainerName, not even an explicit nil
func (o *CSSCMSDataModelModelsContainerAssignment) UnsetNewContainerName() {
	o.NewContainerName.Unset()
}

// GetNewContainerType returns the NewContainerType field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsContainerAssignment) GetNewContainerType() int32 {
	if o == nil || isNil(o.NewContainerType) {
		var ret int32
		return ret
	}
	return *o.NewContainerType
}

// GetNewContainerTypeOk returns a tuple with the NewContainerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsContainerAssignment) GetNewContainerTypeOk() (*int32, bool) {
	if o == nil || isNil(o.NewContainerType) {
		return nil, false
	}
	return o.NewContainerType, true
}

// HasNewContainerType returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsContainerAssignment) HasNewContainerType() bool {
	if o != nil && !isNil(o.NewContainerType) {
		return true
	}

	return false
}

// SetNewContainerType gets a reference to the given int32 and assigns it to the NewContainerType field.
func (o *CSSCMSDataModelModelsContainerAssignment) SetNewContainerType(v int32) {
	o.NewContainerType = &v
}

// GetKeystoreIds returns the KeystoreIds field value
func (o *CSSCMSDataModelModelsContainerAssignment) GetKeystoreIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.KeystoreIds
}

// GetKeystoreIdsOk returns a tuple with the KeystoreIds field value
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsContainerAssignment) GetKeystoreIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeystoreIds, true
}

// SetKeystoreIds sets field value
func (o *CSSCMSDataModelModelsContainerAssignment) SetKeystoreIds(v []string) {
	o.KeystoreIds = v
}

func (o CSSCMSDataModelModelsContainerAssignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSSCMSDataModelModelsContainerAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CertStoreContainerId) {
		toSerialize["certStoreContainerId"] = o.CertStoreContainerId
	}
	if o.NewContainerName.IsSet() {
		toSerialize["newContainerName"] = o.NewContainerName.Get()
	}
	if !isNil(o.NewContainerType) {
		toSerialize["newContainerType"] = o.NewContainerType
	}
	toSerialize["keystoreIds"] = o.KeystoreIds
	return toSerialize, nil
}

type NullableCSSCMSDataModelModelsContainerAssignment struct {
	value *CSSCMSDataModelModelsContainerAssignment
	isSet bool
}

func (v NullableCSSCMSDataModelModelsContainerAssignment) Get() *CSSCMSDataModelModelsContainerAssignment {
	return v.value
}

func (v *NullableCSSCMSDataModelModelsContainerAssignment) Set(val *CSSCMSDataModelModelsContainerAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelModelsContainerAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelModelsContainerAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelModelsContainerAssignment(val *CSSCMSDataModelModelsContainerAssignment) *NullableCSSCMSDataModelModelsContainerAssignment {
	return &NullableCSSCMSDataModelModelsContainerAssignment{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelModelsContainerAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelModelsContainerAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
