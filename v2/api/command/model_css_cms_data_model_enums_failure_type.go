/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"fmt"
)

// CSSCMSDataModelEnumsFailureType the model 'CSSCMSDataModelEnumsFailureType'
type CSSCMSDataModelEnumsFailureType int32

// List of CSS.CMS.Data.Model.Enums.FailureType
const (
	_0 CSSCMSDataModelEnumsFailureType = 0
	_1 CSSCMSDataModelEnumsFailureType = 1
	_2 CSSCMSDataModelEnumsFailureType = 2
	_3 CSSCMSDataModelEnumsFailureType = 3
	_4 CSSCMSDataModelEnumsFailureType = 4
	_5 CSSCMSDataModelEnumsFailureType = 5
	_6 CSSCMSDataModelEnumsFailureType = 6
	_7 CSSCMSDataModelEnumsFailureType = 7
)

// All allowed values of CSSCMSDataModelEnumsFailureType enum
var AllowedCSSCMSDataModelEnumsFailureTypeEnumValues = []CSSCMSDataModelEnumsFailureType{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
}

func (v *CSSCMSDataModelEnumsFailureType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CSSCMSDataModelEnumsFailureType(value)
	for _, existing := range AllowedCSSCMSDataModelEnumsFailureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CSSCMSDataModelEnumsFailureType", value)
}

// NewCSSCMSDataModelEnumsFailureTypeFromValue returns a pointer to a valid CSSCMSDataModelEnumsFailureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCSSCMSDataModelEnumsFailureTypeFromValue(v int32) (*CSSCMSDataModelEnumsFailureType, error) {
	ev := CSSCMSDataModelEnumsFailureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CSSCMSDataModelEnumsFailureType: valid values are %v", v, AllowedCSSCMSDataModelEnumsFailureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CSSCMSDataModelEnumsFailureType) IsValid() bool {
	for _, existing := range AllowedCSSCMSDataModelEnumsFailureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CSS.CMS.Data.Model.Enums.FailureType value
func (v CSSCMSDataModelEnumsFailureType) Ptr() *CSSCMSDataModelEnumsFailureType {
	return &v
}

type NullableCSSCMSDataModelEnumsFailureType struct {
	value *CSSCMSDataModelEnumsFailureType
	isSet bool
}

func (v NullableCSSCMSDataModelEnumsFailureType) Get() *CSSCMSDataModelEnumsFailureType {
	return v.value
}

func (v *NullableCSSCMSDataModelEnumsFailureType) Set(val *CSSCMSDataModelEnumsFailureType) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelEnumsFailureType) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelEnumsFailureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelEnumsFailureType(val *CSSCMSDataModelEnumsFailureType) *NullableCSSCMSDataModelEnumsFailureType {
	return &NullableCSSCMSDataModelEnumsFailureType{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelEnumsFailureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelEnumsFailureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
