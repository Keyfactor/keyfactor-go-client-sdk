/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

Testing SecurityRolePermissionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_command_SecurityRolePermissionsApiService(t *testing.T) {

	cwd, _ := os.Getwd()
	t.Logf("Working directory: %s", cwd)
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsCollectionsGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsCollectionsGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsCollectionsGet_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsCollectionsGet_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsCollectionsGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsCollectionsPost", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsCollectionsPost_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsCollectionsPost_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsCollectionsPost_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsCollectionsPost(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsCollectionsPut", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsCollectionsPut_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsCollectionsPut_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsCollectionsPut_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsCollectionsPut(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsContainersGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsContainersGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsContainersGet_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsContainersGet_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsContainersGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsContainersPost", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsContainersPost_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsContainersPost_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsContainersPost_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsContainersPost(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsContainersPut", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsContainersPut_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsContainersPut_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsContainersPut_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsContainersPut(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGet_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGet_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsGlobalGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGlobalGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGlobalGet_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGlobalGet_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsGlobalGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsGlobalPost", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGlobalPost_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGlobalPost_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGlobalPost_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsGlobalPost(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsGlobalPut", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGlobalPut_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGlobalPut_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsGlobalPut_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsGlobalPut(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsPamProvidersGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsPamProvidersGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsPamProvidersGet_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsPamProvidersGet_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsPamProvidersGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolesIdPermissionsPamProvidersPut", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolesIdPermissionsPamProvidersPut_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("SecurityRolePermissionsApi_SecurityRolesIdPermissionsPamProvidersPut_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolesIdPermissionsPamProvidersPut_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolesIdPermissionsPamProvidersPut(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

}
