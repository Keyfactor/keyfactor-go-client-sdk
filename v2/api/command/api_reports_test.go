/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

Testing ReportsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_command_ReportsApiService(t *testing.T) {

	cwd, _ := os.Getwd()
	t.Logf("Working directory: %s", cwd)
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test ReportsApiService ReportsCustomGet", func(t *testing.T) {

		t.Log("ReportsApi_ReportsCustomGet_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsCustomGet(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsCustomIdDelete", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsCustomIdDelete_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsCustomIdDelete_id: %v", id)

		t.Log("ReportsApi_ReportsCustomIdDelete_payload: <none>")
		httpRes, err := apiClient.ReportsApi.ReportsCustomIdDelete(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsCustomIdGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsCustomIdGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsCustomIdGet_id: %v", id)

		t.Log("ReportsApi_ReportsCustomIdGet_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsCustomIdGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsCustomPost", func(t *testing.T) {

		t.Log("ReportsApi_ReportsCustomPost_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsCustomPost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsCustomPut", func(t *testing.T) {

		t.Log("ReportsApi_ReportsCustomPut_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsCustomPut(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsGet", func(t *testing.T) {

		t.Log("ReportsApi_ReportsGet_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsGet(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsIdGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsIdGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsIdGet_id: %v", id)

		t.Log("ReportsApi_ReportsIdGet_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsIdGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsIdParametersGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsIdParametersGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsIdParametersGet_id: %v", id)

		t.Log("ReportsApi_ReportsIdParametersGet_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsIdParametersGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsIdParametersPut", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsIdParametersPut_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsIdParametersPut_id: %v", id)

		t.Log("ReportsApi_ReportsIdParametersPut_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsIdParametersPut(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsIdSchedulesGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsIdSchedulesGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsIdSchedulesGet_id: %v", id)

		t.Log("ReportsApi_ReportsIdSchedulesGet_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsIdSchedulesGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsIdSchedulesPost", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsIdSchedulesPost_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsIdSchedulesPost_id: %v", id)

		t.Log("ReportsApi_ReportsIdSchedulesPost_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsIdSchedulesPost(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsIdSchedulesPut", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsIdSchedulesPut_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsIdSchedulesPut_id: %v", id)

		t.Log("ReportsApi_ReportsIdSchedulesPut_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsIdSchedulesPut(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsPut", func(t *testing.T) {

		t.Log("ReportsApi_ReportsPut_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsPut(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsSchedulesIdDelete", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsSchedulesIdDelete_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsSchedulesIdDelete_id: %v", id)

		t.Log("ReportsApi_ReportsSchedulesIdDelete_payload: <none>")
		httpRes, err := apiClient.ReportsApi.ReportsSchedulesIdDelete(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsSchedulesIdGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsSchedulesIdGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsSchedulesIdGet_id: %v", id)

		t.Log("ReportsApi_ReportsSchedulesIdGet_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsSchedulesIdGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

}
