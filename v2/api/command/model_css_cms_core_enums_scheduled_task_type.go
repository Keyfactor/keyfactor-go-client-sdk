/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"fmt"
)

// CSSCMSCoreEnumsScheduledTaskType the model 'CSSCMSCoreEnumsScheduledTaskType'
type CSSCMSCoreEnumsScheduledTaskType int32

// List of CSS.CMS.Core.Enums.ScheduledTaskType
const (
	_0  CSSCMSCoreEnumsScheduledTaskType = 0
	_1  CSSCMSCoreEnumsScheduledTaskType = 1
	_2  CSSCMSCoreEnumsScheduledTaskType = 2
	_3  CSSCMSCoreEnumsScheduledTaskType = 3
	_4  CSSCMSCoreEnumsScheduledTaskType = 4
	_7  CSSCMSCoreEnumsScheduledTaskType = 7
	_9  CSSCMSCoreEnumsScheduledTaskType = 9
	_10 CSSCMSCoreEnumsScheduledTaskType = 10
	_11 CSSCMSCoreEnumsScheduledTaskType = 11
	_12 CSSCMSCoreEnumsScheduledTaskType = 12
	_13 CSSCMSCoreEnumsScheduledTaskType = 13
	_14 CSSCMSCoreEnumsScheduledTaskType = 14
	_15 CSSCMSCoreEnumsScheduledTaskType = 15
	_16 CSSCMSCoreEnumsScheduledTaskType = 16
	_17 CSSCMSCoreEnumsScheduledTaskType = 17
	_18 CSSCMSCoreEnumsScheduledTaskType = 18
	_19 CSSCMSCoreEnumsScheduledTaskType = 19
	_20 CSSCMSCoreEnumsScheduledTaskType = 20
	_21 CSSCMSCoreEnumsScheduledTaskType = 21
	_22 CSSCMSCoreEnumsScheduledTaskType = 22
	_23 CSSCMSCoreEnumsScheduledTaskType = 23
	_24 CSSCMSCoreEnumsScheduledTaskType = 24
	_25 CSSCMSCoreEnumsScheduledTaskType = 25
	_26 CSSCMSCoreEnumsScheduledTaskType = 26
)

// All allowed values of CSSCMSCoreEnumsScheduledTaskType enum
var AllowedCSSCMSCoreEnumsScheduledTaskTypeEnumValues = []CSSCMSCoreEnumsScheduledTaskType{
	0,
	1,
	2,
	3,
	4,
	7,
	9,
	10,
	11,
	12,
	13,
	14,
	15,
	16,
	17,
	18,
	19,
	20,
	21,
	22,
	23,
	24,
	25,
	26,
}

func (v *CSSCMSCoreEnumsScheduledTaskType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CSSCMSCoreEnumsScheduledTaskType(value)
	for _, existing := range AllowedCSSCMSCoreEnumsScheduledTaskTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CSSCMSCoreEnumsScheduledTaskType", value)
}

// NewCSSCMSCoreEnumsScheduledTaskTypeFromValue returns a pointer to a valid CSSCMSCoreEnumsScheduledTaskType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCSSCMSCoreEnumsScheduledTaskTypeFromValue(v int32) (*CSSCMSCoreEnumsScheduledTaskType, error) {
	ev := CSSCMSCoreEnumsScheduledTaskType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CSSCMSCoreEnumsScheduledTaskType: valid values are %v", v, AllowedCSSCMSCoreEnumsScheduledTaskTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CSSCMSCoreEnumsScheduledTaskType) IsValid() bool {
	for _, existing := range AllowedCSSCMSCoreEnumsScheduledTaskTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CSS.CMS.Core.Enums.ScheduledTaskType value
func (v CSSCMSCoreEnumsScheduledTaskType) Ptr() *CSSCMSCoreEnumsScheduledTaskType {
	return &v
}

type NullableCSSCMSCoreEnumsScheduledTaskType struct {
	value *CSSCMSCoreEnumsScheduledTaskType
	isSet bool
}

func (v NullableCSSCMSCoreEnumsScheduledTaskType) Get() *CSSCMSCoreEnumsScheduledTaskType {
	return v.value
}

func (v *NullableCSSCMSCoreEnumsScheduledTaskType) Set(val *CSSCMSCoreEnumsScheduledTaskType) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSCoreEnumsScheduledTaskType) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSCoreEnumsScheduledTaskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSCoreEnumsScheduledTaskType(val *CSSCMSCoreEnumsScheduledTaskType) *NullableCSSCMSCoreEnumsScheduledTaskType {
	return &NullableCSSCMSCoreEnumsScheduledTaskType{value: val, isSet: true}
}

func (v NullableCSSCMSCoreEnumsScheduledTaskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSCoreEnumsScheduledTaskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
