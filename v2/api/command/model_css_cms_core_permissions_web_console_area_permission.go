/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"fmt"
)

// CSSCMSCorePermissionsWebConsoleAreaPermission the model 'CSSCMSCorePermissionsWebConsoleAreaPermission'
type CSSCMSCorePermissionsWebConsoleAreaPermission int32

// List of CSS.CMS.Core.Permissions.WebConsoleAreaPermission
const (
	_1  CSSCMSCorePermissionsWebConsoleAreaPermission = 1
	_2  CSSCMSCorePermissionsWebConsoleAreaPermission = 2
	_3  CSSCMSCorePermissionsWebConsoleAreaPermission = 3
	_4  CSSCMSCorePermissionsWebConsoleAreaPermission = 4
	_5  CSSCMSCorePermissionsWebConsoleAreaPermission = 5
	_6  CSSCMSCorePermissionsWebConsoleAreaPermission = 6
	_7  CSSCMSCorePermissionsWebConsoleAreaPermission = 7
	_8  CSSCMSCorePermissionsWebConsoleAreaPermission = 8
	_10 CSSCMSCorePermissionsWebConsoleAreaPermission = 10
	_14 CSSCMSCorePermissionsWebConsoleAreaPermission = 14
	_15 CSSCMSCorePermissionsWebConsoleAreaPermission = 15
	_16 CSSCMSCorePermissionsWebConsoleAreaPermission = 16
	_17 CSSCMSCorePermissionsWebConsoleAreaPermission = 17
	_18 CSSCMSCorePermissionsWebConsoleAreaPermission = 18
	_19 CSSCMSCorePermissionsWebConsoleAreaPermission = 19
	_20 CSSCMSCorePermissionsWebConsoleAreaPermission = 20
	_21 CSSCMSCorePermissionsWebConsoleAreaPermission = 21
	_22 CSSCMSCorePermissionsWebConsoleAreaPermission = 22
	_23 CSSCMSCorePermissionsWebConsoleAreaPermission = 23
	_24 CSSCMSCorePermissionsWebConsoleAreaPermission = 24
	_25 CSSCMSCorePermissionsWebConsoleAreaPermission = 25
	_26 CSSCMSCorePermissionsWebConsoleAreaPermission = 26
	_27 CSSCMSCorePermissionsWebConsoleAreaPermission = 27
	_28 CSSCMSCorePermissionsWebConsoleAreaPermission = 28
	_29 CSSCMSCorePermissionsWebConsoleAreaPermission = 29
	_30 CSSCMSCorePermissionsWebConsoleAreaPermission = 30
	_31 CSSCMSCorePermissionsWebConsoleAreaPermission = 31
	_32 CSSCMSCorePermissionsWebConsoleAreaPermission = 32
	_33 CSSCMSCorePermissionsWebConsoleAreaPermission = 33
	_35 CSSCMSCorePermissionsWebConsoleAreaPermission = 35
	_36 CSSCMSCorePermissionsWebConsoleAreaPermission = 36
	_37 CSSCMSCorePermissionsWebConsoleAreaPermission = 37
	_39 CSSCMSCorePermissionsWebConsoleAreaPermission = 39
	_40 CSSCMSCorePermissionsWebConsoleAreaPermission = 40
	_41 CSSCMSCorePermissionsWebConsoleAreaPermission = 41
	_42 CSSCMSCorePermissionsWebConsoleAreaPermission = 42
	_43 CSSCMSCorePermissionsWebConsoleAreaPermission = 43
	_44 CSSCMSCorePermissionsWebConsoleAreaPermission = 44
	_45 CSSCMSCorePermissionsWebConsoleAreaPermission = 45
	_46 CSSCMSCorePermissionsWebConsoleAreaPermission = 46
	_47 CSSCMSCorePermissionsWebConsoleAreaPermission = 47
	_48 CSSCMSCorePermissionsWebConsoleAreaPermission = 48
	_49 CSSCMSCorePermissionsWebConsoleAreaPermission = 49
	_50 CSSCMSCorePermissionsWebConsoleAreaPermission = 50
	_51 CSSCMSCorePermissionsWebConsoleAreaPermission = 51
	_52 CSSCMSCorePermissionsWebConsoleAreaPermission = 52
	_53 CSSCMSCorePermissionsWebConsoleAreaPermission = 53
	_54 CSSCMSCorePermissionsWebConsoleAreaPermission = 54
	_55 CSSCMSCorePermissionsWebConsoleAreaPermission = 55
	_56 CSSCMSCorePermissionsWebConsoleAreaPermission = 56
	_57 CSSCMSCorePermissionsWebConsoleAreaPermission = 57
	_58 CSSCMSCorePermissionsWebConsoleAreaPermission = 58
	_59 CSSCMSCorePermissionsWebConsoleAreaPermission = 59
	_60 CSSCMSCorePermissionsWebConsoleAreaPermission = 60
	_61 CSSCMSCorePermissionsWebConsoleAreaPermission = 61
	_62 CSSCMSCorePermissionsWebConsoleAreaPermission = 62
	_63 CSSCMSCorePermissionsWebConsoleAreaPermission = 63
	_64 CSSCMSCorePermissionsWebConsoleAreaPermission = 64
	_65 CSSCMSCorePermissionsWebConsoleAreaPermission = 65
	_66 CSSCMSCorePermissionsWebConsoleAreaPermission = 66
	_67 CSSCMSCorePermissionsWebConsoleAreaPermission = 67
	_68 CSSCMSCorePermissionsWebConsoleAreaPermission = 68
	_69 CSSCMSCorePermissionsWebConsoleAreaPermission = 69
	_70 CSSCMSCorePermissionsWebConsoleAreaPermission = 70
)

// All allowed values of CSSCMSCorePermissionsWebConsoleAreaPermission enum
var AllowedCSSCMSCorePermissionsWebConsoleAreaPermissionEnumValues = []CSSCMSCorePermissionsWebConsoleAreaPermission{
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	10,
	14,
	15,
	16,
	17,
	18,
	19,
	20,
	21,
	22,
	23,
	24,
	25,
	26,
	27,
	28,
	29,
	30,
	31,
	32,
	33,
	35,
	36,
	37,
	39,
	40,
	41,
	42,
	43,
	44,
	45,
	46,
	47,
	48,
	49,
	50,
	51,
	52,
	53,
	54,
	55,
	56,
	57,
	58,
	59,
	60,
	61,
	62,
	63,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
}

func (v *CSSCMSCorePermissionsWebConsoleAreaPermission) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CSSCMSCorePermissionsWebConsoleAreaPermission(value)
	for _, existing := range AllowedCSSCMSCorePermissionsWebConsoleAreaPermissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CSSCMSCorePermissionsWebConsoleAreaPermission", value)
}

// NewCSSCMSCorePermissionsWebConsoleAreaPermissionFromValue returns a pointer to a valid CSSCMSCorePermissionsWebConsoleAreaPermission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCSSCMSCorePermissionsWebConsoleAreaPermissionFromValue(v int32) (*CSSCMSCorePermissionsWebConsoleAreaPermission, error) {
	ev := CSSCMSCorePermissionsWebConsoleAreaPermission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CSSCMSCorePermissionsWebConsoleAreaPermission: valid values are %v", v, AllowedCSSCMSCorePermissionsWebConsoleAreaPermissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CSSCMSCorePermissionsWebConsoleAreaPermission) IsValid() bool {
	for _, existing := range AllowedCSSCMSCorePermissionsWebConsoleAreaPermissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CSS.CMS.Core.Permissions.WebConsoleAreaPermission value
func (v CSSCMSCorePermissionsWebConsoleAreaPermission) Ptr() *CSSCMSCorePermissionsWebConsoleAreaPermission {
	return &v
}

type NullableCSSCMSCorePermissionsWebConsoleAreaPermission struct {
	value *CSSCMSCorePermissionsWebConsoleAreaPermission
	isSet bool
}

func (v NullableCSSCMSCorePermissionsWebConsoleAreaPermission) Get() *CSSCMSCorePermissionsWebConsoleAreaPermission {
	return v.value
}

func (v *NullableCSSCMSCorePermissionsWebConsoleAreaPermission) Set(val *CSSCMSCorePermissionsWebConsoleAreaPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSCorePermissionsWebConsoleAreaPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSCorePermissionsWebConsoleAreaPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSCorePermissionsWebConsoleAreaPermission(val *CSSCMSCorePermissionsWebConsoleAreaPermission) *NullableCSSCMSCorePermissionsWebConsoleAreaPermission {
	return &NullableCSSCMSCorePermissionsWebConsoleAreaPermission{value: val, isSet: true}
}

func (v NullableCSSCMSCorePermissionsWebConsoleAreaPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSCorePermissionsWebConsoleAreaPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
