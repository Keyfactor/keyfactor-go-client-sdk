/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"time"
)

// checks if the KeyfactorAuditingQueryingAuditLogEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorAuditingQueryingAuditLogEntry{}

// KeyfactorAuditingQueryingAuditLogEntry struct for KeyfactorAuditingQueryingAuditLogEntry
type KeyfactorAuditingQueryingAuditLogEntry struct {
	Id                  *int32                               `json:"id,omitempty"`
	Timestamp           *time.Time                           `json:"timestamp,omitempty"`
	Message             NullableString                       `json:"message,omitempty"`
	Signature           NullableString                       `json:"signature,omitempty"`
	Category            *int32                               `json:"category,omitempty"`
	Operation           *int32                               `json:"operation,omitempty"`
	Level               *KeyfactorAuditingEnumsAuditLogLevel `json:"level,omitempty"`
	User                NullableString                       `json:"user,omitempty"`
	EntityType          NullableString                       `json:"entityType,omitempty"`
	AuditIdentifier     NullableString                       `json:"auditIdentifier,omitempty"`
	ImmutableIdentifier NullableString                       `json:"immutableIdentifier,omitempty"`
}

// NewKeyfactorAuditingQueryingAuditLogEntry instantiates a new KeyfactorAuditingQueryingAuditLogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorAuditingQueryingAuditLogEntry() *KeyfactorAuditingQueryingAuditLogEntry {
	this := KeyfactorAuditingQueryingAuditLogEntry{}
	return &this
}

// NewKeyfactorAuditingQueryingAuditLogEntryWithDefaults instantiates a new KeyfactorAuditingQueryingAuditLogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorAuditingQueryingAuditLogEntryWithDefaults() *KeyfactorAuditingQueryingAuditLogEntry {
	this := KeyfactorAuditingQueryingAuditLogEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetId(v int32) {
	o.Id = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetTimestamp() time.Time {
	if o == nil || isNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetTimestampOk() (*time.Time, bool) {
	if o == nil || isNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasTimestamp() bool {
	if o != nil && !isNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetMessage() string {
	if o == nil || isNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetMessage(v string) {
	o.Message.Set(&v)
}

// SetMessageNil sets the value for Message to be an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) UnsetMessage() {
	o.Message.Unset()
}

// GetSignature returns the Signature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetSignature() string {
	if o == nil || isNil(o.Signature.Get()) {
		var ret string
		return ret
	}
	return *o.Signature.Get()
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signature.Get(), o.Signature.IsSet()
}

// HasSignature returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasSignature() bool {
	if o != nil && o.Signature.IsSet() {
		return true
	}

	return false
}

// SetSignature gets a reference to the given NullableString and assigns it to the Signature field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetSignature(v string) {
	o.Signature.Set(&v)
}

// SetSignatureNil sets the value for Signature to be an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetSignatureNil() {
	o.Signature.Set(nil)
}

// UnsetSignature ensures that no value is present for Signature, not even an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) UnsetSignature() {
	o.Signature.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetCategory() int32 {
	if o == nil || isNil(o.Category) {
		var ret int32
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetCategoryOk() (*int32, bool) {
	if o == nil || isNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasCategory() bool {
	if o != nil && !isNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given int32 and assigns it to the Category field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetCategory(v int32) {
	o.Category = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetOperation() int32 {
	if o == nil || isNil(o.Operation) {
		var ret int32
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetOperationOk() (*int32, bool) {
	if o == nil || isNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasOperation() bool {
	if o != nil && !isNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given int32 and assigns it to the Operation field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetOperation(v int32) {
	o.Operation = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetLevel() KeyfactorAuditingEnumsAuditLogLevel {
	if o == nil || isNil(o.Level) {
		var ret KeyfactorAuditingEnumsAuditLogLevel
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetLevelOk() (*KeyfactorAuditingEnumsAuditLogLevel, bool) {
	if o == nil || isNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasLevel() bool {
	if o != nil && !isNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given KeyfactorAuditingEnumsAuditLogLevel and assigns it to the Level field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetLevel(v KeyfactorAuditingEnumsAuditLogLevel) {
	o.Level = &v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetUser() string {
	if o == nil || isNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetUser(v string) {
	o.User.Set(&v)
}

// SetUserNil sets the value for User to be an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) UnsetUser() {
	o.User.Unset()
}

// GetEntityType returns the EntityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetEntityType() string {
	if o == nil || isNil(o.EntityType.Get()) {
		var ret string
		return ret
	}
	return *o.EntityType.Get()
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityType.Get(), o.EntityType.IsSet()
}

// HasEntityType returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasEntityType() bool {
	if o != nil && o.EntityType.IsSet() {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given NullableString and assigns it to the EntityType field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetEntityType(v string) {
	o.EntityType.Set(&v)
}

// SetEntityTypeNil sets the value for EntityType to be an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetEntityTypeNil() {
	o.EntityType.Set(nil)
}

// UnsetEntityType ensures that no value is present for EntityType, not even an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) UnsetEntityType() {
	o.EntityType.Unset()
}

// GetAuditIdentifier returns the AuditIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetAuditIdentifier() string {
	if o == nil || isNil(o.AuditIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.AuditIdentifier.Get()
}

// GetAuditIdentifierOk returns a tuple with the AuditIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetAuditIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuditIdentifier.Get(), o.AuditIdentifier.IsSet()
}

// HasAuditIdentifier returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasAuditIdentifier() bool {
	if o != nil && o.AuditIdentifier.IsSet() {
		return true
	}

	return false
}

// SetAuditIdentifier gets a reference to the given NullableString and assigns it to the AuditIdentifier field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetAuditIdentifier(v string) {
	o.AuditIdentifier.Set(&v)
}

// SetAuditIdentifierNil sets the value for AuditIdentifier to be an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetAuditIdentifierNil() {
	o.AuditIdentifier.Set(nil)
}

// UnsetAuditIdentifier ensures that no value is present for AuditIdentifier, not even an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) UnsetAuditIdentifier() {
	o.AuditIdentifier.Unset()
}

// GetImmutableIdentifier returns the ImmutableIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetImmutableIdentifier() string {
	if o == nil || isNil(o.ImmutableIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.ImmutableIdentifier.Get()
}

// GetImmutableIdentifierOk returns a tuple with the ImmutableIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorAuditingQueryingAuditLogEntry) GetImmutableIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImmutableIdentifier.Get(), o.ImmutableIdentifier.IsSet()
}

// HasImmutableIdentifier returns a boolean if a field has been set.
func (o *KeyfactorAuditingQueryingAuditLogEntry) HasImmutableIdentifier() bool {
	if o != nil && o.ImmutableIdentifier.IsSet() {
		return true
	}

	return false
}

// SetImmutableIdentifier gets a reference to the given NullableString and assigns it to the ImmutableIdentifier field.
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetImmutableIdentifier(v string) {
	o.ImmutableIdentifier.Set(&v)
}

// SetImmutableIdentifierNil sets the value for ImmutableIdentifier to be an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) SetImmutableIdentifierNil() {
	o.ImmutableIdentifier.Set(nil)
}

// UnsetImmutableIdentifier ensures that no value is present for ImmutableIdentifier, not even an explicit nil
func (o *KeyfactorAuditingQueryingAuditLogEntry) UnsetImmutableIdentifier() {
	o.ImmutableIdentifier.Unset()
}

func (o KeyfactorAuditingQueryingAuditLogEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorAuditingQueryingAuditLogEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.Signature.IsSet() {
		toSerialize["signature"] = o.Signature.Get()
	}
	if !isNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !isNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !isNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	if o.EntityType.IsSet() {
		toSerialize["entityType"] = o.EntityType.Get()
	}
	if o.AuditIdentifier.IsSet() {
		toSerialize["auditIdentifier"] = o.AuditIdentifier.Get()
	}
	if o.ImmutableIdentifier.IsSet() {
		toSerialize["immutableIdentifier"] = o.ImmutableIdentifier.Get()
	}
	return toSerialize, nil
}

type NullableKeyfactorAuditingQueryingAuditLogEntry struct {
	value *KeyfactorAuditingQueryingAuditLogEntry
	isSet bool
}

func (v NullableKeyfactorAuditingQueryingAuditLogEntry) Get() *KeyfactorAuditingQueryingAuditLogEntry {
	return v.value
}

func (v *NullableKeyfactorAuditingQueryingAuditLogEntry) Set(val *KeyfactorAuditingQueryingAuditLogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorAuditingQueryingAuditLogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorAuditingQueryingAuditLogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorAuditingQueryingAuditLogEntry(val *KeyfactorAuditingQueryingAuditLogEntry) *NullableKeyfactorAuditingQueryingAuditLogEntry {
	return &NullableKeyfactorAuditingQueryingAuditLogEntry{value: val, isSet: true}
}

func (v NullableKeyfactorAuditingQueryingAuditLogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorAuditingQueryingAuditLogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
