/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"crypto/x509"
	"fmt"
	"net/http"
	"os"
	"strings"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

type contextKey string

func (c contextKey) String() string {
	return "auth " + string(c)
}

var (
	// ContextBasicAuth takes BasicAuth as authentication for the request.
	ContextBasicAuth = contextKey("basic")

	// ContextServerIndex uses a server configuration from the index.
	ContextServerIndex = contextKey("serverIndex")

	// ContextOperationServerIndices uses a server configuration from the index mapping.
	ContextOperationServerIndices = contextKey("serverOperationIndices")

	// ContextServerVariables overrides a server configuration variables.
	ContextServerVariables = contextKey("serverVariables")

	// ContextOperationServerVariables overrides a server configuration variables using operation specific values.
	ContextOperationServerVariables = contextKey("serverOperationVariables")

	envCommandHostname          = "KEYFACTOR_HOSTNAME"
	envCommandUsername          = "KEYFACTOR_USERNAME"
	envCommandPassword          = "KEYFACTOR_PASSWORD"
	envCommandDomain            = "KEYFACTOR_DOMAIN"
	envCommandApiPath           = "KEYFACTOR_API_PATH"
	envCommandLogLevel          = "KEYFACTOR_LOG_LEVEL"
	envCommandCaCertificatePath = "KEYFACTOR_CA_CERTIFICATE_PATH"
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	Username string `json:"username,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

// ServerVariable stores the information about a server variable
type ServerVariable struct {
	Description  string
	DefaultValue string
	EnumValues   []string
}

// Configuration stores the configuration of the API client
type Configuration struct {
	Host              string            `json:"host,omitempty"`
	BasicAuth         BasicAuth         `json:"basicAuth,omitempty"`
	DefaultHeader     map[string]string `json:"defaultHeader,omitempty"`
	UserAgent         string            `json:"userAgent,omitempty"`
	Debug             bool              `json:"debug,omitempty"`
	CaCertificatePath string            `json:"caCertificatePath,omitempty"`
	APIPath           string            `json:"apiPath,omitempty"`
	Domain            string            `json:"domain,omitempty"`
	HTTPClient        *http.Client
	caCertificates    []*x509.Certificate
}

func ValidateConfiguration(configuration *Configuration) []error {
	var errs []error
	if configuration.Host == "" {
		errs = append(errs, fmt.Errorf("hostname cannot be empty"))
	}
	if configuration.BasicAuth.Username == "" {
		errs = append(errs, fmt.Errorf("username cannot be empty"))
	}
	if configuration.BasicAuth.Password == "" {
		errs = append(errs, fmt.Errorf("password cannot be empty"))
	}

	if configuration.CaCertificatePath != "" {
		if _, err := os.Stat(configuration.CaCertificatePath); os.IsNotExist(err) {
			errs = append(errs, fmt.Errorf("caCertificatePath does not exist: %s", configuration.CaCertificatePath))
		}
	}

	if configuration.APIPath == "" {
		configuration.APIPath = "/KeyfactorAPI"
	}

	if configuration.Domain == "" && configuration.BasicAuth.Username != "" && (!strings.Contains(configuration.BasicAuth.Username, "@") && !strings.Contains(configuration.BasicAuth.Username, "\\")) {
		errs = append(errs, fmt.Errorf("domain cannot be empty when username does not contain a domain or a slash (\\) or an at (@) symbol"))
	}

	return errs
}

// GetEnvConfig returns a map of environment variables
func GetEnvConfiguration() map[string]string {
	config := make(map[string]string)
	hostname, hostnameOk := os.LookupEnv("KEYFACTOR_HOSTNAME")
	if hostnameOk {
		config["hostname"] = hostname
	}
	username, usernameOk := os.LookupEnv("KEYFACTOR_USERNAME")
	if usernameOk {
		config["username"] = username
	}
	password, passwordOk := os.LookupEnv("KEYFACTOR_PASSWORD")
	if passwordOk {
		config["password"] = password
	}
	domain, domainOk := os.LookupEnv("KEYFACTOR_DOMAIN")
	if domainOk {
		config["domain"] = domain
	}
	apiPath, apiPathOk := os.LookupEnv("KEYFACTOR_API_PATH")
	if apiPathOk {
		config["apiPath"] = apiPath
	}
	logLevel, logLevelOk := os.LookupEnv("KEYFACTOR_LOG_LEVEL")
	if logLevelOk {
		config["logLevel"] = logLevel
	}
	caCertificatePath, caCertificatePathOk := os.LookupEnv("KEYFACTOR_CA_CERTIFICATE_PATH")
	if caCertificatePathOk {
		config["caCertificatePath"] = caCertificatePath
	}
	return config
}

// NewConfiguration returns a new Configuration object
func NewConfiguration(config map[string]string) (*Configuration, error) {
	cfg := &Configuration{
		DefaultHeader: make(map[string]string),
		UserAgent:     "OpenAPI-Generator/1.0.0/go",
		Debug:         false,
	}

	var (
		hostname string
	)
	confHost := config["host"]
	confUser := config["username"]
	confPass := config["password"]
	confDomain := config["domain"]
	confCaPath := config["caCertificatePath"]

	// Get hostname from environment variable
	if confHost == "" {
		hostname = os.Getenv(envCommandHostname)
	} else {
		hostname = confHost
	}

	if hostname != "" {
		if hostnameCleaned, err := cleanHostname(hostname); err == nil {
			cfg.Host = hostnameCleaned
		}
	}

	// Get username from environment variable
	if confUser == "" {
		cfg.BasicAuth.Username = os.Getenv(envCommandUsername)
	} else {
		cfg.BasicAuth.Username = confUser
	}

	if confDomain != "" {
		if cfg.BasicAuth.Username != "" && !strings.Contains(cfg.BasicAuth.Username, confDomain) {
			cfg.BasicAuth.Username = cfg.BasicAuth.Username + "@" + confDomain
		}
	} else {
		cfg.Domain = os.Getenv(envCommandDomain)
		if cfg.BasicAuth.Username != "" && !strings.Contains(cfg.BasicAuth.Username, cfg.Domain) && cfg.Domain != "" && !strings.Contains(cfg.BasicAuth.Username, "@") {
			cfg.BasicAuth.Username = cfg.BasicAuth.Username + "@" + cfg.Domain
		}
	}

	// Get password from environment variable
	if confPass == "" {
		cfg.BasicAuth.Password = os.Getenv(envCommandPassword)
	} else {
		cfg.BasicAuth.Password = confPass
	}

	// Get caCertificatePath from environment variable
	if confCaPath == "" {
		cfg.CaCertificatePath = os.Getenv("KEYFACTOR_CA_CERTIFICATE_PATH")
	} else {
		cfg.CaCertificatePath = confCaPath
	}

	errs := ValidateConfiguration(cfg)
	if len(errs) > 0 {
		outputString := "Configuration errors:\n"
		for _, err := range errs {
			outputString += fmt.Sprintf("  - %s\n", err)
		}
		return nil, fmt.Errorf(outputString)
	}

	return cfg, nil
}

// AddDefaultHeader adds a new HTTP header to the default header in the request
func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}

func (c *Configuration) SetCaCertificates(caCertificates []*x509.Certificate) {
	if caCertificates != nil {
		c.caCertificates = caCertificates
	}
}
