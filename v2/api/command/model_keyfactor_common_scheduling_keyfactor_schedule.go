/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorCommonSchedulingKeyfactorSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorCommonSchedulingKeyfactorSchedule{}

// KeyfactorCommonSchedulingKeyfactorSchedule struct for KeyfactorCommonSchedulingKeyfactorSchedule
type KeyfactorCommonSchedulingKeyfactorSchedule struct {
	Immediate   NullableBool                                  `json:"immediate,omitempty"`
	Interval    *KeyfactorCommonSchedulingModelsIntervalModel `json:"interval,omitempty"`
	Daily       *KeyfactorCommonSchedulingModelsTimeModel     `json:"daily,omitempty"`
	Weekly      *KeyfactorCommonSchedulingModelsWeeklyModel   `json:"weekly,omitempty"`
	Monthly     *KeyfactorCommonSchedulingModelsMonthlyModel  `json:"monthly,omitempty"`
	ExactlyOnce *KeyfactorCommonSchedulingModelsTimeModel     `json:"exactlyOnce,omitempty"`
	Schedule    NullableString                                `json:"schedule,omitempty"`
	IsEmpty     *bool                                         `json:"isEmpty,omitempty"`
}

// NewKeyfactorCommonSchedulingKeyfactorSchedule instantiates a new KeyfactorCommonSchedulingKeyfactorSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorCommonSchedulingKeyfactorSchedule() *KeyfactorCommonSchedulingKeyfactorSchedule {
	this := KeyfactorCommonSchedulingKeyfactorSchedule{}
	return &this
}

// NewKeyfactorCommonSchedulingKeyfactorScheduleWithDefaults instantiates a new KeyfactorCommonSchedulingKeyfactorSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorCommonSchedulingKeyfactorScheduleWithDefaults() *KeyfactorCommonSchedulingKeyfactorSchedule {
	this := KeyfactorCommonSchedulingKeyfactorSchedule{}
	return &this
}

// GetImmediate returns the Immediate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetImmediate() bool {
	if o == nil || isNil(o.Immediate.Get()) {
		var ret bool
		return ret
	}
	return *o.Immediate.Get()
}

// GetImmediateOk returns a tuple with the Immediate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetImmediateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Immediate.Get(), o.Immediate.IsSet()
}

// HasImmediate returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasImmediate() bool {
	if o != nil && o.Immediate.IsSet() {
		return true
	}

	return false
}

// SetImmediate gets a reference to the given NullableBool and assigns it to the Immediate field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetImmediate(v bool) {
	o.Immediate.Set(&v)
}

// SetImmediateNil sets the value for Immediate to be an explicit nil
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetImmediateNil() {
	o.Immediate.Set(nil)
}

// UnsetImmediate ensures that no value is present for Immediate, not even an explicit nil
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) UnsetImmediate() {
	o.Immediate.Unset()
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetInterval() KeyfactorCommonSchedulingModelsIntervalModel {
	if o == nil || isNil(o.Interval) {
		var ret KeyfactorCommonSchedulingModelsIntervalModel
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetIntervalOk() (*KeyfactorCommonSchedulingModelsIntervalModel, bool) {
	if o == nil || isNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasInterval() bool {
	if o != nil && !isNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given KeyfactorCommonSchedulingModelsIntervalModel and assigns it to the Interval field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetInterval(v KeyfactorCommonSchedulingModelsIntervalModel) {
	o.Interval = &v
}

// GetDaily returns the Daily field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetDaily() KeyfactorCommonSchedulingModelsTimeModel {
	if o == nil || isNil(o.Daily) {
		var ret KeyfactorCommonSchedulingModelsTimeModel
		return ret
	}
	return *o.Daily
}

// GetDailyOk returns a tuple with the Daily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetDailyOk() (*KeyfactorCommonSchedulingModelsTimeModel, bool) {
	if o == nil || isNil(o.Daily) {
		return nil, false
	}
	return o.Daily, true
}

// HasDaily returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasDaily() bool {
	if o != nil && !isNil(o.Daily) {
		return true
	}

	return false
}

// SetDaily gets a reference to the given KeyfactorCommonSchedulingModelsTimeModel and assigns it to the Daily field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetDaily(v KeyfactorCommonSchedulingModelsTimeModel) {
	o.Daily = &v
}

// GetWeekly returns the Weekly field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetWeekly() KeyfactorCommonSchedulingModelsWeeklyModel {
	if o == nil || isNil(o.Weekly) {
		var ret KeyfactorCommonSchedulingModelsWeeklyModel
		return ret
	}
	return *o.Weekly
}

// GetWeeklyOk returns a tuple with the Weekly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetWeeklyOk() (*KeyfactorCommonSchedulingModelsWeeklyModel, bool) {
	if o == nil || isNil(o.Weekly) {
		return nil, false
	}
	return o.Weekly, true
}

// HasWeekly returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasWeekly() bool {
	if o != nil && !isNil(o.Weekly) {
		return true
	}

	return false
}

// SetWeekly gets a reference to the given KeyfactorCommonSchedulingModelsWeeklyModel and assigns it to the Weekly field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetWeekly(v KeyfactorCommonSchedulingModelsWeeklyModel) {
	o.Weekly = &v
}

// GetMonthly returns the Monthly field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetMonthly() KeyfactorCommonSchedulingModelsMonthlyModel {
	if o == nil || isNil(o.Monthly) {
		var ret KeyfactorCommonSchedulingModelsMonthlyModel
		return ret
	}
	return *o.Monthly
}

// GetMonthlyOk returns a tuple with the Monthly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetMonthlyOk() (*KeyfactorCommonSchedulingModelsMonthlyModel, bool) {
	if o == nil || isNil(o.Monthly) {
		return nil, false
	}
	return o.Monthly, true
}

// HasMonthly returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasMonthly() bool {
	if o != nil && !isNil(o.Monthly) {
		return true
	}

	return false
}

// SetMonthly gets a reference to the given KeyfactorCommonSchedulingModelsMonthlyModel and assigns it to the Monthly field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetMonthly(v KeyfactorCommonSchedulingModelsMonthlyModel) {
	o.Monthly = &v
}

// GetExactlyOnce returns the ExactlyOnce field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetExactlyOnce() KeyfactorCommonSchedulingModelsTimeModel {
	if o == nil || isNil(o.ExactlyOnce) {
		var ret KeyfactorCommonSchedulingModelsTimeModel
		return ret
	}
	return *o.ExactlyOnce
}

// GetExactlyOnceOk returns a tuple with the ExactlyOnce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetExactlyOnceOk() (*KeyfactorCommonSchedulingModelsTimeModel, bool) {
	if o == nil || isNil(o.ExactlyOnce) {
		return nil, false
	}
	return o.ExactlyOnce, true
}

// HasExactlyOnce returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasExactlyOnce() bool {
	if o != nil && !isNil(o.ExactlyOnce) {
		return true
	}

	return false
}

// SetExactlyOnce gets a reference to the given KeyfactorCommonSchedulingModelsTimeModel and assigns it to the ExactlyOnce field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetExactlyOnce(v KeyfactorCommonSchedulingModelsTimeModel) {
	o.ExactlyOnce = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetSchedule() string {
	if o == nil || isNil(o.Schedule.Get()) {
		var ret string
		return ret
	}
	return *o.Schedule.Get()
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schedule.Get(), o.Schedule.IsSet()
}

// HasSchedule returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasSchedule() bool {
	if o != nil && o.Schedule.IsSet() {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given NullableString and assigns it to the Schedule field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetSchedule(v string) {
	o.Schedule.Set(&v)
}

// SetScheduleNil sets the value for Schedule to be an explicit nil
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetScheduleNil() {
	o.Schedule.Set(nil)
}

// UnsetSchedule ensures that no value is present for Schedule, not even an explicit nil
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) UnsetSchedule() {
	o.Schedule.Unset()
}

// GetIsEmpty returns the IsEmpty field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetIsEmpty() bool {
	if o == nil || isNil(o.IsEmpty) {
		var ret bool
		return ret
	}
	return *o.IsEmpty
}

// GetIsEmptyOk returns a tuple with the IsEmpty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) GetIsEmptyOk() (*bool, bool) {
	if o == nil || isNil(o.IsEmpty) {
		return nil, false
	}
	return o.IsEmpty, true
}

// HasIsEmpty returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) HasIsEmpty() bool {
	if o != nil && !isNil(o.IsEmpty) {
		return true
	}

	return false
}

// SetIsEmpty gets a reference to the given bool and assigns it to the IsEmpty field.
func (o *KeyfactorCommonSchedulingKeyfactorSchedule) SetIsEmpty(v bool) {
	o.IsEmpty = &v
}

func (o KeyfactorCommonSchedulingKeyfactorSchedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorCommonSchedulingKeyfactorSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Immediate.IsSet() {
		toSerialize["immediate"] = o.Immediate.Get()
	}
	if !isNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !isNil(o.Daily) {
		toSerialize["daily"] = o.Daily
	}
	if !isNil(o.Weekly) {
		toSerialize["weekly"] = o.Weekly
	}
	if !isNil(o.Monthly) {
		toSerialize["monthly"] = o.Monthly
	}
	if !isNil(o.ExactlyOnce) {
		toSerialize["exactlyOnce"] = o.ExactlyOnce
	}
	if o.Schedule.IsSet() {
		toSerialize["schedule"] = o.Schedule.Get()
	}
	// skip: isEmpty is readOnly
	return toSerialize, nil
}

type NullableKeyfactorCommonSchedulingKeyfactorSchedule struct {
	value *KeyfactorCommonSchedulingKeyfactorSchedule
	isSet bool
}

func (v NullableKeyfactorCommonSchedulingKeyfactorSchedule) Get() *KeyfactorCommonSchedulingKeyfactorSchedule {
	return v.value
}

func (v *NullableKeyfactorCommonSchedulingKeyfactorSchedule) Set(val *KeyfactorCommonSchedulingKeyfactorSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorCommonSchedulingKeyfactorSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorCommonSchedulingKeyfactorSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorCommonSchedulingKeyfactorSchedule(val *KeyfactorCommonSchedulingKeyfactorSchedule) *NullableKeyfactorCommonSchedulingKeyfactorSchedule {
	return &NullableKeyfactorCommonSchedulingKeyfactorSchedule{value: val, isSet: true}
}

func (v NullableKeyfactorCommonSchedulingKeyfactorSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorCommonSchedulingKeyfactorSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
