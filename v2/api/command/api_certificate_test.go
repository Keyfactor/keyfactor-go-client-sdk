/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

Testing CertificateApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_command_CertificateApiService(t *testing.T) {

	cwd, _ := os.Getwd()
	t.Logf("Working directory: %s", cwd)
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test CertificateApiService CertificatesAnalyzePost", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesAnalyzePost_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesAnalyzePost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesCSVGet", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesCSVGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesCSVGet(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesDelete", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesDelete_payload: <none>")
		httpRes, err := apiClient.CertificateApi.CertificatesDelete(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesDownloadPost", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesDownloadPost_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesDownloadPost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesGet", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesGet(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesIdDelete", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateApi_CertificatesIdDelete_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("CertificateApi_CertificatesIdDelete_id: %v", id)

		t.Log("CertificateApi_CertificatesIdDelete_payload: <none>")
		httpRes, err := apiClient.CertificateApi.CertificatesIdDelete(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesIdGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateApi_CertificatesIdGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("CertificateApi_CertificatesIdGet_id: %v", id)

		t.Log("CertificateApi_CertificatesIdGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesIdGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesIdHistoryGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateApi_CertificatesIdHistoryGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("CertificateApi_CertificatesIdHistoryGet_id: %v", id)

		t.Log("CertificateApi_CertificatesIdHistoryGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesIdHistoryGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesIdSecurityGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateApi_CertificatesIdSecurityGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("CertificateApi_CertificatesIdSecurityGet_id: %v", id)

		t.Log("CertificateApi_CertificatesIdSecurityGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesIdSecurityGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesIdValidateGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateApi_CertificatesIdValidateGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("CertificateApi_CertificatesIdValidateGet_id: %v", id)

		t.Log("CertificateApi_CertificatesIdValidateGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesIdValidateGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesIdentityAuditIdGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateApi_CertificatesIdentityAuditIdGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("CertificateApi_CertificatesIdentityAuditIdGet_id: %v", id)

		t.Log("CertificateApi_CertificatesIdentityAuditIdGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesIdentityAuditIdGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesImportPost", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesImportPost_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesImportPost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesLocationsIdGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateApi_CertificatesLocationsIdGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("CertificateApi_CertificatesLocationsIdGet_id: %v", id)

		t.Log("CertificateApi_CertificatesLocationsIdGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesLocationsIdGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesMetadataAllPut", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesMetadataAllPut_payload: <none>")
		httpRes, err := apiClient.CertificateApi.CertificatesMetadataAllPut(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesMetadataCompareGet", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesMetadataCompareGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesMetadataCompareGet(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesMetadataPut", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesMetadataPut_payload: <none>")
		httpRes, err := apiClient.CertificateApi.CertificatesMetadataPut(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesPrivateKeyDelete", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesPrivateKeyDelete_payload: <none>")
		httpRes, err := apiClient.CertificateApi.CertificatesPrivateKeyDelete(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesPrivateKeyIdDelete", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateApi_CertificatesPrivateKeyIdDelete_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("CertificateApi_CertificatesPrivateKeyIdDelete_id: %v", id)

		t.Log("CertificateApi_CertificatesPrivateKeyIdDelete_payload: <none>")
		httpRes, err := apiClient.CertificateApi.CertificatesPrivateKeyIdDelete(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesQueryDelete", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesQueryDelete_payload: <none>")
		httpRes, err := apiClient.CertificateApi.CertificatesQueryDelete(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesRecoverPost", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesRecoverPost_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesRecoverPost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateApiService CertificatesRevokePost", func(t *testing.T) {

		t.Log("CertificateApi_CertificatesRevokePost_payload: <none>")
		resp, httpRes, err := apiClient.CertificateApi.CertificatesRevokePost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

}
