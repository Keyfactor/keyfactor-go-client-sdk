/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

Testing CertificateStoreApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_command_CertificateStoreApiService(t *testing.T) {

	cwd, _ := os.Getwd()
	t.Logf("Working directory: %s", cwd)
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test CertificateStoreApiService CertificateStoresApprovePost", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresApprovePost_payload: <none>")
		httpRes, err := apiClient.CertificateStoreApi.CertificateStoresApprovePost(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresAssignContainerPut", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresAssignContainerPut_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresAssignContainerPut(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresCertificatesAddPost", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresCertificatesAddPost_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresCertificatesAddPost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresCertificatesRemovePost", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresCertificatesRemovePost_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresCertificatesRemovePost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresDelete", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresDelete_payload: <none>")
		httpRes, err := apiClient.CertificateStoreApi.CertificateStoresDelete(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresDiscoveryJobPut", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresDiscoveryJobPut_payload: <none>")
		httpRes, err := apiClient.CertificateStoreApi.CertificateStoresDiscoveryJobPut(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresGet", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresGet(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresIdDelete", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateStoreApi_CertificateStoresIdDelete_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("CertificateStoreApi_CertificateStoresIdDelete_id: %v", id)

		t.Log("CertificateStoreApi_CertificateStoresIdDelete_payload: <none>")
		httpRes, err := apiClient.CertificateStoreApi.CertificateStoresIdDelete(context.Background(), id.(string)).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresIdGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateStoreApi_CertificateStoresIdGet_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("CertificateStoreApi_CertificateStoresIdGet_id: %v", id)

		t.Log("CertificateStoreApi_CertificateStoresIdGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresIdGet(context.Background(), id.(string)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresIdInventoryGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("CertificateStoreApi_CertificateStoresIdInventoryGet_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("CertificateStoreApi_CertificateStoresIdInventoryGet_id: %v", id)

		t.Log("CertificateStoreApi_CertificateStoresIdInventoryGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresIdInventoryGet(context.Background(), id.(string)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresPasswordPut", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresPasswordPut_payload: <none>")
		httpRes, err := apiClient.CertificateStoreApi.CertificateStoresPasswordPut(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresPost", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresPost_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresPost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresPut", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresPut_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresPut(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresReenrollmentPost", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresReenrollmentPost_payload: <none>")
		httpRes, err := apiClient.CertificateStoreApi.CertificateStoresReenrollmentPost(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresSchedulePost", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresSchedulePost_payload: <none>")
		httpRes, err := apiClient.CertificateStoreApi.CertificateStoresSchedulePost(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresServerGet", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresServerGet_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresServerGet(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresServerPost", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresServerPost_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresServerPost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test CertificateStoreApiService CertificateStoresServerPut", func(t *testing.T) {

		t.Log("CertificateStoreApi_CertificateStoresServerPut_payload: <none>")
		resp, httpRes, err := apiClient.CertificateStoreApi.CertificateStoresServerPut(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

}
