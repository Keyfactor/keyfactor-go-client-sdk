/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

Testing WorkflowDefinitionApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"os"
	"testing"
)

func Test_command_WorkflowDefinitionApiService(t *testing.T) {
	cwd, _ := os.Getwd()
	t.Logf("Working directory: %s", cwd)
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test WorkflowDefinitionApiService WorkflowDefinitionConfigureDefinitionSteps", func(t *testing.T) {

		var definitionId interface{}

		definitionId = os.Getenv("WorkflowDefinitionApi_WorkflowDefinitionConfigureDefinitionSteps_definitionId")
		definitionId, _ = convertParamInterface(definitionId, "string")
		t.Logf("WorkflowDefinitionApi_WorkflowDefinitionConfigureDefinitionSteps_definitionId: %v", definitionId)

		resp, httpRes, err := apiClient.WorkflowDefinitionApi.WorkflowDefinitionConfigureDefinitionSteps(context.Background(), definitionId.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowDefinitionApiService WorkflowDefinitionCreateNewDefinition", func(t *testing.T) {

		resp, httpRes, err := apiClient.WorkflowDefinitionApi.WorkflowDefinitionCreateNewDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowDefinitionApiService WorkflowDefinitionDelete", func(t *testing.T) {

		var definitionId interface{}

		definitionId = os.Getenv("WorkflowDefinitionApi_WorkflowDefinitionDelete_definitionId")
		definitionId, _ = convertParamInterface(definitionId, "string")
		t.Logf("WorkflowDefinitionApi_WorkflowDefinitionDelete_definitionId: %v", definitionId)

		httpRes, err := apiClient.WorkflowDefinitionApi.WorkflowDefinitionDelete(context.Background(), definitionId.(string)).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowDefinitionApiService WorkflowDefinitionGet", func(t *testing.T) {

		var definitionId interface{}

		definitionId = os.Getenv("WorkflowDefinitionApi_WorkflowDefinitionGet_definitionId")
		definitionId, _ = convertParamInterface(definitionId, "string")
		t.Logf("WorkflowDefinitionApi_WorkflowDefinitionGet_definitionId: %v", definitionId)

		resp, httpRes, err := apiClient.WorkflowDefinitionApi.WorkflowDefinitionGet(context.Background(), definitionId.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowDefinitionApiService WorkflowDefinitionGetStepSchema", func(t *testing.T) {

		var extensionName interface{}

		extensionName = os.Getenv("WorkflowDefinitionApi_WorkflowDefinitionGetStepSchema_extensionName")
		extensionName, _ = convertParamInterface(extensionName, "string")
		t.Logf("WorkflowDefinitionApi_WorkflowDefinitionGetStepSchema_extensionName: %v", extensionName)

		resp, httpRes, err := apiClient.WorkflowDefinitionApi.WorkflowDefinitionGetStepSchema(context.Background(), extensionName.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowDefinitionApiService WorkflowDefinitionPublishDefinition", func(t *testing.T) {

		var definitionId interface{}

		definitionId = os.Getenv("WorkflowDefinitionApi_WorkflowDefinitionPublishDefinition_definitionId")
		definitionId, _ = convertParamInterface(definitionId, "string")
		t.Logf("WorkflowDefinitionApi_WorkflowDefinitionPublishDefinition_definitionId: %v", definitionId)

		resp, httpRes, err := apiClient.WorkflowDefinitionApi.WorkflowDefinitionPublishDefinition(context.Background(), definitionId.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowDefinitionApiService WorkflowDefinitionQuery", func(t *testing.T) {

		resp, httpRes, err := apiClient.WorkflowDefinitionApi.WorkflowDefinitionQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowDefinitionApiService WorkflowDefinitionQueryAvailableSteps", func(t *testing.T) {

		resp, httpRes, err := apiClient.WorkflowDefinitionApi.WorkflowDefinitionQueryAvailableSteps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowDefinitionApiService WorkflowDefinitionQueryWorkflowTypes", func(t *testing.T) {

		resp, httpRes, err := apiClient.WorkflowDefinitionApi.WorkflowDefinitionQueryWorkflowTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowDefinitionApiService WorkflowDefinitionUpdateExistingDefinition", func(t *testing.T) {

		var definitionId interface{}

		definitionId = os.Getenv("WorkflowDefinitionApi_WorkflowDefinitionUpdateExistingDefinition_definitionId")
		definitionId, _ = convertParamInterface(definitionId, "string")
		t.Logf("WorkflowDefinitionApi_WorkflowDefinitionUpdateExistingDefinition_definitionId: %v", definitionId)

		resp, httpRes, err := apiClient.WorkflowDefinitionApi.WorkflowDefinitionUpdateExistingDefinition(context.Background(), definitionId.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
