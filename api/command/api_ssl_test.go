/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

Testing SslApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"os"
	"testing"
)

func Test_command_SslApiService(t *testing.T) {
	cwd, _ := os.Getwd()
	t.Logf("Working directory: %s", cwd)
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test SslApiService SslAddNetworkRanges", func(t *testing.T) {

		httpRes, err := apiClient.SslApi.SslAddNetworkRanges(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslCreateNetwork", func(t *testing.T) {

		resp, httpRes, err := apiClient.SslApi.SslCreateNetwork(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslEndpoint", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SslApi_SslEndpoint_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("SslApi_SslEndpoint_id: %v", id)

		resp, httpRes, err := apiClient.SslApi.SslEndpoint(context.Background(), id.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslEndpointHistory", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SslApi_SslEndpointHistory_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("SslApi_SslEndpointHistory_id: %v", id)

		resp, httpRes, err := apiClient.SslApi.SslEndpointHistory(context.Background(), id.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslGetNetwork", func(t *testing.T) {

		var identifier interface{}

		identifier = os.Getenv("SslApi_SslGetNetwork_identifier")
		identifier, _ = convertParamInterface(identifier, "string")
		t.Logf("SslApi_SslGetNetwork_identifier: %v", identifier)

		resp, httpRes, err := apiClient.SslApi.SslGetNetwork(context.Background(), identifier.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslGetNetworkRangesForNetwork", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SslApi_SslGetNetworkRangesForNetwork_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("SslApi_SslGetNetworkRangesForNetwork_id: %v", id)

		resp, httpRes, err := apiClient.SslApi.SslGetNetworkRangesForNetwork(context.Background(), id.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslGetNetworks", func(t *testing.T) {

		resp, httpRes, err := apiClient.SslApi.SslGetNetworks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslImmediateSslScan", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SslApi_SslImmediateSslScan_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("SslApi_SslImmediateSslScan_id: %v", id)

		httpRes, err := apiClient.SslApi.SslImmediateSslScan(context.Background(), id.(string)).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslMonitorAll", func(t *testing.T) {

		httpRes, err := apiClient.SslApi.SslMonitorAll(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslMonitoringStatus", func(t *testing.T) {

		httpRes, err := apiClient.SslApi.SslMonitoringStatus(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslNetworkScanParts", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SslApi_SslNetworkScanParts_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("SslApi_SslNetworkScanParts_id: %v", id)

		resp, httpRes, err := apiClient.SslApi.SslNetworkScanParts(context.Background(), id.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslRemoveAllNetworkRanges", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SslApi_SslRemoveAllNetworkRanges_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("SslApi_SslRemoveAllNetworkRanges_id: %v", id)

		httpRes, err := apiClient.SslApi.SslRemoveAllNetworkRanges(context.Background(), id.(string)).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslRemoveNetwork", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SslApi_SslRemoveNetwork_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("SslApi_SslRemoveNetwork_id: %v", id)

		httpRes, err := apiClient.SslApi.SslRemoveNetwork(context.Background(), id.(string)).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslResults", func(t *testing.T) {

		resp, httpRes, err := apiClient.SslApi.SslResults(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslReviewAll", func(t *testing.T) {

		httpRes, err := apiClient.SslApi.SslReviewAll(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslReviewedStatus", func(t *testing.T) {

		httpRes, err := apiClient.SslApi.SslReviewedStatus(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslScanPart", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SslApi_SslScanPart_id")
		id, _ = convertParamInterface(id, "string")
		t.Logf("SslApi_SslScanPart_id: %v", id)

		resp, httpRes, err := apiClient.SslApi.SslScanPart(context.Background(), id.(string)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslSetNetworkRanges", func(t *testing.T) {

		httpRes, err := apiClient.SslApi.SslSetNetworkRanges(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslUpdateNetwork", func(t *testing.T) {

		resp, httpRes, err := apiClient.SslApi.SslUpdateNetwork(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslValidateNetworkRanges", func(t *testing.T) {

		httpRes, err := apiClient.SslApi.SslValidateNetworkRanges(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
