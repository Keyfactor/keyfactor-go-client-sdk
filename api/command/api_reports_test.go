/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

Testing ReportsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_command_ReportsApiService(t *testing.T) {

	cwd, _ := os.Getwd()
	t.Logf("Working directory: %s", cwd)
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test ReportsApiService ReportsCreateCustomReport", func(t *testing.T) {

		t.Log("ReportsApi_ReportsCreateCustomReport_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsCreateCustomReport(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsCreateReportSchedule", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsCreateReportSchedule_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsCreateReportSchedule_id: %v", id)

		t.Log("ReportsApi_ReportsCreateReportSchedule_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsCreateReportSchedule(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsDeleteReport", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsDeleteReport_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsDeleteReport_id: %v", id)

		t.Log("ReportsApi_ReportsDeleteReport_payload: <none>")
		httpRes, err := apiClient.ReportsApi.ReportsDeleteReport(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsDeleteReportSchedule", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsDeleteReportSchedule_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsDeleteReportSchedule_id: %v", id)

		t.Log("ReportsApi_ReportsDeleteReportSchedule_payload: <none>")
		httpRes, err := apiClient.ReportsApi.ReportsDeleteReportSchedule(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsGetCustomReport", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsGetCustomReport_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsGetCustomReport_id: %v", id)

		t.Log("ReportsApi_ReportsGetCustomReport_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsGetCustomReport(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsGetReport", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsGetReport_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsGetReport_id: %v", id)

		t.Log("ReportsApi_ReportsGetReport_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsGetReport(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsGetReportParameters", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsGetReportParameters_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsGetReportParameters_id: %v", id)

		t.Log("ReportsApi_ReportsGetReportParameters_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsGetReportParameters(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsGetReportSchedule", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsGetReportSchedule_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsGetReportSchedule_id: %v", id)

		t.Log("ReportsApi_ReportsGetReportSchedule_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsGetReportSchedule(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsGetReportSchedules", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsGetReportSchedules_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsGetReportSchedules_id: %v", id)

		t.Log("ReportsApi_ReportsGetReportSchedules_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsGetReportSchedules(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsQueryCustomReports", func(t *testing.T) {

		t.Log("ReportsApi_ReportsQueryCustomReports_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsQueryCustomReports(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsQueryReports", func(t *testing.T) {

		t.Log("ReportsApi_ReportsQueryReports_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsQueryReports(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsUpdateCustomReport", func(t *testing.T) {

		t.Log("ReportsApi_ReportsUpdateCustomReport_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsUpdateCustomReport(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsUpdateReport", func(t *testing.T) {

		t.Log("ReportsApi_ReportsUpdateReport_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsUpdateReport(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsUpdateReportParameters", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsUpdateReportParameters_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsUpdateReportParameters_id: %v", id)

		t.Log("ReportsApi_ReportsUpdateReportParameters_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsUpdateReportParameters(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ReportsApiService ReportsUpdateReportSchedule", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ReportsApi_ReportsUpdateReportSchedule_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ReportsApi_ReportsUpdateReportSchedule_id: %v", id)

		t.Log("ReportsApi_ReportsUpdateReportSchedule_payload: <none>")
		resp, httpRes, err := apiClient.ReportsApi.ReportsUpdateReportSchedule(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

}
