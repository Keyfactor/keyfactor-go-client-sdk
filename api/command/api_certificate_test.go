/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

Testing CertificateApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_command_CertificateApiService(t *testing.T) {
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test CertificateApiService CertificateAnalyzeCert", func(t *testing.T) {

		resp, httpRes, err := apiClient.CertificateApi.CertificateAnalyzeCert(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateCertificateHistory", func(t *testing.T) {

		var id int32

		resp, httpRes, err := apiClient.CertificateApi.CertificateCertificateHistory(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateCompareMetadata", func(t *testing.T) {

		resp, httpRes, err := apiClient.CertificateApi.CertificateCompareMetadata(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateDeleteByQuery", func(t *testing.T) {

		httpRes, err := apiClient.CertificateApi.CertificateDeleteByQuery(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateDeleteCertificate", func(t *testing.T) {

		var id int32

		httpRes, err := apiClient.CertificateApi.CertificateDeleteCertificate(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateDeleteCertificates", func(t *testing.T) {

		httpRes, err := apiClient.CertificateApi.CertificateDeleteCertificates(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateDeletePrivateKeys0", func(t *testing.T) {

		httpRes, err := apiClient.CertificateApi.CertificateDeletePrivateKeys0(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateDeletePrivateKeys1", func(t *testing.T) {

		var id int32

		httpRes, err := apiClient.CertificateApi.CertificateDeletePrivateKeys1(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateDownloadCertificateAsync", func(t *testing.T) {

		resp, httpRes, err := apiClient.CertificateApi.CertificateDownloadCertificateAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateGetCertificate", func(t *testing.T) {

		var id int32

		resp, httpRes, err := apiClient.CertificateApi.CertificateGetCertificate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateGetCertificateLocations", func(t *testing.T) {

		var id int32

		resp, httpRes, err := apiClient.CertificateApi.CertificateGetCertificateLocations(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateGetCertificateSecurity", func(t *testing.T) {

		var id int32

		resp, httpRes, err := apiClient.CertificateApi.CertificateGetCertificateSecurity(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateIdentityAudit", func(t *testing.T) {

		var id int32

		resp, httpRes, err := apiClient.CertificateApi.CertificateIdentityAudit(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificatePostImportCertificate", func(t *testing.T) {

		resp, httpRes, err := apiClient.CertificateApi.CertificatePostImportCertificate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateQueryCertificates", func(t *testing.T) {

		resp, httpRes, err := apiClient.CertificateApi.CertificateQueryCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateRecoverCertificateAsync", func(t *testing.T) {

		resp, httpRes, err := apiClient.CertificateApi.CertificateRecoverCertificateAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateRevoke", func(t *testing.T) {

		resp, httpRes, err := apiClient.CertificateApi.CertificateRevoke(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateRevokeAll", func(t *testing.T) {

		resp, httpRes, err := apiClient.CertificateApi.CertificateRevokeAll(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateUpdateAllMetadata", func(t *testing.T) {

		httpRes, err := apiClient.CertificateApi.CertificateUpdateAllMetadata(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateUpdateMetadata", func(t *testing.T) {

		httpRes, err := apiClient.CertificateApi.CertificateUpdateMetadata(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CertificateApiService CertificateValidateCertificate", func(t *testing.T) {

		var id int32

		resp, httpRes, err := apiClient.CertificateApi.CertificateValidateCertificate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
