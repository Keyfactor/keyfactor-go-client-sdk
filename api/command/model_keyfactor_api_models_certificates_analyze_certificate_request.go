/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsCertificatesAnalyzeCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsCertificatesAnalyzeCertificateRequest{}

// KeyfactorApiModelsCertificatesAnalyzeCertificateRequest struct for KeyfactorApiModelsCertificatesAnalyzeCertificateRequest
type KeyfactorApiModelsCertificatesAnalyzeCertificateRequest struct {
	Certificate          *string `json:"Certificate,omitempty"`
	Password             *string `json:"Password,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KeyfactorApiModelsCertificatesAnalyzeCertificateRequest KeyfactorApiModelsCertificatesAnalyzeCertificateRequest

// NewKeyfactorApiModelsCertificatesAnalyzeCertificateRequest instantiates a new KeyfactorApiModelsCertificatesAnalyzeCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsCertificatesAnalyzeCertificateRequest() *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest {
	this := KeyfactorApiModelsCertificatesAnalyzeCertificateRequest{}
	return &this
}

// NewKeyfactorApiModelsCertificatesAnalyzeCertificateRequestWithDefaults instantiates a new KeyfactorApiModelsCertificatesAnalyzeCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsCertificatesAnalyzeCertificateRequestWithDefaults() *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest {
	this := KeyfactorApiModelsCertificatesAnalyzeCertificateRequest{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) GetCertificate() string {
	if o == nil || isNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) GetCertificateOk() (*string, bool) {
	if o == nil || isNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) HasCertificate() bool {
	if o != nil && !isNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) SetCertificate(v string) {
	o.Certificate = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) SetPassword(v string) {
	o.Password = &v
}

func (o KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Certificate) {
		toSerialize["Certificate"] = o.Certificate
	}
	if !isNil(o.Password) {
		toSerialize["Password"] = o.Password
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) UnmarshalJSON(bytes []byte) (err error) {
	varKeyfactorApiModelsCertificatesAnalyzeCertificateRequest := _KeyfactorApiModelsCertificatesAnalyzeCertificateRequest{}

	if err = json.Unmarshal(bytes, &varKeyfactorApiModelsCertificatesAnalyzeCertificateRequest); err == nil {
		*o = KeyfactorApiModelsCertificatesAnalyzeCertificateRequest(varKeyfactorApiModelsCertificatesAnalyzeCertificateRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Certificate")
		delete(additionalProperties, "Password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyfactorApiModelsCertificatesAnalyzeCertificateRequest struct {
	value *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest
	isSet bool
}

func (v NullableKeyfactorApiModelsCertificatesAnalyzeCertificateRequest) Get() *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest {
	return v.value
}

func (v *NullableKeyfactorApiModelsCertificatesAnalyzeCertificateRequest) Set(val *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsCertificatesAnalyzeCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsCertificatesAnalyzeCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsCertificatesAnalyzeCertificateRequest(val *KeyfactorApiModelsCertificatesAnalyzeCertificateRequest) *NullableKeyfactorApiModelsCertificatesAnalyzeCertificateRequest {
	return &NullableKeyfactorApiModelsCertificatesAnalyzeCertificateRequest{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsCertificatesAnalyzeCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsCertificatesAnalyzeCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
