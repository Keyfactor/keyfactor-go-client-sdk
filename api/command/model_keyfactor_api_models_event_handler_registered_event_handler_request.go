/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest{}

// KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest struct for KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest
type KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest struct {
	Id                   int32 `json:"Id"`
	UseHandler           bool  `json:"UseHandler"`
	AdditionalProperties map[string]interface{}
}

type _KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest

// NewKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest instantiates a new KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest(id int32, useHandler bool) *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest {
	this := KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest{}
	this.Id = id
	this.UseHandler = useHandler
	return &this
}

// NewKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequestWithDefaults instantiates a new KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequestWithDefaults() *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest {
	this := KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest{}
	return &this
}

// GetId returns the Id field value
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) SetId(v int32) {
	o.Id = v
}

// GetUseHandler returns the UseHandler field value
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) GetUseHandler() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseHandler
}

// GetUseHandlerOk returns a tuple with the UseHandler field value
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) GetUseHandlerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseHandler, true
}

// SetUseHandler sets field value
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) SetUseHandler(v bool) {
	o.UseHandler = v
}

func (o KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Id"] = o.Id
	toSerialize["UseHandler"] = o.UseHandler

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) UnmarshalJSON(bytes []byte) (err error) {
	varKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest := _KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest{}

	if err = json.Unmarshal(bytes, &varKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest); err == nil {
		*o = KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest(varKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Id")
		delete(additionalProperties, "UseHandler")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest struct {
	value *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest
	isSet bool
}

func (v NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) Get() *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest {
	return v.value
}

func (v *NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) Set(val *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest(val *KeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) *NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest {
	return &NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
