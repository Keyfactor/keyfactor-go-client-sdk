/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsAlertsPendingPendingAlertTestResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsAlertsPendingPendingAlertTestResponse{}

// KeyfactorApiModelsAlertsPendingPendingAlertTestResponse struct for KeyfactorApiModelsAlertsPendingPendingAlertTestResponse
type KeyfactorApiModelsAlertsPendingPendingAlertTestResponse struct {
	PendingAlerts        []KeyfactorApiModelsAlertsPendingPendingAlertResponse `json:"PendingAlerts,omitempty"`
	AlertBuildResult     *int32                                                `json:"AlertBuildResult,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KeyfactorApiModelsAlertsPendingPendingAlertTestResponse KeyfactorApiModelsAlertsPendingPendingAlertTestResponse

// NewKeyfactorApiModelsAlertsPendingPendingAlertTestResponse instantiates a new KeyfactorApiModelsAlertsPendingPendingAlertTestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsAlertsPendingPendingAlertTestResponse() *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse {
	this := KeyfactorApiModelsAlertsPendingPendingAlertTestResponse{}
	return &this
}

// NewKeyfactorApiModelsAlertsPendingPendingAlertTestResponseWithDefaults instantiates a new KeyfactorApiModelsAlertsPendingPendingAlertTestResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsAlertsPendingPendingAlertTestResponseWithDefaults() *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse {
	this := KeyfactorApiModelsAlertsPendingPendingAlertTestResponse{}
	return &this
}

// GetPendingAlerts returns the PendingAlerts field value if set, zero value otherwise.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) GetPendingAlerts() []KeyfactorApiModelsAlertsPendingPendingAlertResponse {
	if o == nil || isNil(o.PendingAlerts) {
		var ret []KeyfactorApiModelsAlertsPendingPendingAlertResponse
		return ret
	}
	return o.PendingAlerts
}

// GetPendingAlertsOk returns a tuple with the PendingAlerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) GetPendingAlertsOk() ([]KeyfactorApiModelsAlertsPendingPendingAlertResponse, bool) {
	if o == nil || isNil(o.PendingAlerts) {
		return nil, false
	}
	return o.PendingAlerts, true
}

// HasPendingAlerts returns a boolean if a field has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) HasPendingAlerts() bool {
	if o != nil && !isNil(o.PendingAlerts) {
		return true
	}

	return false
}

// SetPendingAlerts gets a reference to the given []KeyfactorApiModelsAlertsPendingPendingAlertResponse and assigns it to the PendingAlerts field.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) SetPendingAlerts(v []KeyfactorApiModelsAlertsPendingPendingAlertResponse) {
	o.PendingAlerts = v
}

// GetAlertBuildResult returns the AlertBuildResult field value if set, zero value otherwise.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) GetAlertBuildResult() int32 {
	if o == nil || isNil(o.AlertBuildResult) {
		var ret int32
		return ret
	}
	return *o.AlertBuildResult
}

// GetAlertBuildResultOk returns a tuple with the AlertBuildResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) GetAlertBuildResultOk() (*int32, bool) {
	if o == nil || isNil(o.AlertBuildResult) {
		return nil, false
	}
	return o.AlertBuildResult, true
}

// HasAlertBuildResult returns a boolean if a field has been set.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) HasAlertBuildResult() bool {
	if o != nil && !isNil(o.AlertBuildResult) {
		return true
	}

	return false
}

// SetAlertBuildResult gets a reference to the given int32 and assigns it to the AlertBuildResult field.
func (o *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) SetAlertBuildResult(v int32) {
	o.AlertBuildResult = &v
}

func (o KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PendingAlerts) {
		toSerialize["PendingAlerts"] = o.PendingAlerts
	}
	if !isNil(o.AlertBuildResult) {
		toSerialize["AlertBuildResult"] = o.AlertBuildResult
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) UnmarshalJSON(bytes []byte) (err error) {
	varKeyfactorApiModelsAlertsPendingPendingAlertTestResponse := _KeyfactorApiModelsAlertsPendingPendingAlertTestResponse{}

	if err = json.Unmarshal(bytes, &varKeyfactorApiModelsAlertsPendingPendingAlertTestResponse); err == nil {
		*o = KeyfactorApiModelsAlertsPendingPendingAlertTestResponse(varKeyfactorApiModelsAlertsPendingPendingAlertTestResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "PendingAlerts")
		delete(additionalProperties, "AlertBuildResult")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyfactorApiModelsAlertsPendingPendingAlertTestResponse struct {
	value *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse
	isSet bool
}

func (v NullableKeyfactorApiModelsAlertsPendingPendingAlertTestResponse) Get() *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse {
	return v.value
}

func (v *NullableKeyfactorApiModelsAlertsPendingPendingAlertTestResponse) Set(val *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsAlertsPendingPendingAlertTestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsAlertsPendingPendingAlertTestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsAlertsPendingPendingAlertTestResponse(val *KeyfactorApiModelsAlertsPendingPendingAlertTestResponse) *NullableKeyfactorApiModelsAlertsPendingPendingAlertTestResponse {
	return &NullableKeyfactorApiModelsAlertsPendingPendingAlertTestResponse{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsAlertsPendingPendingAlertTestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsAlertsPendingPendingAlertTestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
