/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsLicenseLicenseResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsLicenseLicenseResponse{}

// KeyfactorApiModelsLicenseLicenseResponse struct for KeyfactorApiModelsLicenseLicenseResponse
type KeyfactorApiModelsLicenseLicenseResponse struct {
	KeyfactorVersion     *string                                          `json:"KeyfactorVersion,omitempty"`
	LicenseData          *KeyfactorApiModelsLicenseLicenseResponseLicense `json:"LicenseData,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KeyfactorApiModelsLicenseLicenseResponse KeyfactorApiModelsLicenseLicenseResponse

// NewKeyfactorApiModelsLicenseLicenseResponse instantiates a new KeyfactorApiModelsLicenseLicenseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsLicenseLicenseResponse() *KeyfactorApiModelsLicenseLicenseResponse {
	this := KeyfactorApiModelsLicenseLicenseResponse{}
	return &this
}

// NewKeyfactorApiModelsLicenseLicenseResponseWithDefaults instantiates a new KeyfactorApiModelsLicenseLicenseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsLicenseLicenseResponseWithDefaults() *KeyfactorApiModelsLicenseLicenseResponse {
	this := KeyfactorApiModelsLicenseLicenseResponse{}
	return &this
}

// GetKeyfactorVersion returns the KeyfactorVersion field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponse) GetKeyfactorVersion() string {
	if o == nil || isNil(o.KeyfactorVersion) {
		var ret string
		return ret
	}
	return *o.KeyfactorVersion
}

// GetKeyfactorVersionOk returns a tuple with the KeyfactorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponse) GetKeyfactorVersionOk() (*string, bool) {
	if o == nil || isNil(o.KeyfactorVersion) {
		return nil, false
	}
	return o.KeyfactorVersion, true
}

// HasKeyfactorVersion returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponse) HasKeyfactorVersion() bool {
	if o != nil && !isNil(o.KeyfactorVersion) {
		return true
	}

	return false
}

// SetKeyfactorVersion gets a reference to the given string and assigns it to the KeyfactorVersion field.
func (o *KeyfactorApiModelsLicenseLicenseResponse) SetKeyfactorVersion(v string) {
	o.KeyfactorVersion = &v
}

// GetLicenseData returns the LicenseData field value if set, zero value otherwise.
func (o *KeyfactorApiModelsLicenseLicenseResponse) GetLicenseData() KeyfactorApiModelsLicenseLicenseResponseLicense {
	if o == nil || isNil(o.LicenseData) {
		var ret KeyfactorApiModelsLicenseLicenseResponseLicense
		return ret
	}
	return *o.LicenseData
}

// GetLicenseDataOk returns a tuple with the LicenseData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponse) GetLicenseDataOk() (*KeyfactorApiModelsLicenseLicenseResponseLicense, bool) {
	if o == nil || isNil(o.LicenseData) {
		return nil, false
	}
	return o.LicenseData, true
}

// HasLicenseData returns a boolean if a field has been set.
func (o *KeyfactorApiModelsLicenseLicenseResponse) HasLicenseData() bool {
	if o != nil && !isNil(o.LicenseData) {
		return true
	}

	return false
}

// SetLicenseData gets a reference to the given KeyfactorApiModelsLicenseLicenseResponseLicense and assigns it to the LicenseData field.
func (o *KeyfactorApiModelsLicenseLicenseResponse) SetLicenseData(v KeyfactorApiModelsLicenseLicenseResponseLicense) {
	o.LicenseData = &v
}

func (o KeyfactorApiModelsLicenseLicenseResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsLicenseLicenseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: KeyfactorVersion is readOnly
	if !isNil(o.LicenseData) {
		toSerialize["LicenseData"] = o.LicenseData
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeyfactorApiModelsLicenseLicenseResponse) UnmarshalJSON(bytes []byte) (err error) {
	varKeyfactorApiModelsLicenseLicenseResponse := _KeyfactorApiModelsLicenseLicenseResponse{}

	if err = json.Unmarshal(bytes, &varKeyfactorApiModelsLicenseLicenseResponse); err == nil {
		*o = KeyfactorApiModelsLicenseLicenseResponse(varKeyfactorApiModelsLicenseLicenseResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "KeyfactorVersion")
		delete(additionalProperties, "LicenseData")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyfactorApiModelsLicenseLicenseResponse struct {
	value *KeyfactorApiModelsLicenseLicenseResponse
	isSet bool
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponse) Get() *KeyfactorApiModelsLicenseLicenseResponse {
	return v.value
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponse) Set(val *KeyfactorApiModelsLicenseLicenseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsLicenseLicenseResponse(val *KeyfactorApiModelsLicenseLicenseResponse) *NullableKeyfactorApiModelsLicenseLicenseResponse {
	return &NullableKeyfactorApiModelsLicenseLicenseResponse{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsLicenseLicenseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsLicenseLicenseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
