/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsCRLRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCRLRequestModel{}

// ModelsCRLRequestModel struct for ModelsCRLRequestModel
type ModelsCRLRequestModel struct {
	CertificateAuthorityLogicalName string  `json:"CertificateAuthorityLogicalName"`
	CertificateAuthorityHostName    *string `json:"CertificateAuthorityHostName,omitempty"`
	AdditionalProperties            map[string]interface{}
}

type _ModelsCRLRequestModel ModelsCRLRequestModel

// NewModelsCRLRequestModel instantiates a new ModelsCRLRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCRLRequestModel(certificateAuthorityLogicalName string) *ModelsCRLRequestModel {
	this := ModelsCRLRequestModel{}
	this.CertificateAuthorityLogicalName = certificateAuthorityLogicalName
	return &this
}

// NewModelsCRLRequestModelWithDefaults instantiates a new ModelsCRLRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCRLRequestModelWithDefaults() *ModelsCRLRequestModel {
	this := ModelsCRLRequestModel{}
	return &this
}

// GetCertificateAuthorityLogicalName returns the CertificateAuthorityLogicalName field value
func (o *ModelsCRLRequestModel) GetCertificateAuthorityLogicalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateAuthorityLogicalName
}

// GetCertificateAuthorityLogicalNameOk returns a tuple with the CertificateAuthorityLogicalName field value
// and a boolean to check if the value has been set.
func (o *ModelsCRLRequestModel) GetCertificateAuthorityLogicalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateAuthorityLogicalName, true
}

// SetCertificateAuthorityLogicalName sets field value
func (o *ModelsCRLRequestModel) SetCertificateAuthorityLogicalName(v string) {
	o.CertificateAuthorityLogicalName = v
}

// GetCertificateAuthorityHostName returns the CertificateAuthorityHostName field value if set, zero value otherwise.
func (o *ModelsCRLRequestModel) GetCertificateAuthorityHostName() string {
	if o == nil || isNil(o.CertificateAuthorityHostName) {
		var ret string
		return ret
	}
	return *o.CertificateAuthorityHostName
}

// GetCertificateAuthorityHostNameOk returns a tuple with the CertificateAuthorityHostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCRLRequestModel) GetCertificateAuthorityHostNameOk() (*string, bool) {
	if o == nil || isNil(o.CertificateAuthorityHostName) {
		return nil, false
	}
	return o.CertificateAuthorityHostName, true
}

// HasCertificateAuthorityHostName returns a boolean if a field has been set.
func (o *ModelsCRLRequestModel) HasCertificateAuthorityHostName() bool {
	if o != nil && !isNil(o.CertificateAuthorityHostName) {
		return true
	}

	return false
}

// SetCertificateAuthorityHostName gets a reference to the given string and assigns it to the CertificateAuthorityHostName field.
func (o *ModelsCRLRequestModel) SetCertificateAuthorityHostName(v string) {
	o.CertificateAuthorityHostName = &v
}

func (o ModelsCRLRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCRLRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CertificateAuthorityLogicalName"] = o.CertificateAuthorityLogicalName
	if !isNil(o.CertificateAuthorityHostName) {
		toSerialize["CertificateAuthorityHostName"] = o.CertificateAuthorityHostName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsCRLRequestModel) UnmarshalJSON(bytes []byte) (err error) {
	varModelsCRLRequestModel := _ModelsCRLRequestModel{}

	if err = json.Unmarshal(bytes, &varModelsCRLRequestModel); err == nil {
		*o = ModelsCRLRequestModel(varModelsCRLRequestModel)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "CertificateAuthorityLogicalName")
		delete(additionalProperties, "CertificateAuthorityHostName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsCRLRequestModel struct {
	value *ModelsCRLRequestModel
	isSet bool
}

func (v NullableModelsCRLRequestModel) Get() *ModelsCRLRequestModel {
	return v.value
}

func (v *NullableModelsCRLRequestModel) Set(val *ModelsCRLRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCRLRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCRLRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCRLRequestModel(val *ModelsCRLRequestModel) *NullableModelsCRLRequestModel {
	return &NullableModelsCRLRequestModel{value: val, isSet: true}
}

func (v NullableModelsCRLRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCRLRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
