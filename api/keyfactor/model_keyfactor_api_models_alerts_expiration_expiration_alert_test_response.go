/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse{}

// KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse struct for KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse
type KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse struct {
	ExpirationAlerts []KeyfactorApiModelsAlertsExpirationExpirationAlertResponse `json:"ExpirationAlerts,omitempty"`
	AlertBuildResult *int32 `json:"AlertBuildResult,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse

// NewKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse instantiates a new KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse() *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse {
	this := KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse{}
	return &this
}

// NewKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponseWithDefaults instantiates a new KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponseWithDefaults() *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse {
	this := KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse{}
	return &this
}

// GetExpirationAlerts returns the ExpirationAlerts field value if set, zero value otherwise.
func (o *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) GetExpirationAlerts() []KeyfactorApiModelsAlertsExpirationExpirationAlertResponse {
	if o == nil || isNil(o.ExpirationAlerts) {
		var ret []KeyfactorApiModelsAlertsExpirationExpirationAlertResponse
		return ret
	}
	return o.ExpirationAlerts
}

// GetExpirationAlertsOk returns a tuple with the ExpirationAlerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) GetExpirationAlertsOk() ([]KeyfactorApiModelsAlertsExpirationExpirationAlertResponse, bool) {
	if o == nil || isNil(o.ExpirationAlerts) {
		return nil, false
	}
	return o.ExpirationAlerts, true
}

// HasExpirationAlerts returns a boolean if a field has been set.
func (o *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) HasExpirationAlerts() bool {
	if o != nil && !isNil(o.ExpirationAlerts) {
		return true
	}

	return false
}

// SetExpirationAlerts gets a reference to the given []KeyfactorApiModelsAlertsExpirationExpirationAlertResponse and assigns it to the ExpirationAlerts field.
func (o *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) SetExpirationAlerts(v []KeyfactorApiModelsAlertsExpirationExpirationAlertResponse) {
	o.ExpirationAlerts = v
}

// GetAlertBuildResult returns the AlertBuildResult field value if set, zero value otherwise.
func (o *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) GetAlertBuildResult() int32 {
	if o == nil || isNil(o.AlertBuildResult) {
		var ret int32
		return ret
	}
	return *o.AlertBuildResult
}

// GetAlertBuildResultOk returns a tuple with the AlertBuildResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) GetAlertBuildResultOk() (*int32, bool) {
	if o == nil || isNil(o.AlertBuildResult) {
		return nil, false
	}
	return o.AlertBuildResult, true
}

// HasAlertBuildResult returns a boolean if a field has been set.
func (o *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) HasAlertBuildResult() bool {
	if o != nil && !isNil(o.AlertBuildResult) {
		return true
	}

	return false
}

// SetAlertBuildResult gets a reference to the given int32 and assigns it to the AlertBuildResult field.
func (o *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) SetAlertBuildResult(v int32) {
	o.AlertBuildResult = &v
}

func (o KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExpirationAlerts) {
		toSerialize["ExpirationAlerts"] = o.ExpirationAlerts
	}
	if !isNil(o.AlertBuildResult) {
		toSerialize["AlertBuildResult"] = o.AlertBuildResult
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) UnmarshalJSON(bytes []byte) (err error) {
	varKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse := _KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse{}

	if err = json.Unmarshal(bytes, &varKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse); err == nil {
		*o = KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse(varKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ExpirationAlerts")
		delete(additionalProperties, "AlertBuildResult")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse struct {
	value *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse
	isSet bool
}

func (v NullableKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) Get() *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse {
	return v.value
}

func (v *NullableKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) Set(val *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse(val *KeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) *NullableKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse {
	return &NullableKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsAlertsExpirationExpirationAlertTestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


