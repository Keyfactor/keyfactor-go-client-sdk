/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor

import (
	"encoding/json"
)

// checks if the ModelsWorkflowCertificateRequestCertStoreModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsWorkflowCertificateRequestCertStoreModel{}

// ModelsWorkflowCertificateRequestCertStoreModel struct for ModelsWorkflowCertificateRequestCertStoreModel
type ModelsWorkflowCertificateRequestCertStoreModel struct {
	EntryName *string `json:"EntryName,omitempty"`
	ClientMachine *string `json:"ClientMachine,omitempty"`
	StorePath *string `json:"StorePath,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsWorkflowCertificateRequestCertStoreModel ModelsWorkflowCertificateRequestCertStoreModel

// NewModelsWorkflowCertificateRequestCertStoreModel instantiates a new ModelsWorkflowCertificateRequestCertStoreModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsWorkflowCertificateRequestCertStoreModel() *ModelsWorkflowCertificateRequestCertStoreModel {
	this := ModelsWorkflowCertificateRequestCertStoreModel{}
	return &this
}

// NewModelsWorkflowCertificateRequestCertStoreModelWithDefaults instantiates a new ModelsWorkflowCertificateRequestCertStoreModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsWorkflowCertificateRequestCertStoreModelWithDefaults() *ModelsWorkflowCertificateRequestCertStoreModel {
	this := ModelsWorkflowCertificateRequestCertStoreModel{}
	return &this
}

// GetEntryName returns the EntryName field value if set, zero value otherwise.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) GetEntryName() string {
	if o == nil || isNil(o.EntryName) {
		var ret string
		return ret
	}
	return *o.EntryName
}

// GetEntryNameOk returns a tuple with the EntryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) GetEntryNameOk() (*string, bool) {
	if o == nil || isNil(o.EntryName) {
		return nil, false
	}
	return o.EntryName, true
}

// HasEntryName returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) HasEntryName() bool {
	if o != nil && !isNil(o.EntryName) {
		return true
	}

	return false
}

// SetEntryName gets a reference to the given string and assigns it to the EntryName field.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) SetEntryName(v string) {
	o.EntryName = &v
}

// GetClientMachine returns the ClientMachine field value if set, zero value otherwise.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) GetClientMachine() string {
	if o == nil || isNil(o.ClientMachine) {
		var ret string
		return ret
	}
	return *o.ClientMachine
}

// GetClientMachineOk returns a tuple with the ClientMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) GetClientMachineOk() (*string, bool) {
	if o == nil || isNil(o.ClientMachine) {
		return nil, false
	}
	return o.ClientMachine, true
}

// HasClientMachine returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) HasClientMachine() bool {
	if o != nil && !isNil(o.ClientMachine) {
		return true
	}

	return false
}

// SetClientMachine gets a reference to the given string and assigns it to the ClientMachine field.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) SetClientMachine(v string) {
	o.ClientMachine = &v
}

// GetStorePath returns the StorePath field value if set, zero value otherwise.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) GetStorePath() string {
	if o == nil || isNil(o.StorePath) {
		var ret string
		return ret
	}
	return *o.StorePath
}

// GetStorePathOk returns a tuple with the StorePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) GetStorePathOk() (*string, bool) {
	if o == nil || isNil(o.StorePath) {
		return nil, false
	}
	return o.StorePath, true
}

// HasStorePath returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) HasStorePath() bool {
	if o != nil && !isNil(o.StorePath) {
		return true
	}

	return false
}

// SetStorePath gets a reference to the given string and assigns it to the StorePath field.
func (o *ModelsWorkflowCertificateRequestCertStoreModel) SetStorePath(v string) {
	o.StorePath = &v
}

func (o ModelsWorkflowCertificateRequestCertStoreModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsWorkflowCertificateRequestCertStoreModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EntryName) {
		toSerialize["EntryName"] = o.EntryName
	}
	if !isNil(o.ClientMachine) {
		toSerialize["ClientMachine"] = o.ClientMachine
	}
	if !isNil(o.StorePath) {
		toSerialize["StorePath"] = o.StorePath
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsWorkflowCertificateRequestCertStoreModel) UnmarshalJSON(bytes []byte) (err error) {
	varModelsWorkflowCertificateRequestCertStoreModel := _ModelsWorkflowCertificateRequestCertStoreModel{}

	if err = json.Unmarshal(bytes, &varModelsWorkflowCertificateRequestCertStoreModel); err == nil {
		*o = ModelsWorkflowCertificateRequestCertStoreModel(varModelsWorkflowCertificateRequestCertStoreModel)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "EntryName")
		delete(additionalProperties, "ClientMachine")
		delete(additionalProperties, "StorePath")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsWorkflowCertificateRequestCertStoreModel struct {
	value *ModelsWorkflowCertificateRequestCertStoreModel
	isSet bool
}

func (v NullableModelsWorkflowCertificateRequestCertStoreModel) Get() *ModelsWorkflowCertificateRequestCertStoreModel {
	return v.value
}

func (v *NullableModelsWorkflowCertificateRequestCertStoreModel) Set(val *ModelsWorkflowCertificateRequestCertStoreModel) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsWorkflowCertificateRequestCertStoreModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsWorkflowCertificateRequestCertStoreModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsWorkflowCertificateRequestCertStoreModel(val *ModelsWorkflowCertificateRequestCertStoreModel) *NullableModelsWorkflowCertificateRequestCertStoreModel {
	return &NullableModelsWorkflowCertificateRequestCertStoreModel{value: val, isSet: true}
}

func (v NullableModelsWorkflowCertificateRequestCertStoreModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsWorkflowCertificateRequestCertStoreModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


