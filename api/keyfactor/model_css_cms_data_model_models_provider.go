/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor

import (
	"encoding/json"
)

// checks if the CSSCMSDataModelModelsProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSSCMSDataModelModelsProvider{}

// CSSCMSDataModelModelsProvider struct for CSSCMSDataModelModelsProvider
type CSSCMSDataModelModelsProvider struct {
	Id *int32 `json:"Id,omitempty"`
	Name string `json:"Name"`
	Area *int32 `json:"Area,omitempty"`
	ProviderType CSSCMSDataModelModelsProviderType `json:"ProviderType"`
	ProviderTypeParamValues []CSSCMSDataModelModelsPamProviderTypeParamValue `json:"ProviderTypeParamValues,omitempty"`
	SecuredAreaId *int32 `json:"SecuredAreaId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CSSCMSDataModelModelsProvider CSSCMSDataModelModelsProvider

// NewCSSCMSDataModelModelsProvider instantiates a new CSSCMSDataModelModelsProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSSCMSDataModelModelsProvider(name string, providerType CSSCMSDataModelModelsProviderType) *CSSCMSDataModelModelsProvider {
	this := CSSCMSDataModelModelsProvider{}
	this.Name = name
	this.ProviderType = providerType
	return &this
}

// NewCSSCMSDataModelModelsProviderWithDefaults instantiates a new CSSCMSDataModelModelsProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSSCMSDataModelModelsProviderWithDefaults() *CSSCMSDataModelModelsProvider {
	this := CSSCMSDataModelModelsProvider{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsProvider) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsProvider) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsProvider) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CSSCMSDataModelModelsProvider) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *CSSCMSDataModelModelsProvider) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsProvider) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CSSCMSDataModelModelsProvider) SetName(v string) {
	o.Name = v
}

// GetArea returns the Area field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsProvider) GetArea() int32 {
	if o == nil || isNil(o.Area) {
		var ret int32
		return ret
	}
	return *o.Area
}

// GetAreaOk returns a tuple with the Area field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsProvider) GetAreaOk() (*int32, bool) {
	if o == nil || isNil(o.Area) {
		return nil, false
	}
	return o.Area, true
}

// HasArea returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsProvider) HasArea() bool {
	if o != nil && !isNil(o.Area) {
		return true
	}

	return false
}

// SetArea gets a reference to the given int32 and assigns it to the Area field.
func (o *CSSCMSDataModelModelsProvider) SetArea(v int32) {
	o.Area = &v
}

// GetProviderType returns the ProviderType field value
func (o *CSSCMSDataModelModelsProvider) GetProviderType() CSSCMSDataModelModelsProviderType {
	if o == nil {
		var ret CSSCMSDataModelModelsProviderType
		return ret
	}

	return o.ProviderType
}

// GetProviderTypeOk returns a tuple with the ProviderType field value
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsProvider) GetProviderTypeOk() (*CSSCMSDataModelModelsProviderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderType, true
}

// SetProviderType sets field value
func (o *CSSCMSDataModelModelsProvider) SetProviderType(v CSSCMSDataModelModelsProviderType) {
	o.ProviderType = v
}

// GetProviderTypeParamValues returns the ProviderTypeParamValues field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsProvider) GetProviderTypeParamValues() []CSSCMSDataModelModelsPamProviderTypeParamValue {
	if o == nil || isNil(o.ProviderTypeParamValues) {
		var ret []CSSCMSDataModelModelsPamProviderTypeParamValue
		return ret
	}
	return o.ProviderTypeParamValues
}

// GetProviderTypeParamValuesOk returns a tuple with the ProviderTypeParamValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsProvider) GetProviderTypeParamValuesOk() ([]CSSCMSDataModelModelsPamProviderTypeParamValue, bool) {
	if o == nil || isNil(o.ProviderTypeParamValues) {
		return nil, false
	}
	return o.ProviderTypeParamValues, true
}

// HasProviderTypeParamValues returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsProvider) HasProviderTypeParamValues() bool {
	if o != nil && !isNil(o.ProviderTypeParamValues) {
		return true
	}

	return false
}

// SetProviderTypeParamValues gets a reference to the given []CSSCMSDataModelModelsPamProviderTypeParamValue and assigns it to the ProviderTypeParamValues field.
func (o *CSSCMSDataModelModelsProvider) SetProviderTypeParamValues(v []CSSCMSDataModelModelsPamProviderTypeParamValue) {
	o.ProviderTypeParamValues = v
}

// GetSecuredAreaId returns the SecuredAreaId field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsProvider) GetSecuredAreaId() int32 {
	if o == nil || isNil(o.SecuredAreaId) {
		var ret int32
		return ret
	}
	return *o.SecuredAreaId
}

// GetSecuredAreaIdOk returns a tuple with the SecuredAreaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsProvider) GetSecuredAreaIdOk() (*int32, bool) {
	if o == nil || isNil(o.SecuredAreaId) {
		return nil, false
	}
	return o.SecuredAreaId, true
}

// HasSecuredAreaId returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsProvider) HasSecuredAreaId() bool {
	if o != nil && !isNil(o.SecuredAreaId) {
		return true
	}

	return false
}

// SetSecuredAreaId gets a reference to the given int32 and assigns it to the SecuredAreaId field.
func (o *CSSCMSDataModelModelsProvider) SetSecuredAreaId(v int32) {
	o.SecuredAreaId = &v
}

func (o CSSCMSDataModelModelsProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSSCMSDataModelModelsProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	toSerialize["Name"] = o.Name
	if !isNil(o.Area) {
		toSerialize["Area"] = o.Area
	}
	toSerialize["ProviderType"] = o.ProviderType
	if !isNil(o.ProviderTypeParamValues) {
		toSerialize["ProviderTypeParamValues"] = o.ProviderTypeParamValues
	}
	if !isNil(o.SecuredAreaId) {
		toSerialize["SecuredAreaId"] = o.SecuredAreaId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CSSCMSDataModelModelsProvider) UnmarshalJSON(bytes []byte) (err error) {
	varCSSCMSDataModelModelsProvider := _CSSCMSDataModelModelsProvider{}

	if err = json.Unmarshal(bytes, &varCSSCMSDataModelModelsProvider); err == nil {
		*o = CSSCMSDataModelModelsProvider(varCSSCMSDataModelModelsProvider)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Id")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Area")
		delete(additionalProperties, "ProviderType")
		delete(additionalProperties, "ProviderTypeParamValues")
		delete(additionalProperties, "SecuredAreaId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCSSCMSDataModelModelsProvider struct {
	value *CSSCMSDataModelModelsProvider
	isSet bool
}

func (v NullableCSSCMSDataModelModelsProvider) Get() *CSSCMSDataModelModelsProvider {
	return v.value
}

func (v *NullableCSSCMSDataModelModelsProvider) Set(val *CSSCMSDataModelModelsProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelModelsProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelModelsProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelModelsProvider(val *CSSCMSDataModelModelsProvider) *NullableCSSCMSDataModelModelsProvider {
	return &NullableCSSCMSDataModelModelsProvider{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelModelsProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelModelsProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


