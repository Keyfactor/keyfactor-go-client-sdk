/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// MacEnrollmentApiService MacEnrollmentApi service
type MacEnrollmentApiService service

type ApiMacEnrollmentEditMacEnrollmentRequest struct {
	ctx                     context.Context
	ApiService              *MacEnrollmentApiService
	xKeyfactorRequestedWith *string
	macEnrollmentSettings   *KeyfactorApiModelsMacEnrollmentMacEnrollmentAPIModel
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMacEnrollmentEditMacEnrollmentRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMacEnrollmentEditMacEnrollmentRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiMacEnrollmentEditMacEnrollmentRequest) MacEnrollmentSettings(macEnrollmentSettings KeyfactorApiModelsMacEnrollmentMacEnrollmentAPIModel) ApiMacEnrollmentEditMacEnrollmentRequest {
	r.macEnrollmentSettings = &macEnrollmentSettings
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMacEnrollmentEditMacEnrollmentRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMacEnrollmentEditMacEnrollmentRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMacEnrollmentEditMacEnrollmentRequest) Execute() (*KeyfactorApiModelsMacEnrollmentMacEnrollmentAPIModel, *http.Response, error) {
	return r.ApiService.MacEnrollmentEditMacEnrollmentExecute(r)
}

/*
MacEnrollmentEditMacEnrollment Updates mac enrollment settings data

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiMacEnrollmentEditMacEnrollmentRequest
*/
func (a *MacEnrollmentApiService) MacEnrollmentEditMacEnrollment(ctx context.Context) ApiMacEnrollmentEditMacEnrollmentRequest {
	requestedWith := "APIClient"
	version := "1"
	return ApiMacEnrollmentEditMacEnrollmentRequest{
		ApiService:              a,
		ctx:                     ctx,
		xKeyfactorRequestedWith: &requestedWith,
		xKeyfactorApiVersion:    &version,
	}
}

// Execute executes the request
//
//	@return KeyfactorApiModelsMacEnrollmentMacEnrollmentAPIModel
func (a *MacEnrollmentApiService) MacEnrollmentEditMacEnrollmentExecute(r ApiMacEnrollmentEditMacEnrollmentRequest) (*KeyfactorApiModelsMacEnrollmentMacEnrollmentAPIModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorApiModelsMacEnrollmentMacEnrollmentAPIModel
	)

	localBasePath := "/KeyfactorAPI"

	localVarPath := localBasePath + "/MacEnrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}
	if r.macEnrollmentSettings == nil {
		return localVarReturnValue, nil, reportError("macEnrollmentSettings is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.macEnrollmentSettings
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMacEnrollmentMacEnrollmentRequest struct {
	ctx                     context.Context
	ApiService              *MacEnrollmentApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiMacEnrollmentMacEnrollmentRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiMacEnrollmentMacEnrollmentRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiMacEnrollmentMacEnrollmentRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiMacEnrollmentMacEnrollmentRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiMacEnrollmentMacEnrollmentRequest) Execute() (*KeyfactorApiModelsMacEnrollmentMacEnrollmentAPIModel, *http.Response, error) {
	return r.ApiService.MacEnrollmentMacEnrollmentExecute(r)
}

/*
MacEnrollmentMacEnrollment Gets mac enrollment settings data

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiMacEnrollmentMacEnrollmentRequest
*/
func (a *MacEnrollmentApiService) MacEnrollmentMacEnrollment(ctx context.Context) ApiMacEnrollmentMacEnrollmentRequest {
	requestedWith := "APIClient"
	version := "1"
	return ApiMacEnrollmentMacEnrollmentRequest{
		ApiService:              a,
		ctx:                     ctx,
		xKeyfactorRequestedWith: &requestedWith,
		xKeyfactorApiVersion:    &version,
	}
}

// Execute executes the request
//
//	@return KeyfactorApiModelsMacEnrollmentMacEnrollmentAPIModel
func (a *MacEnrollmentApiService) MacEnrollmentMacEnrollmentExecute(r ApiMacEnrollmentMacEnrollmentRequest) (*KeyfactorApiModelsMacEnrollmentMacEnrollmentAPIModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorApiModelsMacEnrollmentMacEnrollmentAPIModel
	)

	localBasePath := "/KeyfactorAPI"

	localVarPath := localBasePath + "/MacEnrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json", "application/xml", "text/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
