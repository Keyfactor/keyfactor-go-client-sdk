/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor

import (
	"encoding/json"
)

// checks if the ModelsCertificateRecoveryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateRecoveryRequest{}

// ModelsCertificateRecoveryRequest struct for ModelsCertificateRecoveryRequest
type ModelsCertificateRecoveryRequest struct {
	Password string `json:"Password"`
	CertID *int32 `json:"CertID,omitempty"`
	SerialNumber *string `json:"SerialNumber,omitempty"`
	IssuerDN NullableString `json:"IssuerDN,omitempty"`
	Thumbprint *string `json:"Thumbprint,omitempty"`
	IncludeChain *bool `json:"IncludeChain,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsCertificateRecoveryRequest ModelsCertificateRecoveryRequest

// NewModelsCertificateRecoveryRequest instantiates a new ModelsCertificateRecoveryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateRecoveryRequest(password string) *ModelsCertificateRecoveryRequest {
	this := ModelsCertificateRecoveryRequest{}
	this.Password = password
	return &this
}

// NewModelsCertificateRecoveryRequestWithDefaults instantiates a new ModelsCertificateRecoveryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateRecoveryRequestWithDefaults() *ModelsCertificateRecoveryRequest {
	this := ModelsCertificateRecoveryRequest{}
	return &this
}

// GetPassword returns the Password field value
func (o *ModelsCertificateRecoveryRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *ModelsCertificateRecoveryRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *ModelsCertificateRecoveryRequest) SetPassword(v string) {
	o.Password = v
}

// GetCertID returns the CertID field value if set, zero value otherwise.
func (o *ModelsCertificateRecoveryRequest) GetCertID() int32 {
	if o == nil || isNil(o.CertID) {
		var ret int32
		return ret
	}
	return *o.CertID
}

// GetCertIDOk returns a tuple with the CertID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateRecoveryRequest) GetCertIDOk() (*int32, bool) {
	if o == nil || isNil(o.CertID) {
		return nil, false
	}
	return o.CertID, true
}

// HasCertID returns a boolean if a field has been set.
func (o *ModelsCertificateRecoveryRequest) HasCertID() bool {
	if o != nil && !isNil(o.CertID) {
		return true
	}

	return false
}

// SetCertID gets a reference to the given int32 and assigns it to the CertID field.
func (o *ModelsCertificateRecoveryRequest) SetCertID(v int32) {
	o.CertID = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *ModelsCertificateRecoveryRequest) GetSerialNumber() string {
	if o == nil || isNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateRecoveryRequest) GetSerialNumberOk() (*string, bool) {
	if o == nil || isNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *ModelsCertificateRecoveryRequest) HasSerialNumber() bool {
	if o != nil && !isNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *ModelsCertificateRecoveryRequest) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetIssuerDN returns the IssuerDN field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsCertificateRecoveryRequest) GetIssuerDN() string {
	if o == nil || isNil(o.IssuerDN.Get()) {
		var ret string
		return ret
	}
	return *o.IssuerDN.Get()
}

// GetIssuerDNOk returns a tuple with the IssuerDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsCertificateRecoveryRequest) GetIssuerDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuerDN.Get(), o.IssuerDN.IsSet()
}

// HasIssuerDN returns a boolean if a field has been set.
func (o *ModelsCertificateRecoveryRequest) HasIssuerDN() bool {
	if o != nil && o.IssuerDN.IsSet() {
		return true
	}

	return false
}

// SetIssuerDN gets a reference to the given NullableString and assigns it to the IssuerDN field.
func (o *ModelsCertificateRecoveryRequest) SetIssuerDN(v string) {
	o.IssuerDN.Set(&v)
}
// SetIssuerDNNil sets the value for IssuerDN to be an explicit nil
func (o *ModelsCertificateRecoveryRequest) SetIssuerDNNil() {
	o.IssuerDN.Set(nil)
}

// UnsetIssuerDN ensures that no value is present for IssuerDN, not even an explicit nil
func (o *ModelsCertificateRecoveryRequest) UnsetIssuerDN() {
	o.IssuerDN.Unset()
}

// GetThumbprint returns the Thumbprint field value if set, zero value otherwise.
func (o *ModelsCertificateRecoveryRequest) GetThumbprint() string {
	if o == nil || isNil(o.Thumbprint) {
		var ret string
		return ret
	}
	return *o.Thumbprint
}

// GetThumbprintOk returns a tuple with the Thumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateRecoveryRequest) GetThumbprintOk() (*string, bool) {
	if o == nil || isNil(o.Thumbprint) {
		return nil, false
	}
	return o.Thumbprint, true
}

// HasThumbprint returns a boolean if a field has been set.
func (o *ModelsCertificateRecoveryRequest) HasThumbprint() bool {
	if o != nil && !isNil(o.Thumbprint) {
		return true
	}

	return false
}

// SetThumbprint gets a reference to the given string and assigns it to the Thumbprint field.
func (o *ModelsCertificateRecoveryRequest) SetThumbprint(v string) {
	o.Thumbprint = &v
}

// GetIncludeChain returns the IncludeChain field value if set, zero value otherwise.
func (o *ModelsCertificateRecoveryRequest) GetIncludeChain() bool {
	if o == nil || isNil(o.IncludeChain) {
		var ret bool
		return ret
	}
	return *o.IncludeChain
}

// GetIncludeChainOk returns a tuple with the IncludeChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateRecoveryRequest) GetIncludeChainOk() (*bool, bool) {
	if o == nil || isNil(o.IncludeChain) {
		return nil, false
	}
	return o.IncludeChain, true
}

// HasIncludeChain returns a boolean if a field has been set.
func (o *ModelsCertificateRecoveryRequest) HasIncludeChain() bool {
	if o != nil && !isNil(o.IncludeChain) {
		return true
	}

	return false
}

// SetIncludeChain gets a reference to the given bool and assigns it to the IncludeChain field.
func (o *ModelsCertificateRecoveryRequest) SetIncludeChain(v bool) {
	o.IncludeChain = &v
}

func (o ModelsCertificateRecoveryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateRecoveryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Password"] = o.Password
	if !isNil(o.CertID) {
		toSerialize["CertID"] = o.CertID
	}
	if !isNil(o.SerialNumber) {
		toSerialize["SerialNumber"] = o.SerialNumber
	}
	if o.IssuerDN.IsSet() {
		toSerialize["IssuerDN"] = o.IssuerDN.Get()
	}
	if !isNil(o.Thumbprint) {
		toSerialize["Thumbprint"] = o.Thumbprint
	}
	if !isNil(o.IncludeChain) {
		toSerialize["IncludeChain"] = o.IncludeChain
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsCertificateRecoveryRequest) UnmarshalJSON(bytes []byte) (err error) {
	varModelsCertificateRecoveryRequest := _ModelsCertificateRecoveryRequest{}

	if err = json.Unmarshal(bytes, &varModelsCertificateRecoveryRequest); err == nil {
		*o = ModelsCertificateRecoveryRequest(varModelsCertificateRecoveryRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Password")
		delete(additionalProperties, "CertID")
		delete(additionalProperties, "SerialNumber")
		delete(additionalProperties, "IssuerDN")
		delete(additionalProperties, "Thumbprint")
		delete(additionalProperties, "IncludeChain")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsCertificateRecoveryRequest struct {
	value *ModelsCertificateRecoveryRequest
	isSet bool
}

func (v NullableModelsCertificateRecoveryRequest) Get() *ModelsCertificateRecoveryRequest {
	return v.value
}

func (v *NullableModelsCertificateRecoveryRequest) Set(val *ModelsCertificateRecoveryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateRecoveryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateRecoveryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateRecoveryRequest(val *ModelsCertificateRecoveryRequest) *NullableModelsCertificateRecoveryRequest {
	return &NullableModelsCertificateRecoveryRequest{value: val, isSet: true}
}

func (v NullableModelsCertificateRecoveryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateRecoveryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


