/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor

import (
	"encoding/json"
)

// checks if the ModelsSecurityCertificatePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsSecurityCertificatePermissions{}

// ModelsSecurityCertificatePermissions A list of permissions for a given certificate and which security role(s) granted them.
type ModelsSecurityCertificatePermissions struct {
	Roles []ModelsSecuritySecurityRolesSecurityRoleResponseBase `json:"Roles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsSecurityCertificatePermissions ModelsSecurityCertificatePermissions

// NewModelsSecurityCertificatePermissions instantiates a new ModelsSecurityCertificatePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsSecurityCertificatePermissions() *ModelsSecurityCertificatePermissions {
	this := ModelsSecurityCertificatePermissions{}
	return &this
}

// NewModelsSecurityCertificatePermissionsWithDefaults instantiates a new ModelsSecurityCertificatePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsSecurityCertificatePermissionsWithDefaults() *ModelsSecurityCertificatePermissions {
	this := ModelsSecurityCertificatePermissions{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *ModelsSecurityCertificatePermissions) GetRoles() []ModelsSecuritySecurityRolesSecurityRoleResponseBase {
	if o == nil || isNil(o.Roles) {
		var ret []ModelsSecuritySecurityRolesSecurityRoleResponseBase
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecurityCertificatePermissions) GetRolesOk() ([]ModelsSecuritySecurityRolesSecurityRoleResponseBase, bool) {
	if o == nil || isNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ModelsSecurityCertificatePermissions) HasRoles() bool {
	if o != nil && !isNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []ModelsSecuritySecurityRolesSecurityRoleResponseBase and assigns it to the Roles field.
func (o *ModelsSecurityCertificatePermissions) SetRoles(v []ModelsSecuritySecurityRolesSecurityRoleResponseBase) {
	o.Roles = v
}

func (o ModelsSecurityCertificatePermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsSecurityCertificatePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Roles) {
		toSerialize["Roles"] = o.Roles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsSecurityCertificatePermissions) UnmarshalJSON(bytes []byte) (err error) {
	varModelsSecurityCertificatePermissions := _ModelsSecurityCertificatePermissions{}

	if err = json.Unmarshal(bytes, &varModelsSecurityCertificatePermissions); err == nil {
		*o = ModelsSecurityCertificatePermissions(varModelsSecurityCertificatePermissions)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Roles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsSecurityCertificatePermissions struct {
	value *ModelsSecurityCertificatePermissions
	isSet bool
}

func (v NullableModelsSecurityCertificatePermissions) Get() *ModelsSecurityCertificatePermissions {
	return v.value
}

func (v *NullableModelsSecurityCertificatePermissions) Set(val *ModelsSecurityCertificatePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsSecurityCertificatePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsSecurityCertificatePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsSecurityCertificatePermissions(val *ModelsSecurityCertificatePermissions) *NullableModelsSecurityCertificatePermissions {
	return &NullableModelsSecurityCertificatePermissions{value: val, isSet: true}
}

func (v NullableModelsSecurityCertificatePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsSecurityCertificatePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


