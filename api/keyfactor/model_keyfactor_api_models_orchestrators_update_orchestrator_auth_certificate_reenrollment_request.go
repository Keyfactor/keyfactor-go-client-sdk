/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest{}

// KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest struct for KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest
type KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest struct {
	OrchestratorIds      []string `json:"OrchestratorIds,omitempty"`
	Status               string   `json:"Status"`
	AdditionalProperties map[string]interface{}
}

type _KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest

// NewKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest instantiates a new KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest(status string) *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest {
	this := KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest{}
	this.Status = status
	return &this
}

// NewKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequestWithDefaults instantiates a new KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequestWithDefaults() *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest {
	this := KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest{}
	return &this
}

// GetOrchestratorIds returns the OrchestratorIds field value if set, zero value otherwise.
func (o *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) GetOrchestratorIds() []string {
	if o == nil || isNil(o.OrchestratorIds) {
		var ret []string
		return ret
	}
	return o.OrchestratorIds
}

// GetOrchestratorIdsOk returns a tuple with the OrchestratorIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) GetOrchestratorIdsOk() ([]string, bool) {
	if o == nil || isNil(o.OrchestratorIds) {
		return nil, false
	}
	return o.OrchestratorIds, true
}

// HasOrchestratorIds returns a boolean if a field has been set.
func (o *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) HasOrchestratorIds() bool {
	if o != nil && !isNil(o.OrchestratorIds) {
		return true
	}

	return false
}

// SetOrchestratorIds gets a reference to the given []string and assigns it to the OrchestratorIds field.
func (o *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) SetOrchestratorIds(v []string) {
	o.OrchestratorIds = v
}

// GetStatus returns the Status field value
func (o *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) SetStatus(v string) {
	o.Status = v
}

func (o KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.OrchestratorIds) {
		toSerialize["OrchestratorIds"] = o.OrchestratorIds
	}
	toSerialize["Status"] = o.Status

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) UnmarshalJSON(bytes []byte) (err error) {
	varKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest := _KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest{}

	if err = json.Unmarshal(bytes, &varKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest); err == nil {
		*o = KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest(varKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "OrchestratorIds")
		delete(additionalProperties, "Status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest struct {
	value *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest
	isSet bool
}

func (v NullableKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) Get() *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest {
	return v.value
}

func (v *NullableKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) Set(val *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest(val *KeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) *NullableKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest {
	return &NullableKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsOrchestratorsUpdateOrchestratorAuthCertificateReenrollmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
