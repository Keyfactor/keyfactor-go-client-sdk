/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor

import (
	"encoding/json"
)

// checks if the ModelsCertStoresSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertStoresSchedule{}

// ModelsCertStoresSchedule struct for ModelsCertStoresSchedule
type ModelsCertStoresSchedule struct {
	StoreIds             []string                                    `json:"StoreIds"`
	Schedule             *KeyfactorCommonSchedulingKeyfactorSchedule `json:"Schedule,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsCertStoresSchedule ModelsCertStoresSchedule

// NewModelsCertStoresSchedule instantiates a new ModelsCertStoresSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertStoresSchedule(storeIds []string) *ModelsCertStoresSchedule {
	this := ModelsCertStoresSchedule{}
	this.StoreIds = storeIds
	return &this
}

// NewModelsCertStoresScheduleWithDefaults instantiates a new ModelsCertStoresSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertStoresScheduleWithDefaults() *ModelsCertStoresSchedule {
	this := ModelsCertStoresSchedule{}
	return &this
}

// GetStoreIds returns the StoreIds field value
func (o *ModelsCertStoresSchedule) GetStoreIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.StoreIds
}

// GetStoreIdsOk returns a tuple with the StoreIds field value
// and a boolean to check if the value has been set.
func (o *ModelsCertStoresSchedule) GetStoreIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoreIds, true
}

// SetStoreIds sets field value
func (o *ModelsCertStoresSchedule) SetStoreIds(v []string) {
	o.StoreIds = v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *ModelsCertStoresSchedule) GetSchedule() KeyfactorCommonSchedulingKeyfactorSchedule {
	if o == nil || isNil(o.Schedule) {
		var ret KeyfactorCommonSchedulingKeyfactorSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoresSchedule) GetScheduleOk() (*KeyfactorCommonSchedulingKeyfactorSchedule, bool) {
	if o == nil || isNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *ModelsCertStoresSchedule) HasSchedule() bool {
	if o != nil && !isNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given KeyfactorCommonSchedulingKeyfactorSchedule and assigns it to the Schedule field.
func (o *ModelsCertStoresSchedule) SetSchedule(v KeyfactorCommonSchedulingKeyfactorSchedule) {
	o.Schedule = &v
}

func (o ModelsCertStoresSchedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertStoresSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["StoreIds"] = o.StoreIds
	if !isNil(o.Schedule) {
		toSerialize["Schedule"] = o.Schedule
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsCertStoresSchedule) UnmarshalJSON(bytes []byte) (err error) {
	varModelsCertStoresSchedule := _ModelsCertStoresSchedule{}

	if err = json.Unmarshal(bytes, &varModelsCertStoresSchedule); err == nil {
		*o = ModelsCertStoresSchedule(varModelsCertStoresSchedule)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "StoreIds")
		delete(additionalProperties, "Schedule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsCertStoresSchedule struct {
	value *ModelsCertStoresSchedule
	isSet bool
}

func (v NullableModelsCertStoresSchedule) Get() *ModelsCertStoresSchedule {
	return v.value
}

func (v *NullableModelsCertStoresSchedule) Set(val *ModelsCertStoresSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertStoresSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertStoresSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertStoresSchedule(val *ModelsCertStoresSchedule) *NullableModelsCertStoresSchedule {
	return &NullableModelsCertStoresSchedule{value: val, isSet: true}
}

func (v NullableModelsCertStoresSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertStoresSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
