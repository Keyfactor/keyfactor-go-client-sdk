/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor

import (
	"encoding/json"
)

// checks if the ModelsCertificateRetrievalResponseExtendedKeyUsageModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateRetrievalResponseExtendedKeyUsageModel{}

// ModelsCertificateRetrievalResponseExtendedKeyUsageModel struct for ModelsCertificateRetrievalResponseExtendedKeyUsageModel
type ModelsCertificateRetrievalResponseExtendedKeyUsageModel struct {
	Id *int32 `json:"Id,omitempty"`
	Oid *string `json:"Oid,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsCertificateRetrievalResponseExtendedKeyUsageModel ModelsCertificateRetrievalResponseExtendedKeyUsageModel

// NewModelsCertificateRetrievalResponseExtendedKeyUsageModel instantiates a new ModelsCertificateRetrievalResponseExtendedKeyUsageModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateRetrievalResponseExtendedKeyUsageModel() *ModelsCertificateRetrievalResponseExtendedKeyUsageModel {
	this := ModelsCertificateRetrievalResponseExtendedKeyUsageModel{}
	return &this
}

// NewModelsCertificateRetrievalResponseExtendedKeyUsageModelWithDefaults instantiates a new ModelsCertificateRetrievalResponseExtendedKeyUsageModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateRetrievalResponseExtendedKeyUsageModelWithDefaults() *ModelsCertificateRetrievalResponseExtendedKeyUsageModel {
	this := ModelsCertificateRetrievalResponseExtendedKeyUsageModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) SetId(v int32) {
	o.Id = &v
}

// GetOid returns the Oid field value if set, zero value otherwise.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) GetOid() string {
	if o == nil || isNil(o.Oid) {
		var ret string
		return ret
	}
	return *o.Oid
}

// GetOidOk returns a tuple with the Oid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) GetOidOk() (*string, bool) {
	if o == nil || isNil(o.Oid) {
		return nil, false
	}
	return o.Oid, true
}

// HasOid returns a boolean if a field has been set.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) HasOid() bool {
	if o != nil && !isNil(o.Oid) {
		return true
	}

	return false
}

// SetOid gets a reference to the given string and assigns it to the Oid field.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) SetOid(v string) {
	o.Oid = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o ModelsCertificateRetrievalResponseExtendedKeyUsageModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateRetrievalResponseExtendedKeyUsageModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.Oid) {
		toSerialize["Oid"] = o.Oid
	}
	if !isNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) UnmarshalJSON(bytes []byte) (err error) {
	varModelsCertificateRetrievalResponseExtendedKeyUsageModel := _ModelsCertificateRetrievalResponseExtendedKeyUsageModel{}

	if err = json.Unmarshal(bytes, &varModelsCertificateRetrievalResponseExtendedKeyUsageModel); err == nil {
		*o = ModelsCertificateRetrievalResponseExtendedKeyUsageModel(varModelsCertificateRetrievalResponseExtendedKeyUsageModel)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Id")
		delete(additionalProperties, "Oid")
		delete(additionalProperties, "DisplayName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsCertificateRetrievalResponseExtendedKeyUsageModel struct {
	value *ModelsCertificateRetrievalResponseExtendedKeyUsageModel
	isSet bool
}

func (v NullableModelsCertificateRetrievalResponseExtendedKeyUsageModel) Get() *ModelsCertificateRetrievalResponseExtendedKeyUsageModel {
	return v.value
}

func (v *NullableModelsCertificateRetrievalResponseExtendedKeyUsageModel) Set(val *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateRetrievalResponseExtendedKeyUsageModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateRetrievalResponseExtendedKeyUsageModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateRetrievalResponseExtendedKeyUsageModel(val *ModelsCertificateRetrievalResponseExtendedKeyUsageModel) *NullableModelsCertificateRetrievalResponseExtendedKeyUsageModel {
	return &NullableModelsCertificateRetrievalResponseExtendedKeyUsageModel{value: val, isSet: true}
}

func (v NullableModelsCertificateRetrievalResponseExtendedKeyUsageModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateRetrievalResponseExtendedKeyUsageModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


