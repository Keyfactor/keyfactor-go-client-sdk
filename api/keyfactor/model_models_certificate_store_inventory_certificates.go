/*
Copyright 2022 Keyfactor
Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
thespecific language governing permissions and limitations under the
License.
Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package keyfactor

import (
	"encoding/json"
	"time"
)

// checks if the ModelsCertificateStoreInventoryCertificates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateStoreInventoryCertificates{}

// ModelsCertificateStoreInventoryCertificates struct for ModelsCertificateStoreInventoryCertificates
type ModelsCertificateStoreInventoryCertificates struct {
	Id *int32 `json:"Id,omitempty"`
	IssuedDN NullableString `json:"IssuedDN,omitempty"`
	SerialNumber *string `json:"SerialNumber,omitempty"`
	NotBefore *time.Time `json:"NotBefore,omitempty"`
	NotAfter *time.Time `json:"NotAfter,omitempty"`
	SigningAlgorithm *string `json:"SigningAlgorithm,omitempty"`
	IssuerDN NullableString `json:"IssuerDN,omitempty"`
	Thumbprint *string `json:"Thumbprint,omitempty"`
	CertStoreInventoryItemId *int32 `json:"CertStoreInventoryItemId,omitempty"`
	Metadata map[string]map[string]interface{} `json:"Metadata,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsCertificateStoreInventoryCertificates ModelsCertificateStoreInventoryCertificates

// NewModelsCertificateStoreInventoryCertificates instantiates a new ModelsCertificateStoreInventoryCertificates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateStoreInventoryCertificates() *ModelsCertificateStoreInventoryCertificates {
	this := ModelsCertificateStoreInventoryCertificates{}
	return &this
}

// NewModelsCertificateStoreInventoryCertificatesWithDefaults instantiates a new ModelsCertificateStoreInventoryCertificates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateStoreInventoryCertificatesWithDefaults() *ModelsCertificateStoreInventoryCertificates {
	this := ModelsCertificateStoreInventoryCertificates{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventoryCertificates) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventoryCertificates) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventoryCertificates) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsCertificateStoreInventoryCertificates) SetId(v int32) {
	o.Id = &v
}

// GetIssuedDN returns the IssuedDN field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsCertificateStoreInventoryCertificates) GetIssuedDN() string {
	if o == nil || isNil(o.IssuedDN.Get()) {
		var ret string
		return ret
	}
	return *o.IssuedDN.Get()
}

// GetIssuedDNOk returns a tuple with the IssuedDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsCertificateStoreInventoryCertificates) GetIssuedDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuedDN.Get(), o.IssuedDN.IsSet()
}

// HasIssuedDN returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventoryCertificates) HasIssuedDN() bool {
	if o != nil && o.IssuedDN.IsSet() {
		return true
	}

	return false
}

// SetIssuedDN gets a reference to the given NullableString and assigns it to the IssuedDN field.
func (o *ModelsCertificateStoreInventoryCertificates) SetIssuedDN(v string) {
	o.IssuedDN.Set(&v)
}
// SetIssuedDNNil sets the value for IssuedDN to be an explicit nil
func (o *ModelsCertificateStoreInventoryCertificates) SetIssuedDNNil() {
	o.IssuedDN.Set(nil)
}

// UnsetIssuedDN ensures that no value is present for IssuedDN, not even an explicit nil
func (o *ModelsCertificateStoreInventoryCertificates) UnsetIssuedDN() {
	o.IssuedDN.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventoryCertificates) GetSerialNumber() string {
	if o == nil || isNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventoryCertificates) GetSerialNumberOk() (*string, bool) {
	if o == nil || isNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventoryCertificates) HasSerialNumber() bool {
	if o != nil && !isNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *ModelsCertificateStoreInventoryCertificates) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventoryCertificates) GetNotBefore() time.Time {
	if o == nil || isNil(o.NotBefore) {
		var ret time.Time
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventoryCertificates) GetNotBeforeOk() (*time.Time, bool) {
	if o == nil || isNil(o.NotBefore) {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventoryCertificates) HasNotBefore() bool {
	if o != nil && !isNil(o.NotBefore) {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given time.Time and assigns it to the NotBefore field.
func (o *ModelsCertificateStoreInventoryCertificates) SetNotBefore(v time.Time) {
	o.NotBefore = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventoryCertificates) GetNotAfter() time.Time {
	if o == nil || isNil(o.NotAfter) {
		var ret time.Time
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventoryCertificates) GetNotAfterOk() (*time.Time, bool) {
	if o == nil || isNil(o.NotAfter) {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventoryCertificates) HasNotAfter() bool {
	if o != nil && !isNil(o.NotAfter) {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given time.Time and assigns it to the NotAfter field.
func (o *ModelsCertificateStoreInventoryCertificates) SetNotAfter(v time.Time) {
	o.NotAfter = &v
}

// GetSigningAlgorithm returns the SigningAlgorithm field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventoryCertificates) GetSigningAlgorithm() string {
	if o == nil || isNil(o.SigningAlgorithm) {
		var ret string
		return ret
	}
	return *o.SigningAlgorithm
}

// GetSigningAlgorithmOk returns a tuple with the SigningAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventoryCertificates) GetSigningAlgorithmOk() (*string, bool) {
	if o == nil || isNil(o.SigningAlgorithm) {
		return nil, false
	}
	return o.SigningAlgorithm, true
}

// HasSigningAlgorithm returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventoryCertificates) HasSigningAlgorithm() bool {
	if o != nil && !isNil(o.SigningAlgorithm) {
		return true
	}

	return false
}

// SetSigningAlgorithm gets a reference to the given string and assigns it to the SigningAlgorithm field.
func (o *ModelsCertificateStoreInventoryCertificates) SetSigningAlgorithm(v string) {
	o.SigningAlgorithm = &v
}

// GetIssuerDN returns the IssuerDN field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsCertificateStoreInventoryCertificates) GetIssuerDN() string {
	if o == nil || isNil(o.IssuerDN.Get()) {
		var ret string
		return ret
	}
	return *o.IssuerDN.Get()
}

// GetIssuerDNOk returns a tuple with the IssuerDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsCertificateStoreInventoryCertificates) GetIssuerDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuerDN.Get(), o.IssuerDN.IsSet()
}

// HasIssuerDN returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventoryCertificates) HasIssuerDN() bool {
	if o != nil && o.IssuerDN.IsSet() {
		return true
	}

	return false
}

// SetIssuerDN gets a reference to the given NullableString and assigns it to the IssuerDN field.
func (o *ModelsCertificateStoreInventoryCertificates) SetIssuerDN(v string) {
	o.IssuerDN.Set(&v)
}
// SetIssuerDNNil sets the value for IssuerDN to be an explicit nil
func (o *ModelsCertificateStoreInventoryCertificates) SetIssuerDNNil() {
	o.IssuerDN.Set(nil)
}

// UnsetIssuerDN ensures that no value is present for IssuerDN, not even an explicit nil
func (o *ModelsCertificateStoreInventoryCertificates) UnsetIssuerDN() {
	o.IssuerDN.Unset()
}

// GetThumbprint returns the Thumbprint field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventoryCertificates) GetThumbprint() string {
	if o == nil || isNil(o.Thumbprint) {
		var ret string
		return ret
	}
	return *o.Thumbprint
}

// GetThumbprintOk returns a tuple with the Thumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventoryCertificates) GetThumbprintOk() (*string, bool) {
	if o == nil || isNil(o.Thumbprint) {
		return nil, false
	}
	return o.Thumbprint, true
}

// HasThumbprint returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventoryCertificates) HasThumbprint() bool {
	if o != nil && !isNil(o.Thumbprint) {
		return true
	}

	return false
}

// SetThumbprint gets a reference to the given string and assigns it to the Thumbprint field.
func (o *ModelsCertificateStoreInventoryCertificates) SetThumbprint(v string) {
	o.Thumbprint = &v
}

// GetCertStoreInventoryItemId returns the CertStoreInventoryItemId field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventoryCertificates) GetCertStoreInventoryItemId() int32 {
	if o == nil || isNil(o.CertStoreInventoryItemId) {
		var ret int32
		return ret
	}
	return *o.CertStoreInventoryItemId
}

// GetCertStoreInventoryItemIdOk returns a tuple with the CertStoreInventoryItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventoryCertificates) GetCertStoreInventoryItemIdOk() (*int32, bool) {
	if o == nil || isNil(o.CertStoreInventoryItemId) {
		return nil, false
	}
	return o.CertStoreInventoryItemId, true
}

// HasCertStoreInventoryItemId returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventoryCertificates) HasCertStoreInventoryItemId() bool {
	if o != nil && !isNil(o.CertStoreInventoryItemId) {
		return true
	}

	return false
}

// SetCertStoreInventoryItemId gets a reference to the given int32 and assigns it to the CertStoreInventoryItemId field.
func (o *ModelsCertificateStoreInventoryCertificates) SetCertStoreInventoryItemId(v int32) {
	o.CertStoreInventoryItemId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ModelsCertificateStoreInventoryCertificates) GetMetadata() map[string]map[string]interface{} {
	if o == nil || isNil(o.Metadata) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateStoreInventoryCertificates) GetMetadataOk() (map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.Metadata) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ModelsCertificateStoreInventoryCertificates) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]map[string]interface{} and assigns it to the Metadata field.
func (o *ModelsCertificateStoreInventoryCertificates) SetMetadata(v map[string]map[string]interface{}) {
	o.Metadata = v
}

func (o ModelsCertificateStoreInventoryCertificates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateStoreInventoryCertificates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if o.IssuedDN.IsSet() {
		toSerialize["IssuedDN"] = o.IssuedDN.Get()
	}
	if !isNil(o.SerialNumber) {
		toSerialize["SerialNumber"] = o.SerialNumber
	}
	if !isNil(o.NotBefore) {
		toSerialize["NotBefore"] = o.NotBefore
	}
	if !isNil(o.NotAfter) {
		toSerialize["NotAfter"] = o.NotAfter
	}
	if !isNil(o.SigningAlgorithm) {
		toSerialize["SigningAlgorithm"] = o.SigningAlgorithm
	}
	if o.IssuerDN.IsSet() {
		toSerialize["IssuerDN"] = o.IssuerDN.Get()
	}
	if !isNil(o.Thumbprint) {
		toSerialize["Thumbprint"] = o.Thumbprint
	}
	if !isNil(o.CertStoreInventoryItemId) {
		toSerialize["CertStoreInventoryItemId"] = o.CertStoreInventoryItemId
	}
	if !isNil(o.Metadata) {
		toSerialize["Metadata"] = o.Metadata
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsCertificateStoreInventoryCertificates) UnmarshalJSON(bytes []byte) (err error) {
	varModelsCertificateStoreInventoryCertificates := _ModelsCertificateStoreInventoryCertificates{}

	if err = json.Unmarshal(bytes, &varModelsCertificateStoreInventoryCertificates); err == nil {
		*o = ModelsCertificateStoreInventoryCertificates(varModelsCertificateStoreInventoryCertificates)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Id")
		delete(additionalProperties, "IssuedDN")
		delete(additionalProperties, "SerialNumber")
		delete(additionalProperties, "NotBefore")
		delete(additionalProperties, "NotAfter")
		delete(additionalProperties, "SigningAlgorithm")
		delete(additionalProperties, "IssuerDN")
		delete(additionalProperties, "Thumbprint")
		delete(additionalProperties, "CertStoreInventoryItemId")
		delete(additionalProperties, "Metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsCertificateStoreInventoryCertificates struct {
	value *ModelsCertificateStoreInventoryCertificates
	isSet bool
}

func (v NullableModelsCertificateStoreInventoryCertificates) Get() *ModelsCertificateStoreInventoryCertificates {
	return v.value
}

func (v *NullableModelsCertificateStoreInventoryCertificates) Set(val *ModelsCertificateStoreInventoryCertificates) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateStoreInventoryCertificates) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateStoreInventoryCertificates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateStoreInventoryCertificates(val *ModelsCertificateStoreInventoryCertificates) *NullableModelsCertificateStoreInventoryCertificates {
	return &NullableModelsCertificateStoreInventoryCertificates{value: val, isSet: true}
}

func (v NullableModelsCertificateStoreInventoryCertificates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateStoreInventoryCertificates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


