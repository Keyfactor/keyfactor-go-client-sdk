/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"time"
)

// checks if the ModelsWorkflowCertificateRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsWorkflowCertificateRequestModel{}

// ModelsWorkflowCertificateRequestModel struct for ModelsWorkflowCertificateRequestModel
type ModelsWorkflowCertificateRequestModel struct {
	Id                   *int32            `json:"id,omitempty"`
	CaRequestId          NullableString    `json:"caRequestId,omitempty"`
	CommonName           NullableString    `json:"commonName,omitempty"`
	DistinguishedName    NullableString    `json:"distinguishedName,omitempty"`
	SubmissionDate       NullableTime      `json:"submissionDate,omitempty"`
	CertificateAuthority NullableString    `json:"certificateAuthority,omitempty"`
	Template             NullableString    `json:"template,omitempty"`
	Requester            NullableString    `json:"requester,omitempty"`
	State                *int32            `json:"state,omitempty"`
	StateString          NullableString    `json:"stateString,omitempty"`
	Metadata             map[string]string `json:"metadata,omitempty"`
}

// NewModelsWorkflowCertificateRequestModel instantiates a new ModelsWorkflowCertificateRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsWorkflowCertificateRequestModel() *ModelsWorkflowCertificateRequestModel {
	this := ModelsWorkflowCertificateRequestModel{}
	return &this
}

// NewModelsWorkflowCertificateRequestModelWithDefaults instantiates a new ModelsWorkflowCertificateRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsWorkflowCertificateRequestModelWithDefaults() *ModelsWorkflowCertificateRequestModel {
	this := ModelsWorkflowCertificateRequestModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsWorkflowCertificateRequestModel) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsWorkflowCertificateRequestModel) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsWorkflowCertificateRequestModel) SetId(v int32) {
	o.Id = &v
}

// GetCaRequestId returns the CaRequestId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowCertificateRequestModel) GetCaRequestId() string {
	if o == nil || isNil(o.CaRequestId.Get()) {
		var ret string
		return ret
	}
	return *o.CaRequestId.Get()
}

// GetCaRequestIdOk returns a tuple with the CaRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowCertificateRequestModel) GetCaRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaRequestId.Get(), o.CaRequestId.IsSet()
}

// HasCaRequestId returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasCaRequestId() bool {
	if o != nil && o.CaRequestId.IsSet() {
		return true
	}

	return false
}

// SetCaRequestId gets a reference to the given NullableString and assigns it to the CaRequestId field.
func (o *ModelsWorkflowCertificateRequestModel) SetCaRequestId(v string) {
	o.CaRequestId.Set(&v)
}

// SetCaRequestIdNil sets the value for CaRequestId to be an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) SetCaRequestIdNil() {
	o.CaRequestId.Set(nil)
}

// UnsetCaRequestId ensures that no value is present for CaRequestId, not even an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) UnsetCaRequestId() {
	o.CaRequestId.Unset()
}

// GetCommonName returns the CommonName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowCertificateRequestModel) GetCommonName() string {
	if o == nil || isNil(o.CommonName.Get()) {
		var ret string
		return ret
	}
	return *o.CommonName.Get()
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowCertificateRequestModel) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommonName.Get(), o.CommonName.IsSet()
}

// HasCommonName returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasCommonName() bool {
	if o != nil && o.CommonName.IsSet() {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given NullableString and assigns it to the CommonName field.
func (o *ModelsWorkflowCertificateRequestModel) SetCommonName(v string) {
	o.CommonName.Set(&v)
}

// SetCommonNameNil sets the value for CommonName to be an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) SetCommonNameNil() {
	o.CommonName.Set(nil)
}

// UnsetCommonName ensures that no value is present for CommonName, not even an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) UnsetCommonName() {
	o.CommonName.Unset()
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowCertificateRequestModel) GetDistinguishedName() string {
	if o == nil || isNil(o.DistinguishedName.Get()) {
		var ret string
		return ret
	}
	return *o.DistinguishedName.Get()
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowCertificateRequestModel) GetDistinguishedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistinguishedName.Get(), o.DistinguishedName.IsSet()
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasDistinguishedName() bool {
	if o != nil && o.DistinguishedName.IsSet() {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given NullableString and assigns it to the DistinguishedName field.
func (o *ModelsWorkflowCertificateRequestModel) SetDistinguishedName(v string) {
	o.DistinguishedName.Set(&v)
}

// SetDistinguishedNameNil sets the value for DistinguishedName to be an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) SetDistinguishedNameNil() {
	o.DistinguishedName.Set(nil)
}

// UnsetDistinguishedName ensures that no value is present for DistinguishedName, not even an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) UnsetDistinguishedName() {
	o.DistinguishedName.Unset()
}

// GetSubmissionDate returns the SubmissionDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowCertificateRequestModel) GetSubmissionDate() time.Time {
	if o == nil || isNil(o.SubmissionDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.SubmissionDate.Get()
}

// GetSubmissionDateOk returns a tuple with the SubmissionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowCertificateRequestModel) GetSubmissionDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubmissionDate.Get(), o.SubmissionDate.IsSet()
}

// HasSubmissionDate returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasSubmissionDate() bool {
	if o != nil && o.SubmissionDate.IsSet() {
		return true
	}

	return false
}

// SetSubmissionDate gets a reference to the given NullableTime and assigns it to the SubmissionDate field.
func (o *ModelsWorkflowCertificateRequestModel) SetSubmissionDate(v time.Time) {
	o.SubmissionDate.Set(&v)
}

// SetSubmissionDateNil sets the value for SubmissionDate to be an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) SetSubmissionDateNil() {
	o.SubmissionDate.Set(nil)
}

// UnsetSubmissionDate ensures that no value is present for SubmissionDate, not even an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) UnsetSubmissionDate() {
	o.SubmissionDate.Unset()
}

// GetCertificateAuthority returns the CertificateAuthority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowCertificateRequestModel) GetCertificateAuthority() string {
	if o == nil || isNil(o.CertificateAuthority.Get()) {
		var ret string
		return ret
	}
	return *o.CertificateAuthority.Get()
}

// GetCertificateAuthorityOk returns a tuple with the CertificateAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowCertificateRequestModel) GetCertificateAuthorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateAuthority.Get(), o.CertificateAuthority.IsSet()
}

// HasCertificateAuthority returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasCertificateAuthority() bool {
	if o != nil && o.CertificateAuthority.IsSet() {
		return true
	}

	return false
}

// SetCertificateAuthority gets a reference to the given NullableString and assigns it to the CertificateAuthority field.
func (o *ModelsWorkflowCertificateRequestModel) SetCertificateAuthority(v string) {
	o.CertificateAuthority.Set(&v)
}

// SetCertificateAuthorityNil sets the value for CertificateAuthority to be an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) SetCertificateAuthorityNil() {
	o.CertificateAuthority.Set(nil)
}

// UnsetCertificateAuthority ensures that no value is present for CertificateAuthority, not even an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) UnsetCertificateAuthority() {
	o.CertificateAuthority.Unset()
}

// GetTemplate returns the Template field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowCertificateRequestModel) GetTemplate() string {
	if o == nil || isNil(o.Template.Get()) {
		var ret string
		return ret
	}
	return *o.Template.Get()
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowCertificateRequestModel) GetTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Template.Get(), o.Template.IsSet()
}

// HasTemplate returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasTemplate() bool {
	if o != nil && o.Template.IsSet() {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given NullableString and assigns it to the Template field.
func (o *ModelsWorkflowCertificateRequestModel) SetTemplate(v string) {
	o.Template.Set(&v)
}

// SetTemplateNil sets the value for Template to be an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) SetTemplateNil() {
	o.Template.Set(nil)
}

// UnsetTemplate ensures that no value is present for Template, not even an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) UnsetTemplate() {
	o.Template.Unset()
}

// GetRequester returns the Requester field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowCertificateRequestModel) GetRequester() string {
	if o == nil || isNil(o.Requester.Get()) {
		var ret string
		return ret
	}
	return *o.Requester.Get()
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowCertificateRequestModel) GetRequesterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Requester.Get(), o.Requester.IsSet()
}

// HasRequester returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasRequester() bool {
	if o != nil && o.Requester.IsSet() {
		return true
	}

	return false
}

// SetRequester gets a reference to the given NullableString and assigns it to the Requester field.
func (o *ModelsWorkflowCertificateRequestModel) SetRequester(v string) {
	o.Requester.Set(&v)
}

// SetRequesterNil sets the value for Requester to be an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) SetRequesterNil() {
	o.Requester.Set(nil)
}

// UnsetRequester ensures that no value is present for Requester, not even an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) UnsetRequester() {
	o.Requester.Unset()
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ModelsWorkflowCertificateRequestModel) GetState() int32 {
	if o == nil || isNil(o.State) {
		var ret int32
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsWorkflowCertificateRequestModel) GetStateOk() (*int32, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given int32 and assigns it to the State field.
func (o *ModelsWorkflowCertificateRequestModel) SetState(v int32) {
	o.State = &v
}

// GetStateString returns the StateString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowCertificateRequestModel) GetStateString() string {
	if o == nil || isNil(o.StateString.Get()) {
		var ret string
		return ret
	}
	return *o.StateString.Get()
}

// GetStateStringOk returns a tuple with the StateString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowCertificateRequestModel) GetStateStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateString.Get(), o.StateString.IsSet()
}

// HasStateString returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasStateString() bool {
	if o != nil && o.StateString.IsSet() {
		return true
	}

	return false
}

// SetStateString gets a reference to the given NullableString and assigns it to the StateString field.
func (o *ModelsWorkflowCertificateRequestModel) SetStateString(v string) {
	o.StateString.Set(&v)
}

// SetStateStringNil sets the value for StateString to be an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) SetStateStringNil() {
	o.StateString.Set(nil)
}

// UnsetStateString ensures that no value is present for StateString, not even an explicit nil
func (o *ModelsWorkflowCertificateRequestModel) UnsetStateString() {
	o.StateString.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowCertificateRequestModel) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowCertificateRequestModel) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ModelsWorkflowCertificateRequestModel) HasMetadata() bool {
	if o != nil && isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *ModelsWorkflowCertificateRequestModel) SetMetadata(v map[string]string) {
	o.Metadata = v
}

func (o ModelsWorkflowCertificateRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsWorkflowCertificateRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.CaRequestId.IsSet() {
		toSerialize["caRequestId"] = o.CaRequestId.Get()
	}
	if o.CommonName.IsSet() {
		toSerialize["commonName"] = o.CommonName.Get()
	}
	if o.DistinguishedName.IsSet() {
		toSerialize["distinguishedName"] = o.DistinguishedName.Get()
	}
	if o.SubmissionDate.IsSet() {
		toSerialize["submissionDate"] = o.SubmissionDate.Get()
	}
	if o.CertificateAuthority.IsSet() {
		toSerialize["certificateAuthority"] = o.CertificateAuthority.Get()
	}
	if o.Template.IsSet() {
		toSerialize["template"] = o.Template.Get()
	}
	if o.Requester.IsSet() {
		toSerialize["requester"] = o.Requester.Get()
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.StateString.IsSet() {
		toSerialize["stateString"] = o.StateString.Get()
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableModelsWorkflowCertificateRequestModel struct {
	value *ModelsWorkflowCertificateRequestModel
	isSet bool
}

func (v NullableModelsWorkflowCertificateRequestModel) Get() *ModelsWorkflowCertificateRequestModel {
	return v.value
}

func (v *NullableModelsWorkflowCertificateRequestModel) Set(val *ModelsWorkflowCertificateRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsWorkflowCertificateRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsWorkflowCertificateRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsWorkflowCertificateRequestModel(val *ModelsWorkflowCertificateRequestModel) *NullableModelsWorkflowCertificateRequestModel {
	return &NullableModelsWorkflowCertificateRequestModel{value: val, isSet: true}
}

func (v NullableModelsWorkflowCertificateRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsWorkflowCertificateRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
