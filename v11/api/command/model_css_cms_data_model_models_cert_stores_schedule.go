/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the CSSCMSDataModelModelsCertStoresSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSSCMSDataModelModelsCertStoresSchedule{}

// CSSCMSDataModelModelsCertStoresSchedule struct for CSSCMSDataModelModelsCertStoresSchedule
type CSSCMSDataModelModelsCertStoresSchedule struct {
	StoreIds []string                                    `json:"storeIds"`
	Schedule *KeyfactorCommonSchedulingKeyfactorSchedule `json:"schedule,omitempty"`
}

// NewCSSCMSDataModelModelsCertStoresSchedule instantiates a new CSSCMSDataModelModelsCertStoresSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSSCMSDataModelModelsCertStoresSchedule(storeIds []string) *CSSCMSDataModelModelsCertStoresSchedule {
	this := CSSCMSDataModelModelsCertStoresSchedule{}
	this.StoreIds = storeIds
	return &this
}

// NewCSSCMSDataModelModelsCertStoresScheduleWithDefaults instantiates a new CSSCMSDataModelModelsCertStoresSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSSCMSDataModelModelsCertStoresScheduleWithDefaults() *CSSCMSDataModelModelsCertStoresSchedule {
	this := CSSCMSDataModelModelsCertStoresSchedule{}
	return &this
}

// GetStoreIds returns the StoreIds field value
func (o *CSSCMSDataModelModelsCertStoresSchedule) GetStoreIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.StoreIds
}

// GetStoreIdsOk returns a tuple with the StoreIds field value
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertStoresSchedule) GetStoreIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoreIds, true
}

// SetStoreIds sets field value
func (o *CSSCMSDataModelModelsCertStoresSchedule) SetStoreIds(v []string) {
	o.StoreIds = v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertStoresSchedule) GetSchedule() KeyfactorCommonSchedulingKeyfactorSchedule {
	if o == nil || isNil(o.Schedule) {
		var ret KeyfactorCommonSchedulingKeyfactorSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertStoresSchedule) GetScheduleOk() (*KeyfactorCommonSchedulingKeyfactorSchedule, bool) {
	if o == nil || isNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertStoresSchedule) HasSchedule() bool {
	if o != nil && !isNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given KeyfactorCommonSchedulingKeyfactorSchedule and assigns it to the Schedule field.
func (o *CSSCMSDataModelModelsCertStoresSchedule) SetSchedule(v KeyfactorCommonSchedulingKeyfactorSchedule) {
	o.Schedule = &v
}

func (o CSSCMSDataModelModelsCertStoresSchedule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSSCMSDataModelModelsCertStoresSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storeIds"] = o.StoreIds
	if !isNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	return toSerialize, nil
}

type NullableCSSCMSDataModelModelsCertStoresSchedule struct {
	value *CSSCMSDataModelModelsCertStoresSchedule
	isSet bool
}

func (v NullableCSSCMSDataModelModelsCertStoresSchedule) Get() *CSSCMSDataModelModelsCertStoresSchedule {
	return v.value
}

func (v *NullableCSSCMSDataModelModelsCertStoresSchedule) Set(val *CSSCMSDataModelModelsCertStoresSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelModelsCertStoresSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelModelsCertStoresSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelModelsCertStoresSchedule(val *CSSCMSDataModelModelsCertStoresSchedule) *NullableCSSCMSDataModelModelsCertStoresSchedule {
	return &NullableCSSCMSDataModelModelsCertStoresSchedule{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelModelsCertStoresSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelModelsCertStoresSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
