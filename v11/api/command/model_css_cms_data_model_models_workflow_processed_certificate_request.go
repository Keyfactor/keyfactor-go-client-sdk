/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the CSSCMSDataModelModelsWorkflowProcessedCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSSCMSDataModelModelsWorkflowProcessedCertificateRequest{}

// CSSCMSDataModelModelsWorkflowProcessedCertificateRequest struct for CSSCMSDataModelModelsWorkflowProcessedCertificateRequest
type CSSCMSDataModelModelsWorkflowProcessedCertificateRequest struct {
	CaRowId            NullableInt32  `json:"caRowId,omitempty"`
	CaRequestId        NullableString `json:"caRequestId,omitempty"`
	CaHost             NullableString `json:"caHost,omitempty"`
	CaLogicalName      NullableString `json:"caLogicalName,omitempty"`
	KeyfactorRequestId *int32         `json:"keyfactorRequestId,omitempty"`
	Comment            NullableString `json:"comment,omitempty"`
}

// NewCSSCMSDataModelModelsWorkflowProcessedCertificateRequest instantiates a new CSSCMSDataModelModelsWorkflowProcessedCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSSCMSDataModelModelsWorkflowProcessedCertificateRequest() *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest {
	this := CSSCMSDataModelModelsWorkflowProcessedCertificateRequest{}
	return &this
}

// NewCSSCMSDataModelModelsWorkflowProcessedCertificateRequestWithDefaults instantiates a new CSSCMSDataModelModelsWorkflowProcessedCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSSCMSDataModelModelsWorkflowProcessedCertificateRequestWithDefaults() *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest {
	this := CSSCMSDataModelModelsWorkflowProcessedCertificateRequest{}
	return &this
}

// GetCaRowId returns the CaRowId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetCaRowId() int32 {
	if o == nil || isNil(o.CaRowId.Get()) {
		var ret int32
		return ret
	}
	return *o.CaRowId.Get()
}

// GetCaRowIdOk returns a tuple with the CaRowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetCaRowIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaRowId.Get(), o.CaRowId.IsSet()
}

// HasCaRowId returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) HasCaRowId() bool {
	if o != nil && o.CaRowId.IsSet() {
		return true
	}

	return false
}

// SetCaRowId gets a reference to the given NullableInt32 and assigns it to the CaRowId field.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetCaRowId(v int32) {
	o.CaRowId.Set(&v)
}

// SetCaRowIdNil sets the value for CaRowId to be an explicit nil
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetCaRowIdNil() {
	o.CaRowId.Set(nil)
}

// UnsetCaRowId ensures that no value is present for CaRowId, not even an explicit nil
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) UnsetCaRowId() {
	o.CaRowId.Unset()
}

// GetCaRequestId returns the CaRequestId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetCaRequestId() string {
	if o == nil || isNil(o.CaRequestId.Get()) {
		var ret string
		return ret
	}
	return *o.CaRequestId.Get()
}

// GetCaRequestIdOk returns a tuple with the CaRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetCaRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaRequestId.Get(), o.CaRequestId.IsSet()
}

// HasCaRequestId returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) HasCaRequestId() bool {
	if o != nil && o.CaRequestId.IsSet() {
		return true
	}

	return false
}

// SetCaRequestId gets a reference to the given NullableString and assigns it to the CaRequestId field.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetCaRequestId(v string) {
	o.CaRequestId.Set(&v)
}

// SetCaRequestIdNil sets the value for CaRequestId to be an explicit nil
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetCaRequestIdNil() {
	o.CaRequestId.Set(nil)
}

// UnsetCaRequestId ensures that no value is present for CaRequestId, not even an explicit nil
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) UnsetCaRequestId() {
	o.CaRequestId.Unset()
}

// GetCaHost returns the CaHost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetCaHost() string {
	if o == nil || isNil(o.CaHost.Get()) {
		var ret string
		return ret
	}
	return *o.CaHost.Get()
}

// GetCaHostOk returns a tuple with the CaHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetCaHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaHost.Get(), o.CaHost.IsSet()
}

// HasCaHost returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) HasCaHost() bool {
	if o != nil && o.CaHost.IsSet() {
		return true
	}

	return false
}

// SetCaHost gets a reference to the given NullableString and assigns it to the CaHost field.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetCaHost(v string) {
	o.CaHost.Set(&v)
}

// SetCaHostNil sets the value for CaHost to be an explicit nil
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetCaHostNil() {
	o.CaHost.Set(nil)
}

// UnsetCaHost ensures that no value is present for CaHost, not even an explicit nil
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) UnsetCaHost() {
	o.CaHost.Unset()
}

// GetCaLogicalName returns the CaLogicalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetCaLogicalName() string {
	if o == nil || isNil(o.CaLogicalName.Get()) {
		var ret string
		return ret
	}
	return *o.CaLogicalName.Get()
}

// GetCaLogicalNameOk returns a tuple with the CaLogicalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetCaLogicalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaLogicalName.Get(), o.CaLogicalName.IsSet()
}

// HasCaLogicalName returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) HasCaLogicalName() bool {
	if o != nil && o.CaLogicalName.IsSet() {
		return true
	}

	return false
}

// SetCaLogicalName gets a reference to the given NullableString and assigns it to the CaLogicalName field.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetCaLogicalName(v string) {
	o.CaLogicalName.Set(&v)
}

// SetCaLogicalNameNil sets the value for CaLogicalName to be an explicit nil
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetCaLogicalNameNil() {
	o.CaLogicalName.Set(nil)
}

// UnsetCaLogicalName ensures that no value is present for CaLogicalName, not even an explicit nil
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) UnsetCaLogicalName() {
	o.CaLogicalName.Unset()
}

// GetKeyfactorRequestId returns the KeyfactorRequestId field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetKeyfactorRequestId() int32 {
	if o == nil || isNil(o.KeyfactorRequestId) {
		var ret int32
		return ret
	}
	return *o.KeyfactorRequestId
}

// GetKeyfactorRequestIdOk returns a tuple with the KeyfactorRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetKeyfactorRequestIdOk() (*int32, bool) {
	if o == nil || isNil(o.KeyfactorRequestId) {
		return nil, false
	}
	return o.KeyfactorRequestId, true
}

// HasKeyfactorRequestId returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) HasKeyfactorRequestId() bool {
	if o != nil && !isNil(o.KeyfactorRequestId) {
		return true
	}

	return false
}

// SetKeyfactorRequestId gets a reference to the given int32 and assigns it to the KeyfactorRequestId field.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetKeyfactorRequestId(v int32) {
	o.KeyfactorRequestId = &v
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetComment() string {
	if o == nil || isNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetComment(v string) {
	o.Comment.Set(&v)
}

// SetCommentNil sets the value for Comment to be an explicit nil
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) UnsetComment() {
	o.Comment.Unset()
}

func (o CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CaRowId.IsSet() {
		toSerialize["caRowId"] = o.CaRowId.Get()
	}
	if o.CaRequestId.IsSet() {
		toSerialize["caRequestId"] = o.CaRequestId.Get()
	}
	if o.CaHost.IsSet() {
		toSerialize["caHost"] = o.CaHost.Get()
	}
	if o.CaLogicalName.IsSet() {
		toSerialize["caLogicalName"] = o.CaLogicalName.Get()
	}
	if !isNil(o.KeyfactorRequestId) {
		toSerialize["keyfactorRequestId"] = o.KeyfactorRequestId
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	return toSerialize, nil
}

type NullableCSSCMSDataModelModelsWorkflowProcessedCertificateRequest struct {
	value *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest
	isSet bool
}

func (v NullableCSSCMSDataModelModelsWorkflowProcessedCertificateRequest) Get() *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest {
	return v.value
}

func (v *NullableCSSCMSDataModelModelsWorkflowProcessedCertificateRequest) Set(val *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelModelsWorkflowProcessedCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelModelsWorkflowProcessedCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelModelsWorkflowProcessedCertificateRequest(val *CSSCMSDataModelModelsWorkflowProcessedCertificateRequest) *NullableCSSCMSDataModelModelsWorkflowProcessedCertificateRequest {
	return &NullableCSSCMSDataModelModelsWorkflowProcessedCertificateRequest{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelModelsWorkflowProcessedCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelModelsWorkflowProcessedCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
