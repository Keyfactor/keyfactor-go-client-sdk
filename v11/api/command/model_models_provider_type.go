/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsProviderType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsProviderType{}

// ModelsProviderType struct for ModelsProviderType
type ModelsProviderType struct {
	Id                 *string                   `json:"id,omitempty"`
	Name               NullableString            `json:"name,omitempty"`
	ProviderTypeParams []ModelsProviderTypeParam `json:"providerTypeParams,omitempty"`
}

// NewModelsProviderType instantiates a new ModelsProviderType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsProviderType() *ModelsProviderType {
	this := ModelsProviderType{}
	return &this
}

// NewModelsProviderTypeWithDefaults instantiates a new ModelsProviderType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsProviderTypeWithDefaults() *ModelsProviderType {
	this := ModelsProviderType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsProviderType) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProviderType) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsProviderType) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelsProviderType) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsProviderType) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsProviderType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ModelsProviderType) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ModelsProviderType) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *ModelsProviderType) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ModelsProviderType) UnsetName() {
	o.Name.Unset()
}

// GetProviderTypeParams returns the ProviderTypeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsProviderType) GetProviderTypeParams() []ModelsProviderTypeParam {
	if o == nil {
		var ret []ModelsProviderTypeParam
		return ret
	}
	return o.ProviderTypeParams
}

// GetProviderTypeParamsOk returns a tuple with the ProviderTypeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsProviderType) GetProviderTypeParamsOk() ([]ModelsProviderTypeParam, bool) {
	if o == nil || isNil(o.ProviderTypeParams) {
		return nil, false
	}
	return o.ProviderTypeParams, true
}

// HasProviderTypeParams returns a boolean if a field has been set.
func (o *ModelsProviderType) HasProviderTypeParams() bool {
	if o != nil && isNil(o.ProviderTypeParams) {
		return true
	}

	return false
}

// SetProviderTypeParams gets a reference to the given []ModelsProviderTypeParam and assigns it to the ProviderTypeParams field.
func (o *ModelsProviderType) SetProviderTypeParams(v []ModelsProviderTypeParam) {
	o.ProviderTypeParams = v
}

func (o ModelsProviderType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsProviderType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ProviderTypeParams != nil {
		toSerialize["providerTypeParams"] = o.ProviderTypeParams
	}
	return toSerialize, nil
}

type NullableModelsProviderType struct {
	value *ModelsProviderType
	isSet bool
}

func (v NullableModelsProviderType) Get() *ModelsProviderType {
	return v.value
}

func (v *NullableModelsProviderType) Set(val *ModelsProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsProviderType(val *ModelsProviderType) *NullableModelsProviderType {
	return &NullableModelsProviderType{value: val, isSet: true}
}

func (v NullableModelsProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
