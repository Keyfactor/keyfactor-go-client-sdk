/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"time"
)

// checks if the KeyfactorCommonSchedulingModelsMonthlyModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorCommonSchedulingModelsMonthlyModel{}

// KeyfactorCommonSchedulingModelsMonthlyModel struct for KeyfactorCommonSchedulingModelsMonthlyModel
type KeyfactorCommonSchedulingModelsMonthlyModel struct {
	Time *time.Time `json:"time,omitempty"`
	Day  *int32     `json:"day,omitempty"`
}

// NewKeyfactorCommonSchedulingModelsMonthlyModel instantiates a new KeyfactorCommonSchedulingModelsMonthlyModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorCommonSchedulingModelsMonthlyModel() *KeyfactorCommonSchedulingModelsMonthlyModel {
	this := KeyfactorCommonSchedulingModelsMonthlyModel{}
	return &this
}

// NewKeyfactorCommonSchedulingModelsMonthlyModelWithDefaults instantiates a new KeyfactorCommonSchedulingModelsMonthlyModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorCommonSchedulingModelsMonthlyModelWithDefaults() *KeyfactorCommonSchedulingModelsMonthlyModel {
	this := KeyfactorCommonSchedulingModelsMonthlyModel{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) GetTime() time.Time {
	if o == nil || isNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) GetTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) HasTime() bool {
	if o != nil && !isNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) SetTime(v time.Time) {
	o.Time = &v
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) GetDay() int32 {
	if o == nil || isNil(o.Day) {
		var ret int32
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) GetDayOk() (*int32, bool) {
	if o == nil || isNil(o.Day) {
		return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) HasDay() bool {
	if o != nil && !isNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given int32 and assigns it to the Day field.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) SetDay(v int32) {
	o.Day = &v
}

func (o KeyfactorCommonSchedulingModelsMonthlyModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorCommonSchedulingModelsMonthlyModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !isNil(o.Day) {
		toSerialize["day"] = o.Day
	}
	return toSerialize, nil
}

type NullableKeyfactorCommonSchedulingModelsMonthlyModel struct {
	value *KeyfactorCommonSchedulingModelsMonthlyModel
	isSet bool
}

func (v NullableKeyfactorCommonSchedulingModelsMonthlyModel) Get() *KeyfactorCommonSchedulingModelsMonthlyModel {
	return v.value
}

func (v *NullableKeyfactorCommonSchedulingModelsMonthlyModel) Set(val *KeyfactorCommonSchedulingModelsMonthlyModel) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorCommonSchedulingModelsMonthlyModel) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorCommonSchedulingModelsMonthlyModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorCommonSchedulingModelsMonthlyModel(val *KeyfactorCommonSchedulingModelsMonthlyModel) *NullableKeyfactorCommonSchedulingModelsMonthlyModel {
	return &NullableKeyfactorCommonSchedulingModelsMonthlyModel{value: val, isSet: true}
}

func (v NullableKeyfactorCommonSchedulingModelsMonthlyModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorCommonSchedulingModelsMonthlyModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
