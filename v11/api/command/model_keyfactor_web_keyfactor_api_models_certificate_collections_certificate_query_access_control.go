/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl{}

// KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl struct for KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl
type KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl struct {
	RoleId          *int32  `json:"roleId,omitempty"`
	AreaPermissions []int32 `json:"areaPermissions,omitempty"`
}

// NewKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl instantiates a new KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl() *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl {
	this := KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl{}
	return &this
}

// NewKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControlWithDefaults instantiates a new KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControlWithDefaults() *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl {
	this := KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl{}
	return &this
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) GetRoleId() int32 {
	if o == nil || isNil(o.RoleId) {
		var ret int32
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) GetRoleIdOk() (*int32, bool) {
	if o == nil || isNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) HasRoleId() bool {
	if o != nil && !isNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given int32 and assigns it to the RoleId field.
func (o *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) SetRoleId(v int32) {
	o.RoleId = &v
}

// GetAreaPermissions returns the AreaPermissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) GetAreaPermissions() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.AreaPermissions
}

// GetAreaPermissionsOk returns a tuple with the AreaPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) GetAreaPermissionsOk() ([]int32, bool) {
	if o == nil || isNil(o.AreaPermissions) {
		return nil, false
	}
	return o.AreaPermissions, true
}

// HasAreaPermissions returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) HasAreaPermissions() bool {
	if o != nil && isNil(o.AreaPermissions) {
		return true
	}

	return false
}

// SetAreaPermissions gets a reference to the given []int32 and assigns it to the AreaPermissions field.
func (o *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) SetAreaPermissions(v []int32) {
	o.AreaPermissions = v
}

func (o KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RoleId) {
		toSerialize["roleId"] = o.RoleId
	}
	if o.AreaPermissions != nil {
		toSerialize["areaPermissions"] = o.AreaPermissions
	}
	return toSerialize, nil
}

type NullableKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl struct {
	value *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl
	isSet bool
}

func (v NullableKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) Get() *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl {
	return v.value
}

func (v *NullableKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) Set(val *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl(val *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) *NullableKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl {
	return &NullableKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl{value: val, isSet: true}
}

func (v NullableKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateQueryAccessControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
