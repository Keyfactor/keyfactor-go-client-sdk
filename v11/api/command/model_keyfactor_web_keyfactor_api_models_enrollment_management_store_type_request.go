/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest{}

// KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest struct for KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest
type KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest struct {
	StoreTypeId *int32         `json:"storeTypeId,omitempty"`
	Alias       NullableString `json:"alias,omitempty"`
	Overwrite   *bool          `json:"overwrite,omitempty"`
	Properties  []interface{}  `json:"properties,omitempty"`
}

// NewKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest instantiates a new KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest() *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest {
	this := KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest{}
	return &this
}

// NewKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequestWithDefaults instantiates a new KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequestWithDefaults() *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest {
	this := KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest{}
	return &this
}

// GetStoreTypeId returns the StoreTypeId field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) GetStoreTypeId() int32 {
	if o == nil || isNil(o.StoreTypeId) {
		var ret int32
		return ret
	}
	return *o.StoreTypeId
}

// GetStoreTypeIdOk returns a tuple with the StoreTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) GetStoreTypeIdOk() (*int32, bool) {
	if o == nil || isNil(o.StoreTypeId) {
		return nil, false
	}
	return o.StoreTypeId, true
}

// HasStoreTypeId returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) HasStoreTypeId() bool {
	if o != nil && !isNil(o.StoreTypeId) {
		return true
	}

	return false
}

// SetStoreTypeId gets a reference to the given int32 and assigns it to the StoreTypeId field.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) SetStoreTypeId(v int32) {
	o.StoreTypeId = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) GetAlias() string {
	if o == nil || isNil(o.Alias.Get()) {
		var ret string
		return ret
	}
	return *o.Alias.Get()
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alias.Get(), o.Alias.IsSet()
}

// HasAlias returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) HasAlias() bool {
	if o != nil && o.Alias.IsSet() {
		return true
	}

	return false
}

// SetAlias gets a reference to the given NullableString and assigns it to the Alias field.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) SetAlias(v string) {
	o.Alias.Set(&v)
}

// SetAliasNil sets the value for Alias to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) SetAliasNil() {
	o.Alias.Set(nil)
}

// UnsetAlias ensures that no value is present for Alias, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) UnsetAlias() {
	o.Alias.Unset()
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) GetOverwrite() bool {
	if o == nil || isNil(o.Overwrite) {
		var ret bool
		return ret
	}
	return *o.Overwrite
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) GetOverwriteOk() (*bool, bool) {
	if o == nil || isNil(o.Overwrite) {
		return nil, false
	}
	return o.Overwrite, true
}

// HasOverwrite returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) HasOverwrite() bool {
	if o != nil && !isNil(o.Overwrite) {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given bool and assigns it to the Overwrite field.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) SetOverwrite(v bool) {
	o.Overwrite = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) GetProperties() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) GetPropertiesOk() ([]interface{}, bool) {
	if o == nil || isNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) HasProperties() bool {
	if o != nil && isNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []interface{} and assigns it to the Properties field.
func (o *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) SetProperties(v []interface{}) {
	o.Properties = v
}

func (o KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StoreTypeId) {
		toSerialize["storeTypeId"] = o.StoreTypeId
	}
	if o.Alias.IsSet() {
		toSerialize["alias"] = o.Alias.Get()
	}
	if !isNil(o.Overwrite) {
		toSerialize["overwrite"] = o.Overwrite
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest struct {
	value *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest
	isSet bool
}

func (v NullableKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) Get() *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest {
	return v.value
}

func (v *NullableKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) Set(val *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest(val *KeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) *NullableKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest {
	return &NullableKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest{value: val, isSet: true}
}

func (v NullableKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorWebKeyfactorApiModelsEnrollmentManagementStoreTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
