/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"fmt"
)

// KeyfactorOrchestratorsCommonEnumsSslEndpointStatus the model 'KeyfactorOrchestratorsCommonEnumsSslEndpointStatus'
type KeyfactorOrchestratorsCommonEnumsSslEndpointStatus int32

// List of Keyfactor.Orchestrators.Common.Enums.SslEndpointStatus
const (
	_0  KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 0
	_1  KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 1
	_2  KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 2
	_3  KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 3
	_4  KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 4
	_5  KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 5
	_6  KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 6
	_7  KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 7
	_8  KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 8
	_9  KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 9
	_10 KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 10
	_11 KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 11
	_12 KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 12
	_13 KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 13
	_14 KeyfactorOrchestratorsCommonEnumsSslEndpointStatus = 14
)

// All allowed values of KeyfactorOrchestratorsCommonEnumsSslEndpointStatus enum
var AllowedKeyfactorOrchestratorsCommonEnumsSslEndpointStatusEnumValues = []KeyfactorOrchestratorsCommonEnumsSslEndpointStatus{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11,
	12,
	13,
	14,
}

func (v *KeyfactorOrchestratorsCommonEnumsSslEndpointStatus) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyfactorOrchestratorsCommonEnumsSslEndpointStatus(value)
	for _, existing := range AllowedKeyfactorOrchestratorsCommonEnumsSslEndpointStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyfactorOrchestratorsCommonEnumsSslEndpointStatus", value)
}

// NewKeyfactorOrchestratorsCommonEnumsSslEndpointStatusFromValue returns a pointer to a valid KeyfactorOrchestratorsCommonEnumsSslEndpointStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyfactorOrchestratorsCommonEnumsSslEndpointStatusFromValue(v int32) (*KeyfactorOrchestratorsCommonEnumsSslEndpointStatus, error) {
	ev := KeyfactorOrchestratorsCommonEnumsSslEndpointStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyfactorOrchestratorsCommonEnumsSslEndpointStatus: valid values are %v", v, AllowedKeyfactorOrchestratorsCommonEnumsSslEndpointStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyfactorOrchestratorsCommonEnumsSslEndpointStatus) IsValid() bool {
	for _, existing := range AllowedKeyfactorOrchestratorsCommonEnumsSslEndpointStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Keyfactor.Orchestrators.Common.Enums.SslEndpointStatus value
func (v KeyfactorOrchestratorsCommonEnumsSslEndpointStatus) Ptr() *KeyfactorOrchestratorsCommonEnumsSslEndpointStatus {
	return &v
}

type NullableKeyfactorOrchestratorsCommonEnumsSslEndpointStatus struct {
	value *KeyfactorOrchestratorsCommonEnumsSslEndpointStatus
	isSet bool
}

func (v NullableKeyfactorOrchestratorsCommonEnumsSslEndpointStatus) Get() *KeyfactorOrchestratorsCommonEnumsSslEndpointStatus {
	return v.value
}

func (v *NullableKeyfactorOrchestratorsCommonEnumsSslEndpointStatus) Set(val *KeyfactorOrchestratorsCommonEnumsSslEndpointStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorOrchestratorsCommonEnumsSslEndpointStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorOrchestratorsCommonEnumsSslEndpointStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorOrchestratorsCommonEnumsSslEndpointStatus(val *KeyfactorOrchestratorsCommonEnumsSslEndpointStatus) *NullableKeyfactorOrchestratorsCommonEnumsSslEndpointStatus {
	return &NullableKeyfactorOrchestratorsCommonEnumsSslEndpointStatus{value: val, isSet: true}
}

func (v NullableKeyfactorOrchestratorsCommonEnumsSslEndpointStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorOrchestratorsCommonEnumsSslEndpointStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
