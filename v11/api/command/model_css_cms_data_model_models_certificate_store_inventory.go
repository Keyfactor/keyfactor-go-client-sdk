/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the CSSCMSDataModelModelsCertificateStoreInventory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSSCMSDataModelModelsCertificateStoreInventory{}

// CSSCMSDataModelModelsCertificateStoreInventory struct for CSSCMSDataModelModelsCertificateStoreInventory
type CSSCMSDataModelModelsCertificateStoreInventory struct {
	Name                     NullableString                                               `json:"name,omitempty"`
	Certificates             []CSSCMSDataModelModelsCertificateStoreInventoryCertificates `json:"certificates,omitempty"`
	CertStoreInventoryItemId *int32                                                       `json:"certStoreInventoryItemId,omitempty"`
	Parameters               map[string]interface{}                                       `json:"parameters,omitempty"`
}

// NewCSSCMSDataModelModelsCertificateStoreInventory instantiates a new CSSCMSDataModelModelsCertificateStoreInventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSSCMSDataModelModelsCertificateStoreInventory() *CSSCMSDataModelModelsCertificateStoreInventory {
	this := CSSCMSDataModelModelsCertificateStoreInventory{}
	return &this
}

// NewCSSCMSDataModelModelsCertificateStoreInventoryWithDefaults instantiates a new CSSCMSDataModelModelsCertificateStoreInventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSSCMSDataModelModelsCertificateStoreInventoryWithDefaults() *CSSCMSDataModelModelsCertificateStoreInventory {
	this := CSSCMSDataModelModelsCertificateStoreInventory{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsCertificateStoreInventory) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsCertificateStoreInventory) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreInventory) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CSSCMSDataModelModelsCertificateStoreInventory) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *CSSCMSDataModelModelsCertificateStoreInventory) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CSSCMSDataModelModelsCertificateStoreInventory) UnsetName() {
	o.Name.Unset()
}

// GetCertificates returns the Certificates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsCertificateStoreInventory) GetCertificates() []CSSCMSDataModelModelsCertificateStoreInventoryCertificates {
	if o == nil {
		var ret []CSSCMSDataModelModelsCertificateStoreInventoryCertificates
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsCertificateStoreInventory) GetCertificatesOk() ([]CSSCMSDataModelModelsCertificateStoreInventoryCertificates, bool) {
	if o == nil || isNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreInventory) HasCertificates() bool {
	if o != nil && isNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []CSSCMSDataModelModelsCertificateStoreInventoryCertificates and assigns it to the Certificates field.
func (o *CSSCMSDataModelModelsCertificateStoreInventory) SetCertificates(v []CSSCMSDataModelModelsCertificateStoreInventoryCertificates) {
	o.Certificates = v
}

// GetCertStoreInventoryItemId returns the CertStoreInventoryItemId field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertificateStoreInventory) GetCertStoreInventoryItemId() int32 {
	if o == nil || isNil(o.CertStoreInventoryItemId) {
		var ret int32
		return ret
	}
	return *o.CertStoreInventoryItemId
}

// GetCertStoreInventoryItemIdOk returns a tuple with the CertStoreInventoryItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertificateStoreInventory) GetCertStoreInventoryItemIdOk() (*int32, bool) {
	if o == nil || isNil(o.CertStoreInventoryItemId) {
		return nil, false
	}
	return o.CertStoreInventoryItemId, true
}

// HasCertStoreInventoryItemId returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreInventory) HasCertStoreInventoryItemId() bool {
	if o != nil && !isNil(o.CertStoreInventoryItemId) {
		return true
	}

	return false
}

// SetCertStoreInventoryItemId gets a reference to the given int32 and assigns it to the CertStoreInventoryItemId field.
func (o *CSSCMSDataModelModelsCertificateStoreInventory) SetCertStoreInventoryItemId(v int32) {
	o.CertStoreInventoryItemId = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsCertificateStoreInventory) GetParameters() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsCertificateStoreInventory) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreInventory) HasParameters() bool {
	if o != nil && isNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *CSSCMSDataModelModelsCertificateStoreInventory) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

func (o CSSCMSDataModelModelsCertificateStoreInventory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSSCMSDataModelModelsCertificateStoreInventory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Certificates != nil {
		toSerialize["certificates"] = o.Certificates
	}
	if !isNil(o.CertStoreInventoryItemId) {
		toSerialize["certStoreInventoryItemId"] = o.CertStoreInventoryItemId
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableCSSCMSDataModelModelsCertificateStoreInventory struct {
	value *CSSCMSDataModelModelsCertificateStoreInventory
	isSet bool
}

func (v NullableCSSCMSDataModelModelsCertificateStoreInventory) Get() *CSSCMSDataModelModelsCertificateStoreInventory {
	return v.value
}

func (v *NullableCSSCMSDataModelModelsCertificateStoreInventory) Set(val *CSSCMSDataModelModelsCertificateStoreInventory) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelModelsCertificateStoreInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelModelsCertificateStoreInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelModelsCertificateStoreInventory(val *CSSCMSDataModelModelsCertificateStoreInventory) *NullableCSSCMSDataModelModelsCertificateStoreInventory {
	return &NullableCSSCMSDataModelModelsCertificateStoreInventory{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelModelsCertificateStoreInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelModelsCertificateStoreInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
