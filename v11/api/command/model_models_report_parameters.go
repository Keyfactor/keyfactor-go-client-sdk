/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsReportParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsReportParameters{}

// ModelsReportParameters struct for ModelsReportParameters
type ModelsReportParameters struct {
	Id                  *int32         `json:"id,omitempty"`
	ParameterName       NullableString `json:"parameterName,omitempty"`
	ParameterType       *int32         `json:"parameterType,omitempty"`
	DisplayName         NullableString `json:"displayName,omitempty"`
	Description         NullableString `json:"description,omitempty"`
	DefaultValue        NullableString `json:"defaultValue,omitempty"`
	DisplayOrder        *int32         `json:"displayOrder,omitempty"`
	ParameterVisibility *int32         `json:"parameterVisibility,omitempty"`
}

// NewModelsReportParameters instantiates a new ModelsReportParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsReportParameters() *ModelsReportParameters {
	this := ModelsReportParameters{}
	return &this
}

// NewModelsReportParametersWithDefaults instantiates a new ModelsReportParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsReportParametersWithDefaults() *ModelsReportParameters {
	this := ModelsReportParameters{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsReportParameters) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReportParameters) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsReportParameters) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsReportParameters) SetId(v int32) {
	o.Id = &v
}

// GetParameterName returns the ParameterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReportParameters) GetParameterName() string {
	if o == nil || isNil(o.ParameterName.Get()) {
		var ret string
		return ret
	}
	return *o.ParameterName.Get()
}

// GetParameterNameOk returns a tuple with the ParameterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReportParameters) GetParameterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParameterName.Get(), o.ParameterName.IsSet()
}

// HasParameterName returns a boolean if a field has been set.
func (o *ModelsReportParameters) HasParameterName() bool {
	if o != nil && o.ParameterName.IsSet() {
		return true
	}

	return false
}

// SetParameterName gets a reference to the given NullableString and assigns it to the ParameterName field.
func (o *ModelsReportParameters) SetParameterName(v string) {
	o.ParameterName.Set(&v)
}

// SetParameterNameNil sets the value for ParameterName to be an explicit nil
func (o *ModelsReportParameters) SetParameterNameNil() {
	o.ParameterName.Set(nil)
}

// UnsetParameterName ensures that no value is present for ParameterName, not even an explicit nil
func (o *ModelsReportParameters) UnsetParameterName() {
	o.ParameterName.Unset()
}

// GetParameterType returns the ParameterType field value if set, zero value otherwise.
func (o *ModelsReportParameters) GetParameterType() int32 {
	if o == nil || isNil(o.ParameterType) {
		var ret int32
		return ret
	}
	return *o.ParameterType
}

// GetParameterTypeOk returns a tuple with the ParameterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReportParameters) GetParameterTypeOk() (*int32, bool) {
	if o == nil || isNil(o.ParameterType) {
		return nil, false
	}
	return o.ParameterType, true
}

// HasParameterType returns a boolean if a field has been set.
func (o *ModelsReportParameters) HasParameterType() bool {
	if o != nil && !isNil(o.ParameterType) {
		return true
	}

	return false
}

// SetParameterType gets a reference to the given int32 and assigns it to the ParameterType field.
func (o *ModelsReportParameters) SetParameterType(v int32) {
	o.ParameterType = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReportParameters) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReportParameters) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ModelsReportParameters) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *ModelsReportParameters) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}

// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *ModelsReportParameters) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *ModelsReportParameters) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReportParameters) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReportParameters) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelsReportParameters) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ModelsReportParameters) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ModelsReportParameters) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ModelsReportParameters) UnsetDescription() {
	o.Description.Unset()
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReportParameters) GetDefaultValue() string {
	if o == nil || isNil(o.DefaultValue.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReportParameters) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ModelsReportParameters) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *ModelsReportParameters) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}

// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *ModelsReportParameters) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *ModelsReportParameters) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *ModelsReportParameters) GetDisplayOrder() int32 {
	if o == nil || isNil(o.DisplayOrder) {
		var ret int32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReportParameters) GetDisplayOrderOk() (*int32, bool) {
	if o == nil || isNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *ModelsReportParameters) HasDisplayOrder() bool {
	if o != nil && !isNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int32 and assigns it to the DisplayOrder field.
func (o *ModelsReportParameters) SetDisplayOrder(v int32) {
	o.DisplayOrder = &v
}

// GetParameterVisibility returns the ParameterVisibility field value if set, zero value otherwise.
func (o *ModelsReportParameters) GetParameterVisibility() int32 {
	if o == nil || isNil(o.ParameterVisibility) {
		var ret int32
		return ret
	}
	return *o.ParameterVisibility
}

// GetParameterVisibilityOk returns a tuple with the ParameterVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReportParameters) GetParameterVisibilityOk() (*int32, bool) {
	if o == nil || isNil(o.ParameterVisibility) {
		return nil, false
	}
	return o.ParameterVisibility, true
}

// HasParameterVisibility returns a boolean if a field has been set.
func (o *ModelsReportParameters) HasParameterVisibility() bool {
	if o != nil && !isNil(o.ParameterVisibility) {
		return true
	}

	return false
}

// SetParameterVisibility gets a reference to the given int32 and assigns it to the ParameterVisibility field.
func (o *ModelsReportParameters) SetParameterVisibility(v int32) {
	o.ParameterVisibility = &v
}

func (o ModelsReportParameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsReportParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ParameterName.IsSet() {
		toSerialize["parameterName"] = o.ParameterName.Get()
	}
	if !isNil(o.ParameterType) {
		toSerialize["parameterType"] = o.ParameterType
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if !isNil(o.DisplayOrder) {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if !isNil(o.ParameterVisibility) {
		toSerialize["parameterVisibility"] = o.ParameterVisibility
	}
	return toSerialize, nil
}

type NullableModelsReportParameters struct {
	value *ModelsReportParameters
	isSet bool
}

func (v NullableModelsReportParameters) Get() *ModelsReportParameters {
	return v.value
}

func (v *NullableModelsReportParameters) Set(val *ModelsReportParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsReportParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsReportParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsReportParameters(val *ModelsReportParameters) *NullableModelsReportParameters {
	return &NullableModelsReportParameters{value: val, isSet: true}
}

func (v NullableModelsReportParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsReportParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
