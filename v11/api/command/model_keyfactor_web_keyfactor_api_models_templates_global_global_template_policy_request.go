/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest{}

// KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest struct for KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest
type KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest struct {
	// The ID of the global template policy.
	Id *int32 `json:"id,omitempty"`
	// Whether or not keys can be reused.
	AllowKeyReuse bool `json:"allowKeyReuse"`
	// Whether or not wildcards can be used.
	AllowWildcards bool `json:"allowWildcards"`
	// Whether or not RFC 2818 compliance should be enforced.
	RfcEnforcement bool                                            `json:"rfcEnforcement"`
	KeyInfo        CSSCMSDataModelModelsTemplatesAlgorithmsKeyInfo `json:"keyInfo"`
}

// NewKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest instantiates a new KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest(allowKeyReuse bool, allowWildcards bool, rfcEnforcement bool, keyInfo CSSCMSDataModelModelsTemplatesAlgorithmsKeyInfo) *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest {
	this := KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest{}
	this.AllowKeyReuse = allowKeyReuse
	this.AllowWildcards = allowWildcards
	this.RfcEnforcement = rfcEnforcement
	this.KeyInfo = keyInfo
	return &this
}

// NewKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequestWithDefaults instantiates a new KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequestWithDefaults() *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest {
	this := KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) SetId(v int32) {
	o.Id = &v
}

// GetAllowKeyReuse returns the AllowKeyReuse field value
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) GetAllowKeyReuse() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowKeyReuse
}

// GetAllowKeyReuseOk returns a tuple with the AllowKeyReuse field value
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) GetAllowKeyReuseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowKeyReuse, true
}

// SetAllowKeyReuse sets field value
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) SetAllowKeyReuse(v bool) {
	o.AllowKeyReuse = v
}

// GetAllowWildcards returns the AllowWildcards field value
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) GetAllowWildcards() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowWildcards
}

// GetAllowWildcardsOk returns a tuple with the AllowWildcards field value
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) GetAllowWildcardsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowWildcards, true
}

// SetAllowWildcards sets field value
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) SetAllowWildcards(v bool) {
	o.AllowWildcards = v
}

// GetRfcEnforcement returns the RfcEnforcement field value
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) GetRfcEnforcement() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RfcEnforcement
}

// GetRfcEnforcementOk returns a tuple with the RfcEnforcement field value
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) GetRfcEnforcementOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RfcEnforcement, true
}

// SetRfcEnforcement sets field value
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) SetRfcEnforcement(v bool) {
	o.RfcEnforcement = v
}

// GetKeyInfo returns the KeyInfo field value
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) GetKeyInfo() CSSCMSDataModelModelsTemplatesAlgorithmsKeyInfo {
	if o == nil {
		var ret CSSCMSDataModelModelsTemplatesAlgorithmsKeyInfo
		return ret
	}

	return o.KeyInfo
}

// GetKeyInfoOk returns a tuple with the KeyInfo field value
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) GetKeyInfoOk() (*CSSCMSDataModelModelsTemplatesAlgorithmsKeyInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyInfo, true
}

// SetKeyInfo sets field value
func (o *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) SetKeyInfo(v CSSCMSDataModelModelsTemplatesAlgorithmsKeyInfo) {
	o.KeyInfo = v
}

func (o KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["allowKeyReuse"] = o.AllowKeyReuse
	toSerialize["allowWildcards"] = o.AllowWildcards
	toSerialize["rfcEnforcement"] = o.RfcEnforcement
	toSerialize["keyInfo"] = o.KeyInfo
	return toSerialize, nil
}

type NullableKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest struct {
	value *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest
	isSet bool
}

func (v NullableKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) Get() *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest {
	return v.value
}

func (v *NullableKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) Set(val *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest(val *KeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) *NullableKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest {
	return &NullableKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest{value: val, isSet: true}
}

func (v NullableKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorWebKeyfactorApiModelsTemplatesGlobalGlobalTemplatePolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
