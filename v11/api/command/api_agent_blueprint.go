/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// AgentBlueprintApiService AgentBlueprintApi service
type AgentBlueprintApiService service

type ApiAgentBluePrintApplyBlueprintPostRequest struct {
	ctx                     context.Context
	ApiService              *AgentBlueprintApiService
	xKeyfactorRequestedWith *string
	templateId              *string
	xKeyfactorApiVersion    *string
	requestBody             *[]string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBluePrintApplyBlueprintPostRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBluePrintApplyBlueprintPostRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Agent blueprint to apply to the agents
func (r ApiAgentBluePrintApplyBlueprintPostRequest) TemplateId(templateId string) ApiAgentBluePrintApplyBlueprintPostRequest {
	r.templateId = &templateId
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBluePrintApplyBlueprintPostRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBluePrintApplyBlueprintPostRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Agents to apply the blueprints to
func (r ApiAgentBluePrintApplyBlueprintPostRequest) RequestBody(requestBody []string) ApiAgentBluePrintApplyBlueprintPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiAgentBluePrintApplyBlueprintPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AgentBluePrintApplyBlueprintPostExecute(r)
}

/*
AgentBluePrintApplyBlueprintPost Applies the selected agent blueprint to the provided agents

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAgentBluePrintApplyBlueprintPostRequest
*/
func (a *AgentBlueprintApiService) AgentBluePrintApplyBlueprintPost(ctx context.Context) ApiAgentBluePrintApplyBlueprintPostRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiAgentBluePrintApplyBlueprintPostRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
func (a *AgentBlueprintApiService) AgentBluePrintApplyBlueprintPostExecute(r ApiAgentBluePrintApplyBlueprintPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/AgentBluePrint/ApplyBlueprint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.templateId != nil {
		parameterAddToQuery(localVarQueryParams, "templateId", r.templateId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgentBluePrintGenerateBluePrintPostRequest struct {
	ctx                     context.Context
	ApiService              *AgentBlueprintApiService
	xKeyfactorRequestedWith *string
	agentId                 *string
	name                    *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBluePrintGenerateBluePrintPostRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBluePrintGenerateBluePrintPostRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Agent to generate a blueprint from
func (r ApiAgentBluePrintGenerateBluePrintPostRequest) AgentId(agentId string) ApiAgentBluePrintGenerateBluePrintPostRequest {
	r.agentId = &agentId
	return r
}

// Name of the new agent blueprint
func (r ApiAgentBluePrintGenerateBluePrintPostRequest) Name(name string) ApiAgentBluePrintGenerateBluePrintPostRequest {
	r.name = &name
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBluePrintGenerateBluePrintPostRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBluePrintGenerateBluePrintPostRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentBluePrintGenerateBluePrintPostRequest) Execute() (*KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	return r.ApiService.AgentBluePrintGenerateBluePrintPostExecute(r)
}

/*
AgentBluePrintGenerateBluePrintPost Generates an agent blueprint from the provided agents

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAgentBluePrintGenerateBluePrintPostRequest
*/
func (a *AgentBlueprintApiService) AgentBluePrintGenerateBluePrintPost(ctx context.Context) ApiAgentBluePrintGenerateBluePrintPostRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiAgentBluePrintGenerateBluePrintPostRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse
func (a *AgentBlueprintApiService) AgentBluePrintGenerateBluePrintPostExecute(r ApiAgentBluePrintGenerateBluePrintPostRequest) (*KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/AgentBluePrint/GenerateBluePrint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.agentId != nil {
		parameterAddToQuery(localVarQueryParams, "agentId", r.agentId, "")
	}
	if r.name != nil {
		parameterAddToQuery(localVarQueryParams, "name", r.name, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentBluePrintGetRequest struct {
	ctx                     context.Context
	ApiService              *AgentBlueprintApiService
	xKeyfactorRequestedWith *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBluePrintGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBluePrintGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiAgentBluePrintGetRequest) PageReturned(pageReturned int32) ApiAgentBluePrintGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiAgentBluePrintGetRequest) ReturnLimit(returnLimit int32) ApiAgentBluePrintGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiAgentBluePrintGetRequest) SortField(sortField string) ApiAgentBluePrintGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiAgentBluePrintGetRequest) SortAscending(sortAscending int32) ApiAgentBluePrintGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBluePrintGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBluePrintGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentBluePrintGetRequest) Execute() ([]KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	return r.ApiService.AgentBluePrintGetExecute(r)
}

/*
AgentBluePrintGet Returns all agent blueprints according to the provided filter and output parameters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAgentBluePrintGetRequest
*/
func (a *AgentBlueprintApiService) AgentBluePrintGet(ctx context.Context) ApiAgentBluePrintGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiAgentBluePrintGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return []KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse
func (a *AgentBlueprintApiService) AgentBluePrintGetExecute(r ApiAgentBluePrintGetRequest) ([]KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/AgentBluePrint"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentBluePrintIdDeleteRequest struct {
	ctx                     context.Context
	ApiService              *AgentBlueprintApiService
	id                      string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBluePrintIdDeleteRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBluePrintIdDeleteRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBluePrintIdDeleteRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBluePrintIdDeleteRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentBluePrintIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AgentBluePrintIdDeleteExecute(r)
}

/*
AgentBluePrintIdDelete Deletes an agent blueprint by its Keyfactor identifier

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Keyfactor agent blueprint identifier (GUID)
	@return ApiAgentBluePrintIdDeleteRequest
*/
func (a *AgentBlueprintApiService) AgentBluePrintIdDelete(ctx context.Context, id string) ApiAgentBluePrintIdDeleteRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiAgentBluePrintIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		id:                      id,
	}
}

// Execute executes the request
func (a *AgentBlueprintApiService) AgentBluePrintIdDeleteExecute(r ApiAgentBluePrintIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/AgentBluePrint/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgentBluePrintIdGetRequest struct {
	ctx                     context.Context
	ApiService              *AgentBlueprintApiService
	id2                     string
	xKeyfactorRequestedWith *string
	id                      *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBluePrintIdGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBluePrintIdGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Returns a single agent blueprint associated with the provided id
func (r ApiAgentBluePrintIdGetRequest) Id(id string) ApiAgentBluePrintIdGetRequest {
	r.id = &id
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBluePrintIdGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBluePrintIdGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentBluePrintIdGetRequest) Execute() (*KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	return r.ApiService.AgentBluePrintIdGetExecute(r)
}

/*
AgentBluePrintIdGet Returns an agent blueprint according to the provided filter and output parameters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id2
	@return ApiAgentBluePrintIdGetRequest
*/
func (a *AgentBlueprintApiService) AgentBluePrintIdGet(ctx context.Context, id2 string) ApiAgentBluePrintIdGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiAgentBluePrintIdGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		id2:                     id2,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse
func (a *AgentBlueprintApiService) AgentBluePrintIdGetExecute(r ApiAgentBluePrintIdGetRequest) (*KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/AgentBluePrint/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id2, "id2")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.id != nil {
		parameterAddToQuery(localVarQueryParams, "id", r.id, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentBluePrintIdJobsGetRequest struct {
	ctx                     context.Context
	ApiService              *AgentBlueprintApiService
	id                      string
	xKeyfactorRequestedWith *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBluePrintIdJobsGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBluePrintIdJobsGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiAgentBluePrintIdJobsGetRequest) PageReturned(pageReturned int32) ApiAgentBluePrintIdJobsGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiAgentBluePrintIdJobsGetRequest) ReturnLimit(returnLimit int32) ApiAgentBluePrintIdJobsGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiAgentBluePrintIdJobsGetRequest) SortField(sortField string) ApiAgentBluePrintIdJobsGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiAgentBluePrintIdJobsGetRequest) SortAscending(sortAscending int32) ApiAgentBluePrintIdJobsGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBluePrintIdJobsGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBluePrintIdJobsGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentBluePrintIdJobsGetRequest) Execute() ([]KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse, *http.Response, error) {
	return r.ApiService.AgentBluePrintIdJobsGetExecute(r)
}

/*
AgentBluePrintIdJobsGet Gets the agent blueprint scheduled jobs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAgentBluePrintIdJobsGetRequest
*/
func (a *AgentBlueprintApiService) AgentBluePrintIdJobsGet(ctx context.Context, id string) ApiAgentBluePrintIdJobsGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiAgentBluePrintIdJobsGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		id:                      id,
	}
}

// Execute executes the request
//
//	@return []KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse
func (a *AgentBlueprintApiService) AgentBluePrintIdJobsGetExecute(r ApiAgentBluePrintIdJobsGetRequest) ([]KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintJobsResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/AgentBluePrint/{id}/Jobs"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentBluePrintIdStoresGetRequest struct {
	ctx                     context.Context
	ApiService              *AgentBlueprintApiService
	id                      string
	xKeyfactorRequestedWith *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiAgentBluePrintIdStoresGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiAgentBluePrintIdStoresGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiAgentBluePrintIdStoresGetRequest) PageReturned(pageReturned int32) ApiAgentBluePrintIdStoresGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiAgentBluePrintIdStoresGetRequest) ReturnLimit(returnLimit int32) ApiAgentBluePrintIdStoresGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiAgentBluePrintIdStoresGetRequest) SortField(sortField string) ApiAgentBluePrintIdStoresGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiAgentBluePrintIdStoresGetRequest) SortAscending(sortAscending int32) ApiAgentBluePrintIdStoresGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiAgentBluePrintIdStoresGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiAgentBluePrintIdStoresGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiAgentBluePrintIdStoresGetRequest) Execute() ([]KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse, *http.Response, error) {
	return r.ApiService.AgentBluePrintIdStoresGetExecute(r)
}

/*
AgentBluePrintIdStoresGet Gets the agent blueprint certificate stores

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAgentBluePrintIdStoresGetRequest
*/
func (a *AgentBlueprintApiService) AgentBluePrintIdStoresGet(ctx context.Context, id string) ApiAgentBluePrintIdStoresGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiAgentBluePrintIdStoresGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		id:                      id,
	}
}

// Execute executes the request
//
//	@return []KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse
func (a *AgentBlueprintApiService) AgentBluePrintIdStoresGetExecute(r ApiAgentBluePrintIdStoresGetRequest) ([]KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KeyfactorWebKeyfactorApiModelsOrchestratorsAgentBlueprintStoresResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/AgentBluePrint/{id}/Stores"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
