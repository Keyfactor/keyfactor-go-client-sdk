/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the CSSCMSDataModelModelsInvalidKeystore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSSCMSDataModelModelsInvalidKeystore{}

// CSSCMSDataModelModelsInvalidKeystore struct for CSSCMSDataModelModelsInvalidKeystore
type CSSCMSDataModelModelsInvalidKeystore struct {
	KeystoreId    *string                          `json:"keystoreId,omitempty"`
	ClientMachine NullableString                   `json:"clientMachine,omitempty"`
	StorePath     NullableString                   `json:"storePath,omitempty"`
	Alias         NullableString                   `json:"alias,omitempty"`
	Reason        *CSSCMSDataModelEnumsFailureType `json:"reason,omitempty"`
	Explanation   NullableString                   `json:"explanation,omitempty"`
}

// NewCSSCMSDataModelModelsInvalidKeystore instantiates a new CSSCMSDataModelModelsInvalidKeystore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSSCMSDataModelModelsInvalidKeystore() *CSSCMSDataModelModelsInvalidKeystore {
	this := CSSCMSDataModelModelsInvalidKeystore{}
	return &this
}

// NewCSSCMSDataModelModelsInvalidKeystoreWithDefaults instantiates a new CSSCMSDataModelModelsInvalidKeystore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSSCMSDataModelModelsInvalidKeystoreWithDefaults() *CSSCMSDataModelModelsInvalidKeystore {
	this := CSSCMSDataModelModelsInvalidKeystore{}
	return &this
}

// GetKeystoreId returns the KeystoreId field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsInvalidKeystore) GetKeystoreId() string {
	if o == nil || isNil(o.KeystoreId) {
		var ret string
		return ret
	}
	return *o.KeystoreId
}

// GetKeystoreIdOk returns a tuple with the KeystoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsInvalidKeystore) GetKeystoreIdOk() (*string, bool) {
	if o == nil || isNil(o.KeystoreId) {
		return nil, false
	}
	return o.KeystoreId, true
}

// HasKeystoreId returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsInvalidKeystore) HasKeystoreId() bool {
	if o != nil && !isNil(o.KeystoreId) {
		return true
	}

	return false
}

// SetKeystoreId gets a reference to the given string and assigns it to the KeystoreId field.
func (o *CSSCMSDataModelModelsInvalidKeystore) SetKeystoreId(v string) {
	o.KeystoreId = &v
}

// GetClientMachine returns the ClientMachine field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsInvalidKeystore) GetClientMachine() string {
	if o == nil || isNil(o.ClientMachine.Get()) {
		var ret string
		return ret
	}
	return *o.ClientMachine.Get()
}

// GetClientMachineOk returns a tuple with the ClientMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsInvalidKeystore) GetClientMachineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientMachine.Get(), o.ClientMachine.IsSet()
}

// HasClientMachine returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsInvalidKeystore) HasClientMachine() bool {
	if o != nil && o.ClientMachine.IsSet() {
		return true
	}

	return false
}

// SetClientMachine gets a reference to the given NullableString and assigns it to the ClientMachine field.
func (o *CSSCMSDataModelModelsInvalidKeystore) SetClientMachine(v string) {
	o.ClientMachine.Set(&v)
}

// SetClientMachineNil sets the value for ClientMachine to be an explicit nil
func (o *CSSCMSDataModelModelsInvalidKeystore) SetClientMachineNil() {
	o.ClientMachine.Set(nil)
}

// UnsetClientMachine ensures that no value is present for ClientMachine, not even an explicit nil
func (o *CSSCMSDataModelModelsInvalidKeystore) UnsetClientMachine() {
	o.ClientMachine.Unset()
}

// GetStorePath returns the StorePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsInvalidKeystore) GetStorePath() string {
	if o == nil || isNil(o.StorePath.Get()) {
		var ret string
		return ret
	}
	return *o.StorePath.Get()
}

// GetStorePathOk returns a tuple with the StorePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsInvalidKeystore) GetStorePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorePath.Get(), o.StorePath.IsSet()
}

// HasStorePath returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsInvalidKeystore) HasStorePath() bool {
	if o != nil && o.StorePath.IsSet() {
		return true
	}

	return false
}

// SetStorePath gets a reference to the given NullableString and assigns it to the StorePath field.
func (o *CSSCMSDataModelModelsInvalidKeystore) SetStorePath(v string) {
	o.StorePath.Set(&v)
}

// SetStorePathNil sets the value for StorePath to be an explicit nil
func (o *CSSCMSDataModelModelsInvalidKeystore) SetStorePathNil() {
	o.StorePath.Set(nil)
}

// UnsetStorePath ensures that no value is present for StorePath, not even an explicit nil
func (o *CSSCMSDataModelModelsInvalidKeystore) UnsetStorePath() {
	o.StorePath.Unset()
}

// GetAlias returns the Alias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsInvalidKeystore) GetAlias() string {
	if o == nil || isNil(o.Alias.Get()) {
		var ret string
		return ret
	}
	return *o.Alias.Get()
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsInvalidKeystore) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alias.Get(), o.Alias.IsSet()
}

// HasAlias returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsInvalidKeystore) HasAlias() bool {
	if o != nil && o.Alias.IsSet() {
		return true
	}

	return false
}

// SetAlias gets a reference to the given NullableString and assigns it to the Alias field.
func (o *CSSCMSDataModelModelsInvalidKeystore) SetAlias(v string) {
	o.Alias.Set(&v)
}

// SetAliasNil sets the value for Alias to be an explicit nil
func (o *CSSCMSDataModelModelsInvalidKeystore) SetAliasNil() {
	o.Alias.Set(nil)
}

// UnsetAlias ensures that no value is present for Alias, not even an explicit nil
func (o *CSSCMSDataModelModelsInvalidKeystore) UnsetAlias() {
	o.Alias.Unset()
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsInvalidKeystore) GetReason() CSSCMSDataModelEnumsFailureType {
	if o == nil || isNil(o.Reason) {
		var ret CSSCMSDataModelEnumsFailureType
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsInvalidKeystore) GetReasonOk() (*CSSCMSDataModelEnumsFailureType, bool) {
	if o == nil || isNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsInvalidKeystore) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given CSSCMSDataModelEnumsFailureType and assigns it to the Reason field.
func (o *CSSCMSDataModelModelsInvalidKeystore) SetReason(v CSSCMSDataModelEnumsFailureType) {
	o.Reason = &v
}

// GetExplanation returns the Explanation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsInvalidKeystore) GetExplanation() string {
	if o == nil || isNil(o.Explanation.Get()) {
		var ret string
		return ret
	}
	return *o.Explanation.Get()
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsInvalidKeystore) GetExplanationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Explanation.Get(), o.Explanation.IsSet()
}

// HasExplanation returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsInvalidKeystore) HasExplanation() bool {
	if o != nil && o.Explanation.IsSet() {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given NullableString and assigns it to the Explanation field.
func (o *CSSCMSDataModelModelsInvalidKeystore) SetExplanation(v string) {
	o.Explanation.Set(&v)
}

// SetExplanationNil sets the value for Explanation to be an explicit nil
func (o *CSSCMSDataModelModelsInvalidKeystore) SetExplanationNil() {
	o.Explanation.Set(nil)
}

// UnsetExplanation ensures that no value is present for Explanation, not even an explicit nil
func (o *CSSCMSDataModelModelsInvalidKeystore) UnsetExplanation() {
	o.Explanation.Unset()
}

func (o CSSCMSDataModelModelsInvalidKeystore) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSSCMSDataModelModelsInvalidKeystore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.KeystoreId) {
		toSerialize["keystoreId"] = o.KeystoreId
	}
	if o.ClientMachine.IsSet() {
		toSerialize["clientMachine"] = o.ClientMachine.Get()
	}
	if o.StorePath.IsSet() {
		toSerialize["storePath"] = o.StorePath.Get()
	}
	if o.Alias.IsSet() {
		toSerialize["alias"] = o.Alias.Get()
	}
	if !isNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if o.Explanation.IsSet() {
		toSerialize["explanation"] = o.Explanation.Get()
	}
	return toSerialize, nil
}

type NullableCSSCMSDataModelModelsInvalidKeystore struct {
	value *CSSCMSDataModelModelsInvalidKeystore
	isSet bool
}

func (v NullableCSSCMSDataModelModelsInvalidKeystore) Get() *CSSCMSDataModelModelsInvalidKeystore {
	return v.value
}

func (v *NullableCSSCMSDataModelModelsInvalidKeystore) Set(val *CSSCMSDataModelModelsInvalidKeystore) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelModelsInvalidKeystore) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelModelsInvalidKeystore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelModelsInvalidKeystore(val *CSSCMSDataModelModelsInvalidKeystore) *NullableCSSCMSDataModelModelsInvalidKeystore {
	return &NullableCSSCMSDataModelModelsInvalidKeystore{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelModelsInvalidKeystore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelModelsInvalidKeystore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
