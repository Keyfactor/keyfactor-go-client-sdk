/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

Testing ServiceAccountApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_command_ServiceAccountApiService(t *testing.T) {

	cwd, _ := os.Getwd()
	t.Logf("Working directory: %s", cwd)
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test ServiceAccountApiService SSHServiceAccountsDelete", func(t *testing.T) {

		t.Log("ServiceAccountApi_SSHServiceAccountsDelete_payload: <none>")
		httpRes, err := apiClient.ServiceAccountApi.SSHServiceAccountsDelete(context.Background()).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServiceAccountApiService SSHServiceAccountsGet", func(t *testing.T) {

		t.Log("ServiceAccountApi_SSHServiceAccountsGet_payload: <none>")
		resp, httpRes, err := apiClient.ServiceAccountApi.SSHServiceAccountsGet(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServiceAccountApiService SSHServiceAccountsIdDelete", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ServiceAccountApi_SSHServiceAccountsIdDelete_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ServiceAccountApi_SSHServiceAccountsIdDelete_id: %v", id)

		t.Log("ServiceAccountApi_SSHServiceAccountsIdDelete_payload: <none>")
		httpRes, err := apiClient.ServiceAccountApi.SSHServiceAccountsIdDelete(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServiceAccountApiService SSHServiceAccountsIdGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ServiceAccountApi_SSHServiceAccountsIdGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ServiceAccountApi_SSHServiceAccountsIdGet_id: %v", id)

		t.Log("ServiceAccountApi_SSHServiceAccountsIdGet_payload: <none>")
		resp, httpRes, err := apiClient.ServiceAccountApi.SSHServiceAccountsIdGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServiceAccountApiService SSHServiceAccountsKeyIdGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ServiceAccountApi_SSHServiceAccountsKeyIdGet_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ServiceAccountApi_SSHServiceAccountsKeyIdGet_id: %v", id)

		t.Log("ServiceAccountApi_SSHServiceAccountsKeyIdGet_payload: <none>")
		resp, httpRes, err := apiClient.ServiceAccountApi.SSHServiceAccountsKeyIdGet(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServiceAccountApiService SSHServiceAccountsPost", func(t *testing.T) {

		t.Log("ServiceAccountApi_SSHServiceAccountsPost_payload: <none>")
		resp, httpRes, err := apiClient.ServiceAccountApi.SSHServiceAccountsPost(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServiceAccountApiService SSHServiceAccountsPut", func(t *testing.T) {

		t.Log("ServiceAccountApi_SSHServiceAccountsPut_payload: <none>")
		resp, httpRes, err := apiClient.ServiceAccountApi.SSHServiceAccountsPut(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServiceAccountApiService SSHServiceAccountsRotateIdPost", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ServiceAccountApi_SSHServiceAccountsRotateIdPost_id")
		id, _ = convertParamInterface(id, "int32")
		t.Logf("ServiceAccountApi_SSHServiceAccountsRotateIdPost_id: %v", id)

		t.Log("ServiceAccountApi_SSHServiceAccountsRotateIdPost_payload: <none>")
		resp, httpRes, err := apiClient.ServiceAccountApi.SSHServiceAccountsRotateIdPost(context.Background(), id.(int32)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

}
