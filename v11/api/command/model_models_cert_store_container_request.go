/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsCertStoreContainerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertStoreContainerRequest{}

// ModelsCertStoreContainerRequest struct for ModelsCertStoreContainerRequest
type ModelsCertStoreContainerRequest struct {
	Id                 *int32                                      `json:"id,omitempty"`
	Name               NullableString                              `json:"name,omitempty"`
	OverwriteSchedules *bool                                       `json:"overwriteSchedules,omitempty"`
	Schedule           *KeyfactorCommonSchedulingKeyfactorSchedule `json:"schedule,omitempty"`
	CertStoreType      *int32                                      `json:"certStoreType,omitempty"`
	CertificateStores  []ModelsCertificateStore                    `json:"certificateStores,omitempty"`
}

// NewModelsCertStoreContainerRequest instantiates a new ModelsCertStoreContainerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertStoreContainerRequest() *ModelsCertStoreContainerRequest {
	this := ModelsCertStoreContainerRequest{}
	return &this
}

// NewModelsCertStoreContainerRequestWithDefaults instantiates a new ModelsCertStoreContainerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertStoreContainerRequestWithDefaults() *ModelsCertStoreContainerRequest {
	this := ModelsCertStoreContainerRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsCertStoreContainerRequest) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreContainerRequest) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsCertStoreContainerRequest) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsCertStoreContainerRequest) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsCertStoreContainerRequest) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsCertStoreContainerRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ModelsCertStoreContainerRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ModelsCertStoreContainerRequest) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *ModelsCertStoreContainerRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ModelsCertStoreContainerRequest) UnsetName() {
	o.Name.Unset()
}

// GetOverwriteSchedules returns the OverwriteSchedules field value if set, zero value otherwise.
func (o *ModelsCertStoreContainerRequest) GetOverwriteSchedules() bool {
	if o == nil || isNil(o.OverwriteSchedules) {
		var ret bool
		return ret
	}
	return *o.OverwriteSchedules
}

// GetOverwriteSchedulesOk returns a tuple with the OverwriteSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreContainerRequest) GetOverwriteSchedulesOk() (*bool, bool) {
	if o == nil || isNil(o.OverwriteSchedules) {
		return nil, false
	}
	return o.OverwriteSchedules, true
}

// HasOverwriteSchedules returns a boolean if a field has been set.
func (o *ModelsCertStoreContainerRequest) HasOverwriteSchedules() bool {
	if o != nil && !isNil(o.OverwriteSchedules) {
		return true
	}

	return false
}

// SetOverwriteSchedules gets a reference to the given bool and assigns it to the OverwriteSchedules field.
func (o *ModelsCertStoreContainerRequest) SetOverwriteSchedules(v bool) {
	o.OverwriteSchedules = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *ModelsCertStoreContainerRequest) GetSchedule() KeyfactorCommonSchedulingKeyfactorSchedule {
	if o == nil || isNil(o.Schedule) {
		var ret KeyfactorCommonSchedulingKeyfactorSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreContainerRequest) GetScheduleOk() (*KeyfactorCommonSchedulingKeyfactorSchedule, bool) {
	if o == nil || isNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *ModelsCertStoreContainerRequest) HasSchedule() bool {
	if o != nil && !isNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given KeyfactorCommonSchedulingKeyfactorSchedule and assigns it to the Schedule field.
func (o *ModelsCertStoreContainerRequest) SetSchedule(v KeyfactorCommonSchedulingKeyfactorSchedule) {
	o.Schedule = &v
}

// GetCertStoreType returns the CertStoreType field value if set, zero value otherwise.
func (o *ModelsCertStoreContainerRequest) GetCertStoreType() int32 {
	if o == nil || isNil(o.CertStoreType) {
		var ret int32
		return ret
	}
	return *o.CertStoreType
}

// GetCertStoreTypeOk returns a tuple with the CertStoreType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreContainerRequest) GetCertStoreTypeOk() (*int32, bool) {
	if o == nil || isNil(o.CertStoreType) {
		return nil, false
	}
	return o.CertStoreType, true
}

// HasCertStoreType returns a boolean if a field has been set.
func (o *ModelsCertStoreContainerRequest) HasCertStoreType() bool {
	if o != nil && !isNil(o.CertStoreType) {
		return true
	}

	return false
}

// SetCertStoreType gets a reference to the given int32 and assigns it to the CertStoreType field.
func (o *ModelsCertStoreContainerRequest) SetCertStoreType(v int32) {
	o.CertStoreType = &v
}

// GetCertificateStores returns the CertificateStores field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsCertStoreContainerRequest) GetCertificateStores() []ModelsCertificateStore {
	if o == nil {
		var ret []ModelsCertificateStore
		return ret
	}
	return o.CertificateStores
}

// GetCertificateStoresOk returns a tuple with the CertificateStores field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsCertStoreContainerRequest) GetCertificateStoresOk() ([]ModelsCertificateStore, bool) {
	if o == nil || isNil(o.CertificateStores) {
		return nil, false
	}
	return o.CertificateStores, true
}

// HasCertificateStores returns a boolean if a field has been set.
func (o *ModelsCertStoreContainerRequest) HasCertificateStores() bool {
	if o != nil && isNil(o.CertificateStores) {
		return true
	}

	return false
}

// SetCertificateStores gets a reference to the given []ModelsCertificateStore and assigns it to the CertificateStores field.
func (o *ModelsCertStoreContainerRequest) SetCertificateStores(v []ModelsCertificateStore) {
	o.CertificateStores = v
}

func (o ModelsCertStoreContainerRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertStoreContainerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !isNil(o.OverwriteSchedules) {
		toSerialize["overwriteSchedules"] = o.OverwriteSchedules
	}
	if !isNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !isNil(o.CertStoreType) {
		toSerialize["certStoreType"] = o.CertStoreType
	}
	if o.CertificateStores != nil {
		toSerialize["certificateStores"] = o.CertificateStores
	}
	return toSerialize, nil
}

type NullableModelsCertStoreContainerRequest struct {
	value *ModelsCertStoreContainerRequest
	isSet bool
}

func (v NullableModelsCertStoreContainerRequest) Get() *ModelsCertStoreContainerRequest {
	return v.value
}

func (v *NullableModelsCertStoreContainerRequest) Set(val *ModelsCertStoreContainerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertStoreContainerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertStoreContainerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertStoreContainerRequest(val *ModelsCertStoreContainerRequest) *NullableModelsCertStoreContainerRequest {
	return &NullableModelsCertStoreContainerRequest{value: val, isSet: true}
}

func (v NullableModelsCertStoreContainerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertStoreContainerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
