/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct{}

// KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct struct for KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct
type KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct struct {
	ProductId        NullableString                                                        `json:"productId,omitempty"`
	DisplayName      NullableString                                                        `json:"displayName,omitempty"`
	MajorRev         NullableString                                                        `json:"majorRev,omitempty"`
	MinorRev         NullableString                                                        `json:"minorRev,omitempty"`
	LicensedFeatures []KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature `json:"licensedFeatures,omitempty"`
}

// NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct instantiates a new KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct() *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
	this := KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct{}
	return &this
}

// NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProductWithDefaults instantiates a new KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProductWithDefaults() *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
	this := KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct{}
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetProductId() string {
	if o == nil || isNil(o.ProductId.Get()) {
		var ret string
		return ret
	}
	return *o.ProductId.Get()
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductId.Get(), o.ProductId.IsSet()
}

// HasProductId returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) HasProductId() bool {
	if o != nil && o.ProductId.IsSet() {
		return true
	}

	return false
}

// SetProductId gets a reference to the given NullableString and assigns it to the ProductId field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetProductId(v string) {
	o.ProductId.Set(&v)
}

// SetProductIdNil sets the value for ProductId to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetProductIdNil() {
	o.ProductId.Set(nil)
}

// UnsetProductId ensures that no value is present for ProductId, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) UnsetProductId() {
	o.ProductId.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}

// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetMajorRev returns the MajorRev field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetMajorRev() string {
	if o == nil || isNil(o.MajorRev.Get()) {
		var ret string
		return ret
	}
	return *o.MajorRev.Get()
}

// GetMajorRevOk returns a tuple with the MajorRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetMajorRevOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MajorRev.Get(), o.MajorRev.IsSet()
}

// HasMajorRev returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) HasMajorRev() bool {
	if o != nil && o.MajorRev.IsSet() {
		return true
	}

	return false
}

// SetMajorRev gets a reference to the given NullableString and assigns it to the MajorRev field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetMajorRev(v string) {
	o.MajorRev.Set(&v)
}

// SetMajorRevNil sets the value for MajorRev to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetMajorRevNil() {
	o.MajorRev.Set(nil)
}

// UnsetMajorRev ensures that no value is present for MajorRev, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) UnsetMajorRev() {
	o.MajorRev.Unset()
}

// GetMinorRev returns the MinorRev field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetMinorRev() string {
	if o == nil || isNil(o.MinorRev.Get()) {
		var ret string
		return ret
	}
	return *o.MinorRev.Get()
}

// GetMinorRevOk returns a tuple with the MinorRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetMinorRevOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinorRev.Get(), o.MinorRev.IsSet()
}

// HasMinorRev returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) HasMinorRev() bool {
	if o != nil && o.MinorRev.IsSet() {
		return true
	}

	return false
}

// SetMinorRev gets a reference to the given NullableString and assigns it to the MinorRev field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetMinorRev(v string) {
	o.MinorRev.Set(&v)
}

// SetMinorRevNil sets the value for MinorRev to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetMinorRevNil() {
	o.MinorRev.Set(nil)
}

// UnsetMinorRev ensures that no value is present for MinorRev, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) UnsetMinorRev() {
	o.MinorRev.Unset()
}

// GetLicensedFeatures returns the LicensedFeatures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetLicensedFeatures() []KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature {
	if o == nil {
		var ret []KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature
		return ret
	}
	return o.LicensedFeatures
}

// GetLicensedFeaturesOk returns a tuple with the LicensedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) GetLicensedFeaturesOk() ([]KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature, bool) {
	if o == nil || isNil(o.LicensedFeatures) {
		return nil, false
	}
	return o.LicensedFeatures, true
}

// HasLicensedFeatures returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) HasLicensedFeatures() bool {
	if o != nil && isNil(o.LicensedFeatures) {
		return true
	}

	return false
}

// SetLicensedFeatures gets a reference to the given []KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature and assigns it to the LicensedFeatures field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) SetLicensedFeatures(v []KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) {
	o.LicensedFeatures = v
}

func (o KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProductId.IsSet() {
		toSerialize["productId"] = o.ProductId.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.MajorRev.IsSet() {
		toSerialize["majorRev"] = o.MajorRev.Get()
	}
	if o.MinorRev.IsSet() {
		toSerialize["minorRev"] = o.MinorRev.Get()
	}
	if o.LicensedFeatures != nil {
		toSerialize["licensedFeatures"] = o.LicensedFeatures
	}
	return toSerialize, nil
}

type NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct struct {
	value *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct
	isSet bool
}

func (v NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) Get() *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
	return v.value
}

func (v *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) Set(val *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct(val *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
	return &NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct{value: val, isSet: true}
}

func (v NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
