/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// WorkflowDefinitionApiService WorkflowDefinitionApi service
type WorkflowDefinitionApiService service

type ApiWorkflowDefinitionsDefinitionIdDeleteRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowDefinitionApiService
	definitionId            string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDefinitionsDefinitionIdDeleteRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDefinitionsDefinitionIdDeleteRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDefinitionsDefinitionIdDeleteRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDefinitionsDefinitionIdDeleteRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowDefinitionsDefinitionIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.WorkflowDefinitionsDefinitionIdDeleteExecute(r)
}

/*
WorkflowDefinitionsDefinitionIdDelete Deletes the definition matching the given Id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId The Workflow Definition Id.
	@return ApiWorkflowDefinitionsDefinitionIdDeleteRequest
*/
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsDefinitionIdDelete(ctx context.Context, definitionId string) ApiWorkflowDefinitionsDefinitionIdDeleteRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowDefinitionsDefinitionIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		definitionId:            definitionId,
	}
}

// Execute executes the request
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsDefinitionIdDeleteExecute(r ApiWorkflowDefinitionsDefinitionIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Definitions/{definitionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowDefinitionsDefinitionIdGetRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowDefinitionApiService
	definitionId            string
	xKeyfactorRequestedWith *string
	definitionVersion       *int32
	exportable              *bool
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDefinitionsDefinitionIdGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDefinitionsDefinitionIdGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// The version to retrieve. If this value is not specified, the latest version will be returned.
func (r ApiWorkflowDefinitionsDefinitionIdGetRequest) DefinitionVersion(definitionVersion int32) ApiWorkflowDefinitionsDefinitionIdGetRequest {
	r.definitionVersion = &definitionVersion
	return r
}

// Indicates if the response should be cleansed of role ids for export.
func (r ApiWorkflowDefinitionsDefinitionIdGetRequest) Exportable(exportable bool) ApiWorkflowDefinitionsDefinitionIdGetRequest {
	r.exportable = &exportable
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDefinitionsDefinitionIdGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDefinitionsDefinitionIdGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowDefinitionsDefinitionIdGetRequest) Execute() (*KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse, *http.Response, error) {
	return r.ApiService.WorkflowDefinitionsDefinitionIdGetExecute(r)
}

/*
WorkflowDefinitionsDefinitionIdGet Gets a workflow definition.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId The Id of the definition to retrieve.
	@return ApiWorkflowDefinitionsDefinitionIdGetRequest
*/
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsDefinitionIdGet(ctx context.Context, definitionId string) ApiWorkflowDefinitionsDefinitionIdGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowDefinitionsDefinitionIdGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		definitionId:            definitionId,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsDefinitionIdGetExecute(r ApiWorkflowDefinitionsDefinitionIdGetRequest) (*KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Definitions/{definitionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.definitionVersion != nil {
		parameterAddToQuery(localVarQueryParams, "definitionVersion", r.definitionVersion, "")
	}
	if r.exportable != nil {
		parameterAddToQuery(localVarQueryParams, "exportable", r.exportable, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowDefinitionsDefinitionIdPublishPostRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowDefinitionApiService
	definitionId            string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDefinitionsDefinitionIdPublishPostRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDefinitionsDefinitionIdPublishPostRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDefinitionsDefinitionIdPublishPostRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDefinitionsDefinitionIdPublishPostRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowDefinitionsDefinitionIdPublishPostRequest) Execute() (*KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse, *http.Response, error) {
	return r.ApiService.WorkflowDefinitionsDefinitionIdPublishPostExecute(r)
}

/*
WorkflowDefinitionsDefinitionIdPublishPost Makes the most recent version of a Workflow Definition the published version.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId The Workflow Definition Id.
	@return ApiWorkflowDefinitionsDefinitionIdPublishPostRequest
*/
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsDefinitionIdPublishPost(ctx context.Context, definitionId string) ApiWorkflowDefinitionsDefinitionIdPublishPostRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowDefinitionsDefinitionIdPublishPostRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		definitionId:            definitionId,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsDefinitionIdPublishPostExecute(r ApiWorkflowDefinitionsDefinitionIdPublishPostRequest) (*KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Definitions/{definitionId}/Publish"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowDefinitionsDefinitionIdPutRequest struct {
	ctx                                                            context.Context
	ApiService                                                     *WorkflowDefinitionApiService
	definitionId                                                   string
	xKeyfactorRequestedWith                                        *string
	xKeyfactorApiVersion                                           *string
	keyfactorWebKeyfactorApiModelsWorkflowsDefinitionUpdateRequest *KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionUpdateRequest
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDefinitionsDefinitionIdPutRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDefinitionsDefinitionIdPutRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDefinitionsDefinitionIdPutRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDefinitionsDefinitionIdPutRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// The Keyfactor.Web.KeyfactorApi.Models.Workflows.DefinitionUpdateRequest holding the updated DispalyName and Description.
func (r ApiWorkflowDefinitionsDefinitionIdPutRequest) KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionUpdateRequest(keyfactorWebKeyfactorApiModelsWorkflowsDefinitionUpdateRequest KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionUpdateRequest) ApiWorkflowDefinitionsDefinitionIdPutRequest {
	r.keyfactorWebKeyfactorApiModelsWorkflowsDefinitionUpdateRequest = &keyfactorWebKeyfactorApiModelsWorkflowsDefinitionUpdateRequest
	return r
}

func (r ApiWorkflowDefinitionsDefinitionIdPutRequest) Execute() (*KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse, *http.Response, error) {
	return r.ApiService.WorkflowDefinitionsDefinitionIdPutExecute(r)
}

/*
WorkflowDefinitionsDefinitionIdPut Updates the existing definition's DisplayName and Description.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId The Id of the definition to update.
	@return ApiWorkflowDefinitionsDefinitionIdPutRequest
*/
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsDefinitionIdPut(ctx context.Context, definitionId string) ApiWorkflowDefinitionsDefinitionIdPutRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowDefinitionsDefinitionIdPutRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		definitionId:            definitionId,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsDefinitionIdPutExecute(r ApiWorkflowDefinitionsDefinitionIdPutRequest) (*KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Definitions/{definitionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.keyfactorWebKeyfactorApiModelsWorkflowsDefinitionUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowDefinitionsDefinitionIdStepsPutRequest struct {
	ctx                                                          context.Context
	ApiService                                                   *WorkflowDefinitionApiService
	definitionId                                                 string
	xKeyfactorRequestedWith                                      *string
	xKeyfactorApiVersion                                         *string
	keyfactorWebKeyfactorApiModelsWorkflowsDefinitionStepRequest *[]KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionStepRequest
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDefinitionsDefinitionIdStepsPutRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDefinitionsDefinitionIdStepsPutRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDefinitionsDefinitionIdStepsPutRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDefinitionsDefinitionIdStepsPutRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// A collection of Keyfactor.Web.KeyfactorApi.Models.Workflows.DefinitionStepRequest defining the steps to set on the definition.
func (r ApiWorkflowDefinitionsDefinitionIdStepsPutRequest) KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionStepRequest(keyfactorWebKeyfactorApiModelsWorkflowsDefinitionStepRequest []KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionStepRequest) ApiWorkflowDefinitionsDefinitionIdStepsPutRequest {
	r.keyfactorWebKeyfactorApiModelsWorkflowsDefinitionStepRequest = &keyfactorWebKeyfactorApiModelsWorkflowsDefinitionStepRequest
	return r
}

func (r ApiWorkflowDefinitionsDefinitionIdStepsPutRequest) Execute() (*KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse, *http.Response, error) {
	return r.ApiService.WorkflowDefinitionsDefinitionIdStepsPutExecute(r)
}

/*
WorkflowDefinitionsDefinitionIdStepsPut Sets the provided steps on the latest version of the definition.

If the latest version is also the published version, a new version will be created and the steps will be set on that new version.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param definitionId The Id of the definition.
	@return ApiWorkflowDefinitionsDefinitionIdStepsPutRequest
*/
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsDefinitionIdStepsPut(ctx context.Context, definitionId string) ApiWorkflowDefinitionsDefinitionIdStepsPutRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowDefinitionsDefinitionIdStepsPutRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		definitionId:            definitionId,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsDefinitionIdStepsPutExecute(r ApiWorkflowDefinitionsDefinitionIdStepsPutRequest) (*KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Definitions/{definitionId}/Steps"
	localVarPath = strings.Replace(localVarPath, "{"+"definitionId"+"}", url.PathEscape(parameterValueToString(r.definitionId, "definitionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.keyfactorWebKeyfactorApiModelsWorkflowsDefinitionStepRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowDefinitionsGetRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowDefinitionApiService
	xKeyfactorRequestedWith *string
	queryString             *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDefinitionsGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDefinitionsGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiWorkflowDefinitionsGetRequest) QueryString(queryString string) ApiWorkflowDefinitionsGetRequest {
	r.queryString = &queryString
	return r
}

func (r ApiWorkflowDefinitionsGetRequest) PageReturned(pageReturned int32) ApiWorkflowDefinitionsGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiWorkflowDefinitionsGetRequest) ReturnLimit(returnLimit int32) ApiWorkflowDefinitionsGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiWorkflowDefinitionsGetRequest) SortField(sortField string) ApiWorkflowDefinitionsGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiWorkflowDefinitionsGetRequest) SortAscending(sortAscending int32) ApiWorkflowDefinitionsGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDefinitionsGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDefinitionsGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowDefinitionsGetRequest) Execute() ([]KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionQueryResponse, *http.Response, error) {
	return r.ApiService.WorkflowDefinitionsGetExecute(r)
}

/*
WorkflowDefinitionsGet Gets the Definitions matching the query specifications.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWorkflowDefinitionsGetRequest
*/
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsGet(ctx context.Context) ApiWorkflowDefinitionsGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowDefinitionsGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return []KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionQueryResponse
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsGetExecute(r ApiWorkflowDefinitionsGetRequest) ([]KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionQueryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionQueryResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Definitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.queryString != nil {
		parameterAddToQuery(localVarQueryParams, "QueryString", r.queryString, "")
	}
	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowDefinitionsPostRequest struct {
	ctx                                                            context.Context
	ApiService                                                     *WorkflowDefinitionApiService
	xKeyfactorRequestedWith                                        *string
	xKeyfactorApiVersion                                           *string
	keyfactorWebKeyfactorApiModelsWorkflowsDefinitionCreateRequest *KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionCreateRequest
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDefinitionsPostRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDefinitionsPostRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDefinitionsPostRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDefinitionsPostRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// A Keyfactor.Web.KeyfactorApi.Models.Workflows.DefinitionCreateRequest with the display name, description, key and type of the definition.
func (r ApiWorkflowDefinitionsPostRequest) KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionCreateRequest(keyfactorWebKeyfactorApiModelsWorkflowsDefinitionCreateRequest KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionCreateRequest) ApiWorkflowDefinitionsPostRequest {
	r.keyfactorWebKeyfactorApiModelsWorkflowsDefinitionCreateRequest = &keyfactorWebKeyfactorApiModelsWorkflowsDefinitionCreateRequest
	return r
}

func (r ApiWorkflowDefinitionsPostRequest) Execute() (*KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse, *http.Response, error) {
	return r.ApiService.WorkflowDefinitionsPostExecute(r)
}

/*
WorkflowDefinitionsPost Creates a new base definition without any steps.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWorkflowDefinitionsPostRequest
*/
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsPost(ctx context.Context) ApiWorkflowDefinitionsPostRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowDefinitionsPostRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsPostExecute(r ApiWorkflowDefinitionsPostRequest) (*KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsWorkflowsDefinitionResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Definitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.keyfactorWebKeyfactorApiModelsWorkflowsDefinitionCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowDefinitionsStepsExtensionNameGetRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowDefinitionApiService
	extensionName           string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDefinitionsStepsExtensionNameGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDefinitionsStepsExtensionNameGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDefinitionsStepsExtensionNameGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDefinitionsStepsExtensionNameGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowDefinitionsStepsExtensionNameGetRequest) Execute() (*KeyfactorWebKeyfactorApiModelsWorkflowsAvailableStepResponse, *http.Response, error) {
	return r.ApiService.WorkflowDefinitionsStepsExtensionNameGetExecute(r)
}

/*
WorkflowDefinitionsStepsExtensionNameGet Gets the schema of a given step with the specified extension name.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param extensionName The extension name of a specific step in the step schema.
	@return ApiWorkflowDefinitionsStepsExtensionNameGetRequest
*/
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsStepsExtensionNameGet(ctx context.Context, extensionName string) ApiWorkflowDefinitionsStepsExtensionNameGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowDefinitionsStepsExtensionNameGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		extensionName:           extensionName,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsWorkflowsAvailableStepResponse
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsStepsExtensionNameGetExecute(r ApiWorkflowDefinitionsStepsExtensionNameGetRequest) (*KeyfactorWebKeyfactorApiModelsWorkflowsAvailableStepResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableStepResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Definitions/Steps/{extensionName}"
	localVarPath = strings.Replace(localVarPath, "{"+"extensionName"+"}", url.PathEscape(parameterValueToString(r.extensionName, "extensionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowDefinitionsStepsGetRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowDefinitionApiService
	xKeyfactorRequestedWith *string
	queryString             *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDefinitionsStepsGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDefinitionsStepsGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiWorkflowDefinitionsStepsGetRequest) QueryString(queryString string) ApiWorkflowDefinitionsStepsGetRequest {
	r.queryString = &queryString
	return r
}

func (r ApiWorkflowDefinitionsStepsGetRequest) PageReturned(pageReturned int32) ApiWorkflowDefinitionsStepsGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiWorkflowDefinitionsStepsGetRequest) ReturnLimit(returnLimit int32) ApiWorkflowDefinitionsStepsGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiWorkflowDefinitionsStepsGetRequest) SortField(sortField string) ApiWorkflowDefinitionsStepsGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiWorkflowDefinitionsStepsGetRequest) SortAscending(sortAscending int32) ApiWorkflowDefinitionsStepsGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDefinitionsStepsGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDefinitionsStepsGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowDefinitionsStepsGetRequest) Execute() ([]KeyfactorWebKeyfactorApiModelsWorkflowsAvailableStepQueryResponse, *http.Response, error) {
	return r.ApiService.WorkflowDefinitionsStepsGetExecute(r)
}

/*
WorkflowDefinitionsStepsGet Gets the result set of available steps for a given query.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWorkflowDefinitionsStepsGetRequest
*/
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsStepsGet(ctx context.Context) ApiWorkflowDefinitionsStepsGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowDefinitionsStepsGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return []KeyfactorWebKeyfactorApiModelsWorkflowsAvailableStepQueryResponse
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsStepsGetExecute(r ApiWorkflowDefinitionsStepsGetRequest) ([]KeyfactorWebKeyfactorApiModelsWorkflowsAvailableStepQueryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KeyfactorWebKeyfactorApiModelsWorkflowsAvailableStepQueryResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Definitions/Steps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.queryString != nil {
		parameterAddToQuery(localVarQueryParams, "QueryString", r.queryString, "")
	}
	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowDefinitionsTypesGetRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowDefinitionApiService
	xKeyfactorRequestedWith *string
	queryString             *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowDefinitionsTypesGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowDefinitionsTypesGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiWorkflowDefinitionsTypesGetRequest) QueryString(queryString string) ApiWorkflowDefinitionsTypesGetRequest {
	r.queryString = &queryString
	return r
}

func (r ApiWorkflowDefinitionsTypesGetRequest) PageReturned(pageReturned int32) ApiWorkflowDefinitionsTypesGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiWorkflowDefinitionsTypesGetRequest) ReturnLimit(returnLimit int32) ApiWorkflowDefinitionsTypesGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiWorkflowDefinitionsTypesGetRequest) SortField(sortField string) ApiWorkflowDefinitionsTypesGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiWorkflowDefinitionsTypesGetRequest) SortAscending(sortAscending int32) ApiWorkflowDefinitionsTypesGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowDefinitionsTypesGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowDefinitionsTypesGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowDefinitionsTypesGetRequest) Execute() ([]KeyfactorWebKeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse, *http.Response, error) {
	return r.ApiService.WorkflowDefinitionsTypesGetExecute(r)
}

/*
WorkflowDefinitionsTypesGet Performs a query against the workflow types in the system.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWorkflowDefinitionsTypesGetRequest
*/
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsTypesGet(ctx context.Context) ApiWorkflowDefinitionsTypesGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowDefinitionsTypesGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return []KeyfactorWebKeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse
func (a *WorkflowDefinitionApiService) WorkflowDefinitionsTypesGetExecute(r ApiWorkflowDefinitionsTypesGetRequest) ([]KeyfactorWebKeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KeyfactorWebKeyfactorApiModelsWorkflowsWorkflowTypeQueryResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Definitions/Types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.queryString != nil {
		parameterAddToQuery(localVarQueryParams, "QueryString", r.queryString, "")
	}
	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
