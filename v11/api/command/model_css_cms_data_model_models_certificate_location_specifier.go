/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the CSSCMSDataModelModelsCertificateLocationSpecifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSSCMSDataModelModelsCertificateLocationSpecifier{}

// CSSCMSDataModelModelsCertificateLocationSpecifier struct for CSSCMSDataModelModelsCertificateLocationSpecifier
type CSSCMSDataModelModelsCertificateLocationSpecifier struct {
	Alias              NullableString         `json:"alias,omitempty"`
	CertificateStoreId *string                `json:"certificateStoreId,omitempty"`
	JobFields          map[string]interface{} `json:"jobFields,omitempty"`
}

// NewCSSCMSDataModelModelsCertificateLocationSpecifier instantiates a new CSSCMSDataModelModelsCertificateLocationSpecifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSSCMSDataModelModelsCertificateLocationSpecifier() *CSSCMSDataModelModelsCertificateLocationSpecifier {
	this := CSSCMSDataModelModelsCertificateLocationSpecifier{}
	return &this
}

// NewCSSCMSDataModelModelsCertificateLocationSpecifierWithDefaults instantiates a new CSSCMSDataModelModelsCertificateLocationSpecifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSSCMSDataModelModelsCertificateLocationSpecifierWithDefaults() *CSSCMSDataModelModelsCertificateLocationSpecifier {
	this := CSSCMSDataModelModelsCertificateLocationSpecifier{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) GetAlias() string {
	if o == nil || isNil(o.Alias.Get()) {
		var ret string
		return ret
	}
	return *o.Alias.Get()
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alias.Get(), o.Alias.IsSet()
}

// HasAlias returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) HasAlias() bool {
	if o != nil && o.Alias.IsSet() {
		return true
	}

	return false
}

// SetAlias gets a reference to the given NullableString and assigns it to the Alias field.
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) SetAlias(v string) {
	o.Alias.Set(&v)
}

// SetAliasNil sets the value for Alias to be an explicit nil
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) SetAliasNil() {
	o.Alias.Set(nil)
}

// UnsetAlias ensures that no value is present for Alias, not even an explicit nil
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) UnsetAlias() {
	o.Alias.Unset()
}

// GetCertificateStoreId returns the CertificateStoreId field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) GetCertificateStoreId() string {
	if o == nil || isNil(o.CertificateStoreId) {
		var ret string
		return ret
	}
	return *o.CertificateStoreId
}

// GetCertificateStoreIdOk returns a tuple with the CertificateStoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) GetCertificateStoreIdOk() (*string, bool) {
	if o == nil || isNil(o.CertificateStoreId) {
		return nil, false
	}
	return o.CertificateStoreId, true
}

// HasCertificateStoreId returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) HasCertificateStoreId() bool {
	if o != nil && !isNil(o.CertificateStoreId) {
		return true
	}

	return false
}

// SetCertificateStoreId gets a reference to the given string and assigns it to the CertificateStoreId field.
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) SetCertificateStoreId(v string) {
	o.CertificateStoreId = &v
}

// GetJobFields returns the JobFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) GetJobFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.JobFields
}

// GetJobFieldsOk returns a tuple with the JobFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) GetJobFieldsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.JobFields) {
		return map[string]interface{}{}, false
	}
	return o.JobFields, true
}

// HasJobFields returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) HasJobFields() bool {
	if o != nil && isNil(o.JobFields) {
		return true
	}

	return false
}

// SetJobFields gets a reference to the given map[string]interface{} and assigns it to the JobFields field.
func (o *CSSCMSDataModelModelsCertificateLocationSpecifier) SetJobFields(v map[string]interface{}) {
	o.JobFields = v
}

func (o CSSCMSDataModelModelsCertificateLocationSpecifier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSSCMSDataModelModelsCertificateLocationSpecifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Alias.IsSet() {
		toSerialize["alias"] = o.Alias.Get()
	}
	if !isNil(o.CertificateStoreId) {
		toSerialize["certificateStoreId"] = o.CertificateStoreId
	}
	if o.JobFields != nil {
		toSerialize["jobFields"] = o.JobFields
	}
	return toSerialize, nil
}

type NullableCSSCMSDataModelModelsCertificateLocationSpecifier struct {
	value *CSSCMSDataModelModelsCertificateLocationSpecifier
	isSet bool
}

func (v NullableCSSCMSDataModelModelsCertificateLocationSpecifier) Get() *CSSCMSDataModelModelsCertificateLocationSpecifier {
	return v.value
}

func (v *NullableCSSCMSDataModelModelsCertificateLocationSpecifier) Set(val *CSSCMSDataModelModelsCertificateLocationSpecifier) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelModelsCertificateLocationSpecifier) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelModelsCertificateLocationSpecifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelModelsCertificateLocationSpecifier(val *CSSCMSDataModelModelsCertificateLocationSpecifier) *NullableCSSCMSDataModelModelsCertificateLocationSpecifier {
	return &NullableCSSCMSDataModelModelsCertificateLocationSpecifier{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelModelsCertificateLocationSpecifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelModelsCertificateLocationSpecifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
