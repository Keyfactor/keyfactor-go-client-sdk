/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the CSSCMSDataModelModelsCertificateStoreTypeProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSSCMSDataModelModelsCertificateStoreTypeProperty{}

// CSSCMSDataModelModelsCertificateStoreTypeProperty struct for CSSCMSDataModelModelsCertificateStoreTypeProperty
type CSSCMSDataModelModelsCertificateStoreTypeProperty struct {
	StoreTypeId  *int32                                           `json:"storeTypeId,omitempty"`
	Name         NullableString                                   `json:"name,omitempty"`
	DisplayName  NullableString                                   `json:"displayName,omitempty"`
	Type         *CSSCMSCoreEnumsCertificateStoreTypePropertyType `json:"type,omitempty"`
	DependsOn    NullableString                                   `json:"dependsOn,omitempty"`
	DefaultValue NullableString                                   `json:"defaultValue,omitempty"`
	Required     *bool                                            `json:"required,omitempty"`
}

// NewCSSCMSDataModelModelsCertificateStoreTypeProperty instantiates a new CSSCMSDataModelModelsCertificateStoreTypeProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSSCMSDataModelModelsCertificateStoreTypeProperty() *CSSCMSDataModelModelsCertificateStoreTypeProperty {
	this := CSSCMSDataModelModelsCertificateStoreTypeProperty{}
	return &this
}

// NewCSSCMSDataModelModelsCertificateStoreTypePropertyWithDefaults instantiates a new CSSCMSDataModelModelsCertificateStoreTypeProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSSCMSDataModelModelsCertificateStoreTypePropertyWithDefaults() *CSSCMSDataModelModelsCertificateStoreTypeProperty {
	this := CSSCMSDataModelModelsCertificateStoreTypeProperty{}
	return &this
}

// GetStoreTypeId returns the StoreTypeId field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetStoreTypeId() int32 {
	if o == nil || isNil(o.StoreTypeId) {
		var ret int32
		return ret
	}
	return *o.StoreTypeId
}

// GetStoreTypeIdOk returns a tuple with the StoreTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetStoreTypeIdOk() (*int32, bool) {
	if o == nil || isNil(o.StoreTypeId) {
		return nil, false
	}
	return o.StoreTypeId, true
}

// HasStoreTypeId returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) HasStoreTypeId() bool {
	if o != nil && !isNil(o.StoreTypeId) {
		return true
	}

	return false
}

// SetStoreTypeId gets a reference to the given int32 and assigns it to the StoreTypeId field.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetStoreTypeId(v int32) {
	o.StoreTypeId = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) UnsetName() {
	o.Name.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}

// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetType() CSSCMSCoreEnumsCertificateStoreTypePropertyType {
	if o == nil || isNil(o.Type) {
		var ret CSSCMSCoreEnumsCertificateStoreTypePropertyType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetTypeOk() (*CSSCMSCoreEnumsCertificateStoreTypePropertyType, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CSSCMSCoreEnumsCertificateStoreTypePropertyType and assigns it to the Type field.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetType(v CSSCMSCoreEnumsCertificateStoreTypePropertyType) {
	o.Type = &v
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetDependsOn() string {
	if o == nil || isNil(o.DependsOn.Get()) {
		var ret string
		return ret
	}
	return *o.DependsOn.Get()
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetDependsOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependsOn.Get(), o.DependsOn.IsSet()
}

// HasDependsOn returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) HasDependsOn() bool {
	if o != nil && o.DependsOn.IsSet() {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given NullableString and assigns it to the DependsOn field.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetDependsOn(v string) {
	o.DependsOn.Set(&v)
}

// SetDependsOnNil sets the value for DependsOn to be an explicit nil
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetDependsOnNil() {
	o.DependsOn.Set(nil)
}

// UnsetDependsOn ensures that no value is present for DependsOn, not even an explicit nil
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) UnsetDependsOn() {
	o.DependsOn.Unset()
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetDefaultValue() string {
	if o == nil || isNil(o.DefaultValue.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}

// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetRequired() bool {
	if o == nil || isNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) GetRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) HasRequired() bool {
	if o != nil && !isNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *CSSCMSDataModelModelsCertificateStoreTypeProperty) SetRequired(v bool) {
	o.Required = &v
}

func (o CSSCMSDataModelModelsCertificateStoreTypeProperty) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSSCMSDataModelModelsCertificateStoreTypeProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StoreTypeId) {
		toSerialize["storeTypeId"] = o.StoreTypeId
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.DependsOn.IsSet() {
		toSerialize["dependsOn"] = o.DependsOn.Get()
	}
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if !isNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return toSerialize, nil
}

type NullableCSSCMSDataModelModelsCertificateStoreTypeProperty struct {
	value *CSSCMSDataModelModelsCertificateStoreTypeProperty
	isSet bool
}

func (v NullableCSSCMSDataModelModelsCertificateStoreTypeProperty) Get() *CSSCMSDataModelModelsCertificateStoreTypeProperty {
	return v.value
}

func (v *NullableCSSCMSDataModelModelsCertificateStoreTypeProperty) Set(val *CSSCMSDataModelModelsCertificateStoreTypeProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelModelsCertificateStoreTypeProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelModelsCertificateStoreTypeProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelModelsCertificateStoreTypeProperty(val *CSSCMSDataModelModelsCertificateStoreTypeProperty) *NullableCSSCMSDataModelModelsCertificateStoreTypeProperty {
	return &NullableCSSCMSDataModelModelsCertificateStoreTypeProperty{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelModelsCertificateStoreTypeProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelModelsCertificateStoreTypeProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
