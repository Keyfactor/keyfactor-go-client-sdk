/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse{}

// KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse struct for KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse
type KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse struct {
	// The name of the signal.
	SignalName NullableString `json:"signalName,omitempty"`
	// The signal Id.
	StepSignalId *string `json:"stepSignalId,omitempty"`
	// Whether or not the signal has been received.
	SignalReceived *bool `json:"signalReceived,omitempty"`
}

// NewKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse instantiates a new KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse() *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse {
	this := KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse{}
	return &this
}

// NewKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponseWithDefaults instantiates a new KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponseWithDefaults() *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse {
	this := KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse{}
	return &this
}

// GetSignalName returns the SignalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) GetSignalName() string {
	if o == nil || isNil(o.SignalName.Get()) {
		var ret string
		return ret
	}
	return *o.SignalName.Get()
}

// GetSignalNameOk returns a tuple with the SignalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) GetSignalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SignalName.Get(), o.SignalName.IsSet()
}

// HasSignalName returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) HasSignalName() bool {
	if o != nil && o.SignalName.IsSet() {
		return true
	}

	return false
}

// SetSignalName gets a reference to the given NullableString and assigns it to the SignalName field.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) SetSignalName(v string) {
	o.SignalName.Set(&v)
}

// SetSignalNameNil sets the value for SignalName to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) SetSignalNameNil() {
	o.SignalName.Set(nil)
}

// UnsetSignalName ensures that no value is present for SignalName, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) UnsetSignalName() {
	o.SignalName.Unset()
}

// GetStepSignalId returns the StepSignalId field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) GetStepSignalId() string {
	if o == nil || isNil(o.StepSignalId) {
		var ret string
		return ret
	}
	return *o.StepSignalId
}

// GetStepSignalIdOk returns a tuple with the StepSignalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) GetStepSignalIdOk() (*string, bool) {
	if o == nil || isNil(o.StepSignalId) {
		return nil, false
	}
	return o.StepSignalId, true
}

// HasStepSignalId returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) HasStepSignalId() bool {
	if o != nil && !isNil(o.StepSignalId) {
		return true
	}

	return false
}

// SetStepSignalId gets a reference to the given string and assigns it to the StepSignalId field.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) SetStepSignalId(v string) {
	o.StepSignalId = &v
}

// GetSignalReceived returns the SignalReceived field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) GetSignalReceived() bool {
	if o == nil || isNil(o.SignalReceived) {
		var ret bool
		return ret
	}
	return *o.SignalReceived
}

// GetSignalReceivedOk returns a tuple with the SignalReceived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) GetSignalReceivedOk() (*bool, bool) {
	if o == nil || isNil(o.SignalReceived) {
		return nil, false
	}
	return o.SignalReceived, true
}

// HasSignalReceived returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) HasSignalReceived() bool {
	if o != nil && !isNil(o.SignalReceived) {
		return true
	}

	return false
}

// SetSignalReceived gets a reference to the given bool and assigns it to the SignalReceived field.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) SetSignalReceived(v bool) {
	o.SignalReceived = &v
}

func (o KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SignalName.IsSet() {
		toSerialize["signalName"] = o.SignalName.Get()
	}
	if !isNil(o.StepSignalId) {
		toSerialize["stepSignalId"] = o.StepSignalId
	}
	if !isNil(o.SignalReceived) {
		toSerialize["signalReceived"] = o.SignalReceived
	}
	return toSerialize, nil
}

type NullableKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse struct {
	value *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse
	isSet bool
}

func (v NullableKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) Get() *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse {
	return v.value
}

func (v *NullableKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) Set(val *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse(val *KeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) *NullableKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse {
	return &NullableKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse{value: val, isSet: true}
}

func (v NullableKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorWebKeyfactorApiModelsWorkflowsAvailableSignalResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
