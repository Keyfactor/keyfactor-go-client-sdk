/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest{}

// KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest struct for KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest
type KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest struct {
	KeystoreId           *string                `json:"keystoreId,omitempty"`
	SubjectName          NullableString         `json:"subjectName,omitempty"`
	AgentGuid            *string                `json:"agentGuid,omitempty"`
	Alias                NullableString         `json:"alias,omitempty"`
	JobProperties        map[string]interface{} `json:"jobProperties,omitempty"`
	CertificateAuthority NullableString         `json:"certificateAuthority,omitempty"`
	CertificateTemplate  NullableString         `json:"certificateTemplate,omitempty"`
}

// NewKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest instantiates a new KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest() *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest {
	this := KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest{}
	return &this
}

// NewKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequestWithDefaults instantiates a new KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequestWithDefaults() *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest {
	this := KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest{}
	return &this
}

// GetKeystoreId returns the KeystoreId field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetKeystoreId() string {
	if o == nil || isNil(o.KeystoreId) {
		var ret string
		return ret
	}
	return *o.KeystoreId
}

// GetKeystoreIdOk returns a tuple with the KeystoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetKeystoreIdOk() (*string, bool) {
	if o == nil || isNil(o.KeystoreId) {
		return nil, false
	}
	return o.KeystoreId, true
}

// HasKeystoreId returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) HasKeystoreId() bool {
	if o != nil && !isNil(o.KeystoreId) {
		return true
	}

	return false
}

// SetKeystoreId gets a reference to the given string and assigns it to the KeystoreId field.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetKeystoreId(v string) {
	o.KeystoreId = &v
}

// GetSubjectName returns the SubjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetSubjectName() string {
	if o == nil || isNil(o.SubjectName.Get()) {
		var ret string
		return ret
	}
	return *o.SubjectName.Get()
}

// GetSubjectNameOk returns a tuple with the SubjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetSubjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubjectName.Get(), o.SubjectName.IsSet()
}

// HasSubjectName returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) HasSubjectName() bool {
	if o != nil && o.SubjectName.IsSet() {
		return true
	}

	return false
}

// SetSubjectName gets a reference to the given NullableString and assigns it to the SubjectName field.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetSubjectName(v string) {
	o.SubjectName.Set(&v)
}

// SetSubjectNameNil sets the value for SubjectName to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetSubjectNameNil() {
	o.SubjectName.Set(nil)
}

// UnsetSubjectName ensures that no value is present for SubjectName, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) UnsetSubjectName() {
	o.SubjectName.Unset()
}

// GetAgentGuid returns the AgentGuid field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetAgentGuid() string {
	if o == nil || isNil(o.AgentGuid) {
		var ret string
		return ret
	}
	return *o.AgentGuid
}

// GetAgentGuidOk returns a tuple with the AgentGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetAgentGuidOk() (*string, bool) {
	if o == nil || isNil(o.AgentGuid) {
		return nil, false
	}
	return o.AgentGuid, true
}

// HasAgentGuid returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) HasAgentGuid() bool {
	if o != nil && !isNil(o.AgentGuid) {
		return true
	}

	return false
}

// SetAgentGuid gets a reference to the given string and assigns it to the AgentGuid field.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetAgentGuid(v string) {
	o.AgentGuid = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetAlias() string {
	if o == nil || isNil(o.Alias.Get()) {
		var ret string
		return ret
	}
	return *o.Alias.Get()
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alias.Get(), o.Alias.IsSet()
}

// HasAlias returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) HasAlias() bool {
	if o != nil && o.Alias.IsSet() {
		return true
	}

	return false
}

// SetAlias gets a reference to the given NullableString and assigns it to the Alias field.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetAlias(v string) {
	o.Alias.Set(&v)
}

// SetAliasNil sets the value for Alias to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetAliasNil() {
	o.Alias.Set(nil)
}

// UnsetAlias ensures that no value is present for Alias, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) UnsetAlias() {
	o.Alias.Unset()
}

// GetJobProperties returns the JobProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetJobProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.JobProperties
}

// GetJobPropertiesOk returns a tuple with the JobProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetJobPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.JobProperties) {
		return map[string]interface{}{}, false
	}
	return o.JobProperties, true
}

// HasJobProperties returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) HasJobProperties() bool {
	if o != nil && isNil(o.JobProperties) {
		return true
	}

	return false
}

// SetJobProperties gets a reference to the given map[string]interface{} and assigns it to the JobProperties field.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetJobProperties(v map[string]interface{}) {
	o.JobProperties = v
}

// GetCertificateAuthority returns the CertificateAuthority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetCertificateAuthority() string {
	if o == nil || isNil(o.CertificateAuthority.Get()) {
		var ret string
		return ret
	}
	return *o.CertificateAuthority.Get()
}

// GetCertificateAuthorityOk returns a tuple with the CertificateAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetCertificateAuthorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateAuthority.Get(), o.CertificateAuthority.IsSet()
}

// HasCertificateAuthority returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) HasCertificateAuthority() bool {
	if o != nil && o.CertificateAuthority.IsSet() {
		return true
	}

	return false
}

// SetCertificateAuthority gets a reference to the given NullableString and assigns it to the CertificateAuthority field.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetCertificateAuthority(v string) {
	o.CertificateAuthority.Set(&v)
}

// SetCertificateAuthorityNil sets the value for CertificateAuthority to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetCertificateAuthorityNil() {
	o.CertificateAuthority.Set(nil)
}

// UnsetCertificateAuthority ensures that no value is present for CertificateAuthority, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) UnsetCertificateAuthority() {
	o.CertificateAuthority.Unset()
}

// GetCertificateTemplate returns the CertificateTemplate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetCertificateTemplate() string {
	if o == nil || isNil(o.CertificateTemplate.Get()) {
		var ret string
		return ret
	}
	return *o.CertificateTemplate.Get()
}

// GetCertificateTemplateOk returns a tuple with the CertificateTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) GetCertificateTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateTemplate.Get(), o.CertificateTemplate.IsSet()
}

// HasCertificateTemplate returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) HasCertificateTemplate() bool {
	if o != nil && o.CertificateTemplate.IsSet() {
		return true
	}

	return false
}

// SetCertificateTemplate gets a reference to the given NullableString and assigns it to the CertificateTemplate field.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetCertificateTemplate(v string) {
	o.CertificateTemplate.Set(&v)
}

// SetCertificateTemplateNil sets the value for CertificateTemplate to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) SetCertificateTemplateNil() {
	o.CertificateTemplate.Set(nil)
}

// UnsetCertificateTemplate ensures that no value is present for CertificateTemplate, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) UnsetCertificateTemplate() {
	o.CertificateTemplate.Unset()
}

func (o KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.KeystoreId) {
		toSerialize["keystoreId"] = o.KeystoreId
	}
	if o.SubjectName.IsSet() {
		toSerialize["subjectName"] = o.SubjectName.Get()
	}
	if !isNil(o.AgentGuid) {
		toSerialize["agentGuid"] = o.AgentGuid
	}
	if o.Alias.IsSet() {
		toSerialize["alias"] = o.Alias.Get()
	}
	if o.JobProperties != nil {
		toSerialize["jobProperties"] = o.JobProperties
	}
	if o.CertificateAuthority.IsSet() {
		toSerialize["certificateAuthority"] = o.CertificateAuthority.Get()
	}
	if o.CertificateTemplate.IsSet() {
		toSerialize["certificateTemplate"] = o.CertificateTemplate.Get()
	}
	return toSerialize, nil
}

type NullableKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest struct {
	value *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest
	isSet bool
}

func (v NullableKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) Get() *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest {
	return v.value
}

func (v *NullableKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) Set(val *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest(val *KeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) *NullableKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest {
	return &NullableKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest{value: val, isSet: true}
}

func (v NullableKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorWebKeyfactorApiModelsCertificateStoresReenrollmentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
