/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the CSSCMSDataModelModelsCertStoreTypeSupportedOperations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSSCMSDataModelModelsCertStoreTypeSupportedOperations{}

// CSSCMSDataModelModelsCertStoreTypeSupportedOperations struct for CSSCMSDataModelModelsCertStoreTypeSupportedOperations
type CSSCMSDataModelModelsCertStoreTypeSupportedOperations struct {
	Add        *bool `json:"add,omitempty"`
	Create     *bool `json:"create,omitempty"`
	Discovery  *bool `json:"discovery,omitempty"`
	Enrollment *bool `json:"enrollment,omitempty"`
	Remove     *bool `json:"remove,omitempty"`
}

// NewCSSCMSDataModelModelsCertStoreTypeSupportedOperations instantiates a new CSSCMSDataModelModelsCertStoreTypeSupportedOperations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSSCMSDataModelModelsCertStoreTypeSupportedOperations() *CSSCMSDataModelModelsCertStoreTypeSupportedOperations {
	this := CSSCMSDataModelModelsCertStoreTypeSupportedOperations{}
	return &this
}

// NewCSSCMSDataModelModelsCertStoreTypeSupportedOperationsWithDefaults instantiates a new CSSCMSDataModelModelsCertStoreTypeSupportedOperations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSSCMSDataModelModelsCertStoreTypeSupportedOperationsWithDefaults() *CSSCMSDataModelModelsCertStoreTypeSupportedOperations {
	this := CSSCMSDataModelModelsCertStoreTypeSupportedOperations{}
	return &this
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) GetAdd() bool {
	if o == nil || isNil(o.Add) {
		var ret bool
		return ret
	}
	return *o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) GetAddOk() (*bool, bool) {
	if o == nil || isNil(o.Add) {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) HasAdd() bool {
	if o != nil && !isNil(o.Add) {
		return true
	}

	return false
}

// SetAdd gets a reference to the given bool and assigns it to the Add field.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) SetAdd(v bool) {
	o.Add = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) GetCreate() bool {
	if o == nil || isNil(o.Create) {
		var ret bool
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) GetCreateOk() (*bool, bool) {
	if o == nil || isNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) HasCreate() bool {
	if o != nil && !isNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given bool and assigns it to the Create field.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) SetCreate(v bool) {
	o.Create = &v
}

// GetDiscovery returns the Discovery field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) GetDiscovery() bool {
	if o == nil || isNil(o.Discovery) {
		var ret bool
		return ret
	}
	return *o.Discovery
}

// GetDiscoveryOk returns a tuple with the Discovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) GetDiscoveryOk() (*bool, bool) {
	if o == nil || isNil(o.Discovery) {
		return nil, false
	}
	return o.Discovery, true
}

// HasDiscovery returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) HasDiscovery() bool {
	if o != nil && !isNil(o.Discovery) {
		return true
	}

	return false
}

// SetDiscovery gets a reference to the given bool and assigns it to the Discovery field.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) SetDiscovery(v bool) {
	o.Discovery = &v
}

// GetEnrollment returns the Enrollment field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) GetEnrollment() bool {
	if o == nil || isNil(o.Enrollment) {
		var ret bool
		return ret
	}
	return *o.Enrollment
}

// GetEnrollmentOk returns a tuple with the Enrollment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) GetEnrollmentOk() (*bool, bool) {
	if o == nil || isNil(o.Enrollment) {
		return nil, false
	}
	return o.Enrollment, true
}

// HasEnrollment returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) HasEnrollment() bool {
	if o != nil && !isNil(o.Enrollment) {
		return true
	}

	return false
}

// SetEnrollment gets a reference to the given bool and assigns it to the Enrollment field.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) SetEnrollment(v bool) {
	o.Enrollment = &v
}

// GetRemove returns the Remove field value if set, zero value otherwise.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) GetRemove() bool {
	if o == nil || isNil(o.Remove) {
		var ret bool
		return ret
	}
	return *o.Remove
}

// GetRemoveOk returns a tuple with the Remove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) GetRemoveOk() (*bool, bool) {
	if o == nil || isNil(o.Remove) {
		return nil, false
	}
	return o.Remove, true
}

// HasRemove returns a boolean if a field has been set.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) HasRemove() bool {
	if o != nil && !isNil(o.Remove) {
		return true
	}

	return false
}

// SetRemove gets a reference to the given bool and assigns it to the Remove field.
func (o *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) SetRemove(v bool) {
	o.Remove = &v
}

func (o CSSCMSDataModelModelsCertStoreTypeSupportedOperations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSSCMSDataModelModelsCertStoreTypeSupportedOperations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Add) {
		toSerialize["add"] = o.Add
	}
	if !isNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !isNil(o.Discovery) {
		toSerialize["discovery"] = o.Discovery
	}
	if !isNil(o.Enrollment) {
		toSerialize["enrollment"] = o.Enrollment
	}
	if !isNil(o.Remove) {
		toSerialize["remove"] = o.Remove
	}
	return toSerialize, nil
}

type NullableCSSCMSDataModelModelsCertStoreTypeSupportedOperations struct {
	value *CSSCMSDataModelModelsCertStoreTypeSupportedOperations
	isSet bool
}

func (v NullableCSSCMSDataModelModelsCertStoreTypeSupportedOperations) Get() *CSSCMSDataModelModelsCertStoreTypeSupportedOperations {
	return v.value
}

func (v *NullableCSSCMSDataModelModelsCertStoreTypeSupportedOperations) Set(val *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelModelsCertStoreTypeSupportedOperations) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelModelsCertStoreTypeSupportedOperations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelModelsCertStoreTypeSupportedOperations(val *CSSCMSDataModelModelsCertStoreTypeSupportedOperations) *NullableCSSCMSDataModelModelsCertStoreTypeSupportedOperations {
	return &NullableCSSCMSDataModelModelsCertStoreTypeSupportedOperations{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelModelsCertStoreTypeSupportedOperations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelModelsCertStoreTypeSupportedOperations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
