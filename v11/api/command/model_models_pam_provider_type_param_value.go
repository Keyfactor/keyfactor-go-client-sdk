/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsPamProviderTypeParamValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsPamProviderTypeParamValue{}

// ModelsPamProviderTypeParamValue struct for ModelsPamProviderTypeParamValue
type ModelsPamProviderTypeParamValue struct {
	Id                *int32                   `json:"id,omitempty"`
	Value             NullableString           `json:"value,omitempty"`
	InstanceId        NullableInt32            `json:"instanceId,omitempty"`
	InstanceGuid      NullableString           `json:"instanceGuid,omitempty"`
	Provider          *ModelsProvider          `json:"provider,omitempty"`
	ProviderTypeParam *ModelsProviderTypeParam `json:"providerTypeParam,omitempty"`
}

// NewModelsPamProviderTypeParamValue instantiates a new ModelsPamProviderTypeParamValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsPamProviderTypeParamValue() *ModelsPamProviderTypeParamValue {
	this := ModelsPamProviderTypeParamValue{}
	return &this
}

// NewModelsPamProviderTypeParamValueWithDefaults instantiates a new ModelsPamProviderTypeParamValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsPamProviderTypeParamValueWithDefaults() *ModelsPamProviderTypeParamValue {
	this := ModelsPamProviderTypeParamValue{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsPamProviderTypeParamValue) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPamProviderTypeParamValue) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsPamProviderTypeParamValue) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsPamProviderTypeParamValue) SetId(v int32) {
	o.Id = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsPamProviderTypeParamValue) GetValue() string {
	if o == nil || isNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsPamProviderTypeParamValue) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *ModelsPamProviderTypeParamValue) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *ModelsPamProviderTypeParamValue) SetValue(v string) {
	o.Value.Set(&v)
}

// SetValueNil sets the value for Value to be an explicit nil
func (o *ModelsPamProviderTypeParamValue) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *ModelsPamProviderTypeParamValue) UnsetValue() {
	o.Value.Unset()
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsPamProviderTypeParamValue) GetInstanceId() int32 {
	if o == nil || isNil(o.InstanceId.Get()) {
		var ret int32
		return ret
	}
	return *o.InstanceId.Get()
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsPamProviderTypeParamValue) GetInstanceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceId.Get(), o.InstanceId.IsSet()
}

// HasInstanceId returns a boolean if a field has been set.
func (o *ModelsPamProviderTypeParamValue) HasInstanceId() bool {
	if o != nil && o.InstanceId.IsSet() {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given NullableInt32 and assigns it to the InstanceId field.
func (o *ModelsPamProviderTypeParamValue) SetInstanceId(v int32) {
	o.InstanceId.Set(&v)
}

// SetInstanceIdNil sets the value for InstanceId to be an explicit nil
func (o *ModelsPamProviderTypeParamValue) SetInstanceIdNil() {
	o.InstanceId.Set(nil)
}

// UnsetInstanceId ensures that no value is present for InstanceId, not even an explicit nil
func (o *ModelsPamProviderTypeParamValue) UnsetInstanceId() {
	o.InstanceId.Unset()
}

// GetInstanceGuid returns the InstanceGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsPamProviderTypeParamValue) GetInstanceGuid() string {
	if o == nil || isNil(o.InstanceGuid.Get()) {
		var ret string
		return ret
	}
	return *o.InstanceGuid.Get()
}

// GetInstanceGuidOk returns a tuple with the InstanceGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsPamProviderTypeParamValue) GetInstanceGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceGuid.Get(), o.InstanceGuid.IsSet()
}

// HasInstanceGuid returns a boolean if a field has been set.
func (o *ModelsPamProviderTypeParamValue) HasInstanceGuid() bool {
	if o != nil && o.InstanceGuid.IsSet() {
		return true
	}

	return false
}

// SetInstanceGuid gets a reference to the given NullableString and assigns it to the InstanceGuid field.
func (o *ModelsPamProviderTypeParamValue) SetInstanceGuid(v string) {
	o.InstanceGuid.Set(&v)
}

// SetInstanceGuidNil sets the value for InstanceGuid to be an explicit nil
func (o *ModelsPamProviderTypeParamValue) SetInstanceGuidNil() {
	o.InstanceGuid.Set(nil)
}

// UnsetInstanceGuid ensures that no value is present for InstanceGuid, not even an explicit nil
func (o *ModelsPamProviderTypeParamValue) UnsetInstanceGuid() {
	o.InstanceGuid.Unset()
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *ModelsPamProviderTypeParamValue) GetProvider() ModelsProvider {
	if o == nil || isNil(o.Provider) {
		var ret ModelsProvider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPamProviderTypeParamValue) GetProviderOk() (*ModelsProvider, bool) {
	if o == nil || isNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *ModelsPamProviderTypeParamValue) HasProvider() bool {
	if o != nil && !isNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given ModelsProvider and assigns it to the Provider field.
func (o *ModelsPamProviderTypeParamValue) SetProvider(v ModelsProvider) {
	o.Provider = &v
}

// GetProviderTypeParam returns the ProviderTypeParam field value if set, zero value otherwise.
func (o *ModelsPamProviderTypeParamValue) GetProviderTypeParam() ModelsProviderTypeParam {
	if o == nil || isNil(o.ProviderTypeParam) {
		var ret ModelsProviderTypeParam
		return ret
	}
	return *o.ProviderTypeParam
}

// GetProviderTypeParamOk returns a tuple with the ProviderTypeParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPamProviderTypeParamValue) GetProviderTypeParamOk() (*ModelsProviderTypeParam, bool) {
	if o == nil || isNil(o.ProviderTypeParam) {
		return nil, false
	}
	return o.ProviderTypeParam, true
}

// HasProviderTypeParam returns a boolean if a field has been set.
func (o *ModelsPamProviderTypeParamValue) HasProviderTypeParam() bool {
	if o != nil && !isNil(o.ProviderTypeParam) {
		return true
	}

	return false
}

// SetProviderTypeParam gets a reference to the given ModelsProviderTypeParam and assigns it to the ProviderTypeParam field.
func (o *ModelsPamProviderTypeParamValue) SetProviderTypeParam(v ModelsProviderTypeParam) {
	o.ProviderTypeParam = &v
}

func (o ModelsPamProviderTypeParamValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsPamProviderTypeParamValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.InstanceId.IsSet() {
		toSerialize["instanceId"] = o.InstanceId.Get()
	}
	if o.InstanceGuid.IsSet() {
		toSerialize["instanceGuid"] = o.InstanceGuid.Get()
	}
	if !isNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !isNil(o.ProviderTypeParam) {
		toSerialize["providerTypeParam"] = o.ProviderTypeParam
	}
	return toSerialize, nil
}

type NullableModelsPamProviderTypeParamValue struct {
	value *ModelsPamProviderTypeParamValue
	isSet bool
}

func (v NullableModelsPamProviderTypeParamValue) Get() *ModelsPamProviderTypeParamValue {
	return v.value
}

func (v *NullableModelsPamProviderTypeParamValue) Set(val *ModelsPamProviderTypeParamValue) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsPamProviderTypeParamValue) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsPamProviderTypeParamValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsPamProviderTypeParamValue(val *ModelsPamProviderTypeParamValue) *NullableModelsPamProviderTypeParamValue {
	return &NullableModelsPamProviderTypeParamValue{value: val, isSet: true}
}

func (v NullableModelsPamProviderTypeParamValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsPamProviderTypeParamValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
