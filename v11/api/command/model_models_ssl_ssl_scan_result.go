/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsSSLSslScanResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsSSLSslScanResult{}

// ModelsSSLSslScanResult struct for ModelsSSLSslScanResult
type ModelsSSLSslScanResult struct {
	EndpointId       *string        `json:"endpointId,omitempty"`
	ReverseDNS       NullableString `json:"reverseDNS,omitempty"`
	SniName          NullableString `json:"sniName,omitempty"`
	IpAddress        NullableString `json:"ipAddress,omitempty"`
	Port             *int32         `json:"port,omitempty"`
	CertificateFound *bool          `json:"certificateFound,omitempty"`
	AgentPoolName    NullableString `json:"agentPoolName,omitempty"`
	NetworkName      NullableString `json:"networkName,omitempty"`
	MonitorStatus    *bool          `json:"monitorStatus,omitempty"`
	CertificateCN    NullableString `json:"certificateCN,omitempty"`
	Reviewed         *bool          `json:"reviewed,omitempty"`
}

// NewModelsSSLSslScanResult instantiates a new ModelsSSLSslScanResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsSSLSslScanResult() *ModelsSSLSslScanResult {
	this := ModelsSSLSslScanResult{}
	return &this
}

// NewModelsSSLSslScanResultWithDefaults instantiates a new ModelsSSLSslScanResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsSSLSslScanResultWithDefaults() *ModelsSSLSslScanResult {
	this := ModelsSSLSslScanResult{}
	return &this
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *ModelsSSLSslScanResult) GetEndpointId() string {
	if o == nil || isNil(o.EndpointId) {
		var ret string
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSSLSslScanResult) GetEndpointIdOk() (*string, bool) {
	if o == nil || isNil(o.EndpointId) {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasEndpointId() bool {
	if o != nil && !isNil(o.EndpointId) {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given string and assigns it to the EndpointId field.
func (o *ModelsSSLSslScanResult) SetEndpointId(v string) {
	o.EndpointId = &v
}

// GetReverseDNS returns the ReverseDNS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsSSLSslScanResult) GetReverseDNS() string {
	if o == nil || isNil(o.ReverseDNS.Get()) {
		var ret string
		return ret
	}
	return *o.ReverseDNS.Get()
}

// GetReverseDNSOk returns a tuple with the ReverseDNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsSSLSslScanResult) GetReverseDNSOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReverseDNS.Get(), o.ReverseDNS.IsSet()
}

// HasReverseDNS returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasReverseDNS() bool {
	if o != nil && o.ReverseDNS.IsSet() {
		return true
	}

	return false
}

// SetReverseDNS gets a reference to the given NullableString and assigns it to the ReverseDNS field.
func (o *ModelsSSLSslScanResult) SetReverseDNS(v string) {
	o.ReverseDNS.Set(&v)
}

// SetReverseDNSNil sets the value for ReverseDNS to be an explicit nil
func (o *ModelsSSLSslScanResult) SetReverseDNSNil() {
	o.ReverseDNS.Set(nil)
}

// UnsetReverseDNS ensures that no value is present for ReverseDNS, not even an explicit nil
func (o *ModelsSSLSslScanResult) UnsetReverseDNS() {
	o.ReverseDNS.Unset()
}

// GetSniName returns the SniName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsSSLSslScanResult) GetSniName() string {
	if o == nil || isNil(o.SniName.Get()) {
		var ret string
		return ret
	}
	return *o.SniName.Get()
}

// GetSniNameOk returns a tuple with the SniName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsSSLSslScanResult) GetSniNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SniName.Get(), o.SniName.IsSet()
}

// HasSniName returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasSniName() bool {
	if o != nil && o.SniName.IsSet() {
		return true
	}

	return false
}

// SetSniName gets a reference to the given NullableString and assigns it to the SniName field.
func (o *ModelsSSLSslScanResult) SetSniName(v string) {
	o.SniName.Set(&v)
}

// SetSniNameNil sets the value for SniName to be an explicit nil
func (o *ModelsSSLSslScanResult) SetSniNameNil() {
	o.SniName.Set(nil)
}

// UnsetSniName ensures that no value is present for SniName, not even an explicit nil
func (o *ModelsSSLSslScanResult) UnsetSniName() {
	o.SniName.Unset()
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsSSLSslScanResult) GetIpAddress() string {
	if o == nil || isNil(o.IpAddress.Get()) {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsSSLSslScanResult) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *ModelsSSLSslScanResult) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}

// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *ModelsSSLSslScanResult) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *ModelsSSLSslScanResult) UnsetIpAddress() {
	o.IpAddress.Unset()
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *ModelsSSLSslScanResult) GetPort() int32 {
	if o == nil || isNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSSLSslScanResult) GetPortOk() (*int32, bool) {
	if o == nil || isNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasPort() bool {
	if o != nil && !isNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *ModelsSSLSslScanResult) SetPort(v int32) {
	o.Port = &v
}

// GetCertificateFound returns the CertificateFound field value if set, zero value otherwise.
func (o *ModelsSSLSslScanResult) GetCertificateFound() bool {
	if o == nil || isNil(o.CertificateFound) {
		var ret bool
		return ret
	}
	return *o.CertificateFound
}

// GetCertificateFoundOk returns a tuple with the CertificateFound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSSLSslScanResult) GetCertificateFoundOk() (*bool, bool) {
	if o == nil || isNil(o.CertificateFound) {
		return nil, false
	}
	return o.CertificateFound, true
}

// HasCertificateFound returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasCertificateFound() bool {
	if o != nil && !isNil(o.CertificateFound) {
		return true
	}

	return false
}

// SetCertificateFound gets a reference to the given bool and assigns it to the CertificateFound field.
func (o *ModelsSSLSslScanResult) SetCertificateFound(v bool) {
	o.CertificateFound = &v
}

// GetAgentPoolName returns the AgentPoolName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsSSLSslScanResult) GetAgentPoolName() string {
	if o == nil || isNil(o.AgentPoolName.Get()) {
		var ret string
		return ret
	}
	return *o.AgentPoolName.Get()
}

// GetAgentPoolNameOk returns a tuple with the AgentPoolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsSSLSslScanResult) GetAgentPoolNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgentPoolName.Get(), o.AgentPoolName.IsSet()
}

// HasAgentPoolName returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasAgentPoolName() bool {
	if o != nil && o.AgentPoolName.IsSet() {
		return true
	}

	return false
}

// SetAgentPoolName gets a reference to the given NullableString and assigns it to the AgentPoolName field.
func (o *ModelsSSLSslScanResult) SetAgentPoolName(v string) {
	o.AgentPoolName.Set(&v)
}

// SetAgentPoolNameNil sets the value for AgentPoolName to be an explicit nil
func (o *ModelsSSLSslScanResult) SetAgentPoolNameNil() {
	o.AgentPoolName.Set(nil)
}

// UnsetAgentPoolName ensures that no value is present for AgentPoolName, not even an explicit nil
func (o *ModelsSSLSslScanResult) UnsetAgentPoolName() {
	o.AgentPoolName.Unset()
}

// GetNetworkName returns the NetworkName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsSSLSslScanResult) GetNetworkName() string {
	if o == nil || isNil(o.NetworkName.Get()) {
		var ret string
		return ret
	}
	return *o.NetworkName.Get()
}

// GetNetworkNameOk returns a tuple with the NetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsSSLSslScanResult) GetNetworkNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkName.Get(), o.NetworkName.IsSet()
}

// HasNetworkName returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasNetworkName() bool {
	if o != nil && o.NetworkName.IsSet() {
		return true
	}

	return false
}

// SetNetworkName gets a reference to the given NullableString and assigns it to the NetworkName field.
func (o *ModelsSSLSslScanResult) SetNetworkName(v string) {
	o.NetworkName.Set(&v)
}

// SetNetworkNameNil sets the value for NetworkName to be an explicit nil
func (o *ModelsSSLSslScanResult) SetNetworkNameNil() {
	o.NetworkName.Set(nil)
}

// UnsetNetworkName ensures that no value is present for NetworkName, not even an explicit nil
func (o *ModelsSSLSslScanResult) UnsetNetworkName() {
	o.NetworkName.Unset()
}

// GetMonitorStatus returns the MonitorStatus field value if set, zero value otherwise.
func (o *ModelsSSLSslScanResult) GetMonitorStatus() bool {
	if o == nil || isNil(o.MonitorStatus) {
		var ret bool
		return ret
	}
	return *o.MonitorStatus
}

// GetMonitorStatusOk returns a tuple with the MonitorStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSSLSslScanResult) GetMonitorStatusOk() (*bool, bool) {
	if o == nil || isNil(o.MonitorStatus) {
		return nil, false
	}
	return o.MonitorStatus, true
}

// HasMonitorStatus returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasMonitorStatus() bool {
	if o != nil && !isNil(o.MonitorStatus) {
		return true
	}

	return false
}

// SetMonitorStatus gets a reference to the given bool and assigns it to the MonitorStatus field.
func (o *ModelsSSLSslScanResult) SetMonitorStatus(v bool) {
	o.MonitorStatus = &v
}

// GetCertificateCN returns the CertificateCN field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsSSLSslScanResult) GetCertificateCN() string {
	if o == nil || isNil(o.CertificateCN.Get()) {
		var ret string
		return ret
	}
	return *o.CertificateCN.Get()
}

// GetCertificateCNOk returns a tuple with the CertificateCN field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsSSLSslScanResult) GetCertificateCNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateCN.Get(), o.CertificateCN.IsSet()
}

// HasCertificateCN returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasCertificateCN() bool {
	if o != nil && o.CertificateCN.IsSet() {
		return true
	}

	return false
}

// SetCertificateCN gets a reference to the given NullableString and assigns it to the CertificateCN field.
func (o *ModelsSSLSslScanResult) SetCertificateCN(v string) {
	o.CertificateCN.Set(&v)
}

// SetCertificateCNNil sets the value for CertificateCN to be an explicit nil
func (o *ModelsSSLSslScanResult) SetCertificateCNNil() {
	o.CertificateCN.Set(nil)
}

// UnsetCertificateCN ensures that no value is present for CertificateCN, not even an explicit nil
func (o *ModelsSSLSslScanResult) UnsetCertificateCN() {
	o.CertificateCN.Unset()
}

// GetReviewed returns the Reviewed field value if set, zero value otherwise.
func (o *ModelsSSLSslScanResult) GetReviewed() bool {
	if o == nil || isNil(o.Reviewed) {
		var ret bool
		return ret
	}
	return *o.Reviewed
}

// GetReviewedOk returns a tuple with the Reviewed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSSLSslScanResult) GetReviewedOk() (*bool, bool) {
	if o == nil || isNil(o.Reviewed) {
		return nil, false
	}
	return o.Reviewed, true
}

// HasReviewed returns a boolean if a field has been set.
func (o *ModelsSSLSslScanResult) HasReviewed() bool {
	if o != nil && !isNil(o.Reviewed) {
		return true
	}

	return false
}

// SetReviewed gets a reference to the given bool and assigns it to the Reviewed field.
func (o *ModelsSSLSslScanResult) SetReviewed(v bool) {
	o.Reviewed = &v
}

func (o ModelsSSLSslScanResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsSSLSslScanResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EndpointId) {
		toSerialize["endpointId"] = o.EndpointId
	}
	if o.ReverseDNS.IsSet() {
		toSerialize["reverseDNS"] = o.ReverseDNS.Get()
	}
	if o.SniName.IsSet() {
		toSerialize["sniName"] = o.SniName.Get()
	}
	if o.IpAddress.IsSet() {
		toSerialize["ipAddress"] = o.IpAddress.Get()
	}
	if !isNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !isNil(o.CertificateFound) {
		toSerialize["certificateFound"] = o.CertificateFound
	}
	if o.AgentPoolName.IsSet() {
		toSerialize["agentPoolName"] = o.AgentPoolName.Get()
	}
	if o.NetworkName.IsSet() {
		toSerialize["networkName"] = o.NetworkName.Get()
	}
	if !isNil(o.MonitorStatus) {
		toSerialize["monitorStatus"] = o.MonitorStatus
	}
	if o.CertificateCN.IsSet() {
		toSerialize["certificateCN"] = o.CertificateCN.Get()
	}
	if !isNil(o.Reviewed) {
		toSerialize["reviewed"] = o.Reviewed
	}
	return toSerialize, nil
}

type NullableModelsSSLSslScanResult struct {
	value *ModelsSSLSslScanResult
	isSet bool
}

func (v NullableModelsSSLSslScanResult) Get() *ModelsSSLSslScanResult {
	return v.value
}

func (v *NullableModelsSSLSslScanResult) Set(val *ModelsSSLSslScanResult) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsSSLSslScanResult) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsSSLSslScanResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsSSLSslScanResult(val *ModelsSSLSslScanResult) *NullableModelsSSLSslScanResult {
	return &NullableModelsSSLSslScanResult{value: val, isSet: true}
}

func (v NullableModelsSSLSslScanResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsSSLSslScanResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
