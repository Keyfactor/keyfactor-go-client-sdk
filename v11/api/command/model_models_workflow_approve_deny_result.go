/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsWorkflowApproveDenyResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsWorkflowApproveDenyResult{}

// ModelsWorkflowApproveDenyResult struct for ModelsWorkflowApproveDenyResult
type ModelsWorkflowApproveDenyResult struct {
	Failures  []ModelsWorkflowProcessedCertificateRequest `json:"failures,omitempty"`
	Denials   []ModelsWorkflowProcessedCertificateRequest `json:"denials,omitempty"`
	Successes []ModelsWorkflowProcessedCertificateRequest `json:"successes,omitempty"`
}

// NewModelsWorkflowApproveDenyResult instantiates a new ModelsWorkflowApproveDenyResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsWorkflowApproveDenyResult() *ModelsWorkflowApproveDenyResult {
	this := ModelsWorkflowApproveDenyResult{}
	return &this
}

// NewModelsWorkflowApproveDenyResultWithDefaults instantiates a new ModelsWorkflowApproveDenyResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsWorkflowApproveDenyResultWithDefaults() *ModelsWorkflowApproveDenyResult {
	this := ModelsWorkflowApproveDenyResult{}
	return &this
}

// GetFailures returns the Failures field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowApproveDenyResult) GetFailures() []ModelsWorkflowProcessedCertificateRequest {
	if o == nil {
		var ret []ModelsWorkflowProcessedCertificateRequest
		return ret
	}
	return o.Failures
}

// GetFailuresOk returns a tuple with the Failures field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowApproveDenyResult) GetFailuresOk() ([]ModelsWorkflowProcessedCertificateRequest, bool) {
	if o == nil || isNil(o.Failures) {
		return nil, false
	}
	return o.Failures, true
}

// HasFailures returns a boolean if a field has been set.
func (o *ModelsWorkflowApproveDenyResult) HasFailures() bool {
	if o != nil && isNil(o.Failures) {
		return true
	}

	return false
}

// SetFailures gets a reference to the given []ModelsWorkflowProcessedCertificateRequest and assigns it to the Failures field.
func (o *ModelsWorkflowApproveDenyResult) SetFailures(v []ModelsWorkflowProcessedCertificateRequest) {
	o.Failures = v
}

// GetDenials returns the Denials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowApproveDenyResult) GetDenials() []ModelsWorkflowProcessedCertificateRequest {
	if o == nil {
		var ret []ModelsWorkflowProcessedCertificateRequest
		return ret
	}
	return o.Denials
}

// GetDenialsOk returns a tuple with the Denials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowApproveDenyResult) GetDenialsOk() ([]ModelsWorkflowProcessedCertificateRequest, bool) {
	if o == nil || isNil(o.Denials) {
		return nil, false
	}
	return o.Denials, true
}

// HasDenials returns a boolean if a field has been set.
func (o *ModelsWorkflowApproveDenyResult) HasDenials() bool {
	if o != nil && isNil(o.Denials) {
		return true
	}

	return false
}

// SetDenials gets a reference to the given []ModelsWorkflowProcessedCertificateRequest and assigns it to the Denials field.
func (o *ModelsWorkflowApproveDenyResult) SetDenials(v []ModelsWorkflowProcessedCertificateRequest) {
	o.Denials = v
}

// GetSuccesses returns the Successes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsWorkflowApproveDenyResult) GetSuccesses() []ModelsWorkflowProcessedCertificateRequest {
	if o == nil {
		var ret []ModelsWorkflowProcessedCertificateRequest
		return ret
	}
	return o.Successes
}

// GetSuccessesOk returns a tuple with the Successes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsWorkflowApproveDenyResult) GetSuccessesOk() ([]ModelsWorkflowProcessedCertificateRequest, bool) {
	if o == nil || isNil(o.Successes) {
		return nil, false
	}
	return o.Successes, true
}

// HasSuccesses returns a boolean if a field has been set.
func (o *ModelsWorkflowApproveDenyResult) HasSuccesses() bool {
	if o != nil && isNil(o.Successes) {
		return true
	}

	return false
}

// SetSuccesses gets a reference to the given []ModelsWorkflowProcessedCertificateRequest and assigns it to the Successes field.
func (o *ModelsWorkflowApproveDenyResult) SetSuccesses(v []ModelsWorkflowProcessedCertificateRequest) {
	o.Successes = v
}

func (o ModelsWorkflowApproveDenyResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsWorkflowApproveDenyResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Failures != nil {
		toSerialize["failures"] = o.Failures
	}
	if o.Denials != nil {
		toSerialize["denials"] = o.Denials
	}
	if o.Successes != nil {
		toSerialize["successes"] = o.Successes
	}
	return toSerialize, nil
}

type NullableModelsWorkflowApproveDenyResult struct {
	value *ModelsWorkflowApproveDenyResult
	isSet bool
}

func (v NullableModelsWorkflowApproveDenyResult) Get() *ModelsWorkflowApproveDenyResult {
	return v.value
}

func (v *NullableModelsWorkflowApproveDenyResult) Set(val *ModelsWorkflowApproveDenyResult) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsWorkflowApproveDenyResult) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsWorkflowApproveDenyResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsWorkflowApproveDenyResult(val *ModelsWorkflowApproveDenyResult) *NullableModelsWorkflowApproveDenyResult {
	return &NullableModelsWorkflowApproveDenyResult{value: val, isSet: true}
}

func (v NullableModelsWorkflowApproveDenyResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsWorkflowApproveDenyResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
