/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"fmt"
)

// CSSCMSCoreEnumsDuplicateSubjectType the model 'CSSCMSCoreEnumsDuplicateSubjectType'
type CSSCMSCoreEnumsDuplicateSubjectType int32

// List of CSS.CMS.Core.Enums.DuplicateSubjectType
const (
	_0 CSSCMSCoreEnumsDuplicateSubjectType = 0
	_1 CSSCMSCoreEnumsDuplicateSubjectType = 1
	_2 CSSCMSCoreEnumsDuplicateSubjectType = 2
	_3 CSSCMSCoreEnumsDuplicateSubjectType = 3
	_4 CSSCMSCoreEnumsDuplicateSubjectType = 4
)

// All allowed values of CSSCMSCoreEnumsDuplicateSubjectType enum
var AllowedCSSCMSCoreEnumsDuplicateSubjectTypeEnumValues = []CSSCMSCoreEnumsDuplicateSubjectType{
	0,
	1,
	2,
	3,
	4,
}

func (v *CSSCMSCoreEnumsDuplicateSubjectType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CSSCMSCoreEnumsDuplicateSubjectType(value)
	for _, existing := range AllowedCSSCMSCoreEnumsDuplicateSubjectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CSSCMSCoreEnumsDuplicateSubjectType", value)
}

// NewCSSCMSCoreEnumsDuplicateSubjectTypeFromValue returns a pointer to a valid CSSCMSCoreEnumsDuplicateSubjectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCSSCMSCoreEnumsDuplicateSubjectTypeFromValue(v int32) (*CSSCMSCoreEnumsDuplicateSubjectType, error) {
	ev := CSSCMSCoreEnumsDuplicateSubjectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CSSCMSCoreEnumsDuplicateSubjectType: valid values are %v", v, AllowedCSSCMSCoreEnumsDuplicateSubjectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CSSCMSCoreEnumsDuplicateSubjectType) IsValid() bool {
	for _, existing := range AllowedCSSCMSCoreEnumsDuplicateSubjectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CSS.CMS.Core.Enums.DuplicateSubjectType value
func (v CSSCMSCoreEnumsDuplicateSubjectType) Ptr() *CSSCMSCoreEnumsDuplicateSubjectType {
	return &v
}

type NullableCSSCMSCoreEnumsDuplicateSubjectType struct {
	value *CSSCMSCoreEnumsDuplicateSubjectType
	isSet bool
}

func (v NullableCSSCMSCoreEnumsDuplicateSubjectType) Get() *CSSCMSCoreEnumsDuplicateSubjectType {
	return v.value
}

func (v *NullableCSSCMSCoreEnumsDuplicateSubjectType) Set(val *CSSCMSCoreEnumsDuplicateSubjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSCoreEnumsDuplicateSubjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSCoreEnumsDuplicateSubjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSCoreEnumsDuplicateSubjectType(val *CSSCMSCoreEnumsDuplicateSubjectType) *NullableCSSCMSCoreEnumsDuplicateSubjectType {
	return &NullableCSSCMSCoreEnumsDuplicateSubjectType{value: val, isSet: true}
}

func (v NullableCSSCMSCoreEnumsDuplicateSubjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSCoreEnumsDuplicateSubjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
