/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsCertStoreLocationsCertificateLocationsGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertStoreLocationsCertificateLocationsGroup{}

// ModelsCertStoreLocationsCertificateLocationsGroup struct for ModelsCertStoreLocationsCertificateLocationsGroup
type ModelsCertStoreLocationsCertificateLocationsGroup struct {
	StoreType   NullableString                                            `json:"storeType,omitempty"`
	StoreTypeId *int32                                                    `json:"storeTypeId,omitempty"`
	StoreCount  *int32                                                    `json:"storeCount,omitempty"`
	Locations   []ModelsCertStoreLocationsCertificateStoreLocationsDetail `json:"locations,omitempty"`
}

// NewModelsCertStoreLocationsCertificateLocationsGroup instantiates a new ModelsCertStoreLocationsCertificateLocationsGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertStoreLocationsCertificateLocationsGroup() *ModelsCertStoreLocationsCertificateLocationsGroup {
	this := ModelsCertStoreLocationsCertificateLocationsGroup{}
	return &this
}

// NewModelsCertStoreLocationsCertificateLocationsGroupWithDefaults instantiates a new ModelsCertStoreLocationsCertificateLocationsGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertStoreLocationsCertificateLocationsGroupWithDefaults() *ModelsCertStoreLocationsCertificateLocationsGroup {
	this := ModelsCertStoreLocationsCertificateLocationsGroup{}
	return &this
}

// GetStoreType returns the StoreType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreType() string {
	if o == nil || isNil(o.StoreType.Get()) {
		var ret string
		return ret
	}
	return *o.StoreType.Get()
}

// GetStoreTypeOk returns a tuple with the StoreType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoreType.Get(), o.StoreType.IsSet()
}

// HasStoreType returns a boolean if a field has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) HasStoreType() bool {
	if o != nil && o.StoreType.IsSet() {
		return true
	}

	return false
}

// SetStoreType gets a reference to the given NullableString and assigns it to the StoreType field.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) SetStoreType(v string) {
	o.StoreType.Set(&v)
}

// SetStoreTypeNil sets the value for StoreType to be an explicit nil
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) SetStoreTypeNil() {
	o.StoreType.Set(nil)
}

// UnsetStoreType ensures that no value is present for StoreType, not even an explicit nil
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) UnsetStoreType() {
	o.StoreType.Unset()
}

// GetStoreTypeId returns the StoreTypeId field value if set, zero value otherwise.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreTypeId() int32 {
	if o == nil || isNil(o.StoreTypeId) {
		var ret int32
		return ret
	}
	return *o.StoreTypeId
}

// GetStoreTypeIdOk returns a tuple with the StoreTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreTypeIdOk() (*int32, bool) {
	if o == nil || isNil(o.StoreTypeId) {
		return nil, false
	}
	return o.StoreTypeId, true
}

// HasStoreTypeId returns a boolean if a field has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) HasStoreTypeId() bool {
	if o != nil && !isNil(o.StoreTypeId) {
		return true
	}

	return false
}

// SetStoreTypeId gets a reference to the given int32 and assigns it to the StoreTypeId field.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) SetStoreTypeId(v int32) {
	o.StoreTypeId = &v
}

// GetStoreCount returns the StoreCount field value if set, zero value otherwise.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreCount() int32 {
	if o == nil || isNil(o.StoreCount) {
		var ret int32
		return ret
	}
	return *o.StoreCount
}

// GetStoreCountOk returns a tuple with the StoreCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreCountOk() (*int32, bool) {
	if o == nil || isNil(o.StoreCount) {
		return nil, false
	}
	return o.StoreCount, true
}

// HasStoreCount returns a boolean if a field has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) HasStoreCount() bool {
	if o != nil && !isNil(o.StoreCount) {
		return true
	}

	return false
}

// SetStoreCount gets a reference to the given int32 and assigns it to the StoreCount field.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) SetStoreCount(v int32) {
	o.StoreCount = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetLocations() []ModelsCertStoreLocationsCertificateStoreLocationsDetail {
	if o == nil {
		var ret []ModelsCertStoreLocationsCertificateStoreLocationsDetail
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetLocationsOk() ([]ModelsCertStoreLocationsCertificateStoreLocationsDetail, bool) {
	if o == nil || isNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) HasLocations() bool {
	if o != nil && isNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []ModelsCertStoreLocationsCertificateStoreLocationsDetail and assigns it to the Locations field.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) SetLocations(v []ModelsCertStoreLocationsCertificateStoreLocationsDetail) {
	o.Locations = v
}

func (o ModelsCertStoreLocationsCertificateLocationsGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertStoreLocationsCertificateLocationsGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StoreType.IsSet() {
		toSerialize["storeType"] = o.StoreType.Get()
	}
	// skip: storeTypeId is readOnly
	// skip: storeCount is readOnly
	if o.Locations != nil {
		toSerialize["locations"] = o.Locations
	}
	return toSerialize, nil
}

type NullableModelsCertStoreLocationsCertificateLocationsGroup struct {
	value *ModelsCertStoreLocationsCertificateLocationsGroup
	isSet bool
}

func (v NullableModelsCertStoreLocationsCertificateLocationsGroup) Get() *ModelsCertStoreLocationsCertificateLocationsGroup {
	return v.value
}

func (v *NullableModelsCertStoreLocationsCertificateLocationsGroup) Set(val *ModelsCertStoreLocationsCertificateLocationsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertStoreLocationsCertificateLocationsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertStoreLocationsCertificateLocationsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertStoreLocationsCertificateLocationsGroup(val *ModelsCertStoreLocationsCertificateLocationsGroup) *NullableModelsCertStoreLocationsCertificateLocationsGroup {
	return &NullableModelsCertStoreLocationsCertificateLocationsGroup{value: val, isSet: true}
}

func (v NullableModelsCertStoreLocationsCertificateLocationsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertStoreLocationsCertificateLocationsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
