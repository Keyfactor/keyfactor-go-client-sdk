/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest{}

// KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest struct for KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest
type KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest struct {
	// The signal key. This is expected to be in a format like \"STEP_NAME.SIGNAL_NAME\"
	SignalKey NullableString `json:"signalKey,omitempty"`
	// Arbitrary data to associate with the signal.
	Data map[string]interface{} `json:"data,omitempty"`
}

// NewKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest instantiates a new KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest() *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest {
	this := KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest{}
	return &this
}

// NewKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequestWithDefaults instantiates a new KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequestWithDefaults() *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest {
	this := KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest{}
	return &this
}

// GetSignalKey returns the SignalKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) GetSignalKey() string {
	if o == nil || isNil(o.SignalKey.Get()) {
		var ret string
		return ret
	}
	return *o.SignalKey.Get()
}

// GetSignalKeyOk returns a tuple with the SignalKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) GetSignalKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SignalKey.Get(), o.SignalKey.IsSet()
}

// HasSignalKey returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) HasSignalKey() bool {
	if o != nil && o.SignalKey.IsSet() {
		return true
	}

	return false
}

// SetSignalKey gets a reference to the given NullableString and assigns it to the SignalKey field.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) SetSignalKey(v string) {
	o.SignalKey.Set(&v)
}

// SetSignalKeyNil sets the value for SignalKey to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) SetSignalKeyNil() {
	o.SignalKey.Set(nil)
}

// UnsetSignalKey ensures that no value is present for SignalKey, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) UnsetSignalKey() {
	o.SignalKey.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) HasData() bool {
	if o != nil && isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SignalKey.IsSet() {
		toSerialize["signalKey"] = o.SignalKey.Get()
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest struct {
	value *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest
	isSet bool
}

func (v NullableKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) Get() *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest {
	return v.value
}

func (v *NullableKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) Set(val *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest(val *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) *NullableKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest {
	return &NullableKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest{value: val, isSet: true}
}

func (v NullableKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
