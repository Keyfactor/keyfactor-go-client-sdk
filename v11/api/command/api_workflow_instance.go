/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// WorkflowInstanceApiService WorkflowInstanceApi service
type WorkflowInstanceApiService service

type ApiWorkflowInstancesAssignedToMeGetRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowInstanceApiService
	xKeyfactorRequestedWith *string
	queryString             *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstancesAssignedToMeGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstancesAssignedToMeGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiWorkflowInstancesAssignedToMeGetRequest) QueryString(queryString string) ApiWorkflowInstancesAssignedToMeGetRequest {
	r.queryString = &queryString
	return r
}

func (r ApiWorkflowInstancesAssignedToMeGetRequest) PageReturned(pageReturned int32) ApiWorkflowInstancesAssignedToMeGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiWorkflowInstancesAssignedToMeGetRequest) ReturnLimit(returnLimit int32) ApiWorkflowInstancesAssignedToMeGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiWorkflowInstancesAssignedToMeGetRequest) SortField(sortField string) ApiWorkflowInstancesAssignedToMeGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiWorkflowInstancesAssignedToMeGetRequest) SortAscending(sortAscending int32) ApiWorkflowInstancesAssignedToMeGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstancesAssignedToMeGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstancesAssignedToMeGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstancesAssignedToMeGetRequest) Execute() ([]KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	return r.ApiService.WorkflowInstancesAssignedToMeGetExecute(r)
}

/*
WorkflowInstancesAssignedToMeGet Gets the workflow instances waiting on the user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWorkflowInstancesAssignedToMeGetRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstancesAssignedToMeGet(ctx context.Context) ApiWorkflowInstancesAssignedToMeGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowInstancesAssignedToMeGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return []KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse
func (a *WorkflowInstanceApiService) WorkflowInstancesAssignedToMeGetExecute(r ApiWorkflowInstancesAssignedToMeGetRequest) ([]KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Instances/AssignedToMe"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.queryString != nil {
		parameterAddToQuery(localVarQueryParams, "QueryString", r.queryString, "")
	}
	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowInstancesGetRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowInstanceApiService
	xKeyfactorRequestedWith *string
	queryString             *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstancesGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstancesGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiWorkflowInstancesGetRequest) QueryString(queryString string) ApiWorkflowInstancesGetRequest {
	r.queryString = &queryString
	return r
}

func (r ApiWorkflowInstancesGetRequest) PageReturned(pageReturned int32) ApiWorkflowInstancesGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiWorkflowInstancesGetRequest) ReturnLimit(returnLimit int32) ApiWorkflowInstancesGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiWorkflowInstancesGetRequest) SortField(sortField string) ApiWorkflowInstancesGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiWorkflowInstancesGetRequest) SortAscending(sortAscending int32) ApiWorkflowInstancesGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstancesGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstancesGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstancesGetRequest) Execute() ([]KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	return r.ApiService.WorkflowInstancesGetExecute(r)
}

/*
WorkflowInstancesGet Gets the workflow instances matching the query specifications.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWorkflowInstancesGetRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstancesGet(ctx context.Context) ApiWorkflowInstancesGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowInstancesGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return []KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse
func (a *WorkflowInstanceApiService) WorkflowInstancesGetExecute(r ApiWorkflowInstancesGetRequest) ([]KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.queryString != nil {
		parameterAddToQuery(localVarQueryParams, "QueryString", r.queryString, "")
	}
	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowInstancesInstanceIdDeleteRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowInstanceApiService
	instanceId              string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstancesInstanceIdDeleteRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstancesInstanceIdDeleteRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstancesInstanceIdDeleteRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstancesInstanceIdDeleteRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstancesInstanceIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.WorkflowInstancesInstanceIdDeleteExecute(r)
}

/*
WorkflowInstancesInstanceIdDelete Deletes the specified instance.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId The Id of the instance to be deleted.
	@return ApiWorkflowInstancesInstanceIdDeleteRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstancesInstanceIdDelete(ctx context.Context, instanceId string) ApiWorkflowInstancesInstanceIdDeleteRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowInstancesInstanceIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		instanceId:              instanceId,
	}
}

// Execute executes the request
func (a *WorkflowInstanceApiService) WorkflowInstancesInstanceIdDeleteExecute(r ApiWorkflowInstancesInstanceIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Instances/{instanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowInstancesInstanceIdGetRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowInstanceApiService
	instanceId              string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstancesInstanceIdGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstancesInstanceIdGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstancesInstanceIdGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstancesInstanceIdGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstancesInstanceIdGetRequest) Execute() (*KeyfactorWebKeyfactorApiModelsWorkflowsInstanceResponse, *http.Response, error) {
	return r.ApiService.WorkflowInstancesInstanceIdGetExecute(r)
}

/*
WorkflowInstancesInstanceIdGet Get information relevant for knowing where an instance is in its workflow.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId The System.Guid identifying the instance.
	@return ApiWorkflowInstancesInstanceIdGetRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstancesInstanceIdGet(ctx context.Context, instanceId string) ApiWorkflowInstancesInstanceIdGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowInstancesInstanceIdGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		instanceId:              instanceId,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsWorkflowsInstanceResponse
func (a *WorkflowInstanceApiService) WorkflowInstancesInstanceIdGetExecute(r ApiWorkflowInstancesInstanceIdGetRequest) (*KeyfactorWebKeyfactorApiModelsWorkflowsInstanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsWorkflowsInstanceResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Instances/{instanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkflowInstancesInstanceIdRestartPostRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowInstanceApiService
	instanceId              string
	xKeyfactorRequestedWith *string
	version                 *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstancesInstanceIdRestartPostRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstancesInstanceIdRestartPostRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// The version of the definition to restart the instance against. Defaults to the published version.
func (r ApiWorkflowInstancesInstanceIdRestartPostRequest) Version(version int32) ApiWorkflowInstancesInstanceIdRestartPostRequest {
	r.version = &version
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstancesInstanceIdRestartPostRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstancesInstanceIdRestartPostRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstancesInstanceIdRestartPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.WorkflowInstancesInstanceIdRestartPostExecute(r)
}

/*
WorkflowInstancesInstanceIdRestartPost Restarts a failed instance against the specified definition version or the published version if no version is specified.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId The instance Id to restart.
	@return ApiWorkflowInstancesInstanceIdRestartPostRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstancesInstanceIdRestartPost(ctx context.Context, instanceId string) ApiWorkflowInstancesInstanceIdRestartPostRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowInstancesInstanceIdRestartPostRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		instanceId:              instanceId,
	}
}

// Execute executes the request
func (a *WorkflowInstanceApiService) WorkflowInstancesInstanceIdRestartPostExecute(r ApiWorkflowInstancesInstanceIdRestartPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Instances/{instanceId}/Restart"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.version != nil {
		parameterAddToQuery(localVarQueryParams, "version", r.version, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowInstancesInstanceIdSignalsPostRequest struct {
	ctx                                                  context.Context
	ApiService                                           *WorkflowInstanceApiService
	instanceId                                           string
	xKeyfactorRequestedWith                              *string
	xKeyfactorApiVersion                                 *string
	keyfactorWebKeyfactorApiModelsWorkflowsSignalRequest *KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstancesInstanceIdSignalsPostRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstancesInstanceIdSignalsPostRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstancesInstanceIdSignalsPostRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstancesInstanceIdSignalsPostRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// The signal to receive.
func (r ApiWorkflowInstancesInstanceIdSignalsPostRequest) KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest(keyfactorWebKeyfactorApiModelsWorkflowsSignalRequest KeyfactorWebKeyfactorApiModelsWorkflowsSignalRequest) ApiWorkflowInstancesInstanceIdSignalsPostRequest {
	r.keyfactorWebKeyfactorApiModelsWorkflowsSignalRequest = &keyfactorWebKeyfactorApiModelsWorkflowsSignalRequest
	return r
}

func (r ApiWorkflowInstancesInstanceIdSignalsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.WorkflowInstancesInstanceIdSignalsPostExecute(r)
}

/*
WorkflowInstancesInstanceIdSignalsPost Receives the given signal for the given instance.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId The instance that is receiving the signal.
	@return ApiWorkflowInstancesInstanceIdSignalsPostRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstancesInstanceIdSignalsPost(ctx context.Context, instanceId string) ApiWorkflowInstancesInstanceIdSignalsPostRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowInstancesInstanceIdSignalsPostRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		instanceId:              instanceId,
	}
}

// Execute executes the request
func (a *WorkflowInstanceApiService) WorkflowInstancesInstanceIdSignalsPostExecute(r ApiWorkflowInstancesInstanceIdSignalsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Instances/{instanceId}/Signals"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.keyfactorWebKeyfactorApiModelsWorkflowsSignalRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowInstancesInstanceIdStopPostRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowInstanceApiService
	instanceId              string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstancesInstanceIdStopPostRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstancesInstanceIdStopPostRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstancesInstanceIdStopPostRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstancesInstanceIdStopPostRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstancesInstanceIdStopPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.WorkflowInstancesInstanceIdStopPostExecute(r)
}

/*
WorkflowInstancesInstanceIdStopPost Rejects an instance, preventing it from continuing.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId The Id of the instance to reject.
	@return ApiWorkflowInstancesInstanceIdStopPostRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstancesInstanceIdStopPost(ctx context.Context, instanceId string) ApiWorkflowInstancesInstanceIdStopPostRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowInstancesInstanceIdStopPostRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		instanceId:              instanceId,
	}
}

// Execute executes the request
func (a *WorkflowInstanceApiService) WorkflowInstancesInstanceIdStopPostExecute(r ApiWorkflowInstancesInstanceIdStopPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Instances/{instanceId}/Stop"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterValueToString(r.instanceId, "instanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowInstancesMyGetRequest struct {
	ctx                     context.Context
	ApiService              *WorkflowInstanceApiService
	xKeyfactorRequestedWith *string
	queryString             *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiWorkflowInstancesMyGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiWorkflowInstancesMyGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiWorkflowInstancesMyGetRequest) QueryString(queryString string) ApiWorkflowInstancesMyGetRequest {
	r.queryString = &queryString
	return r
}

func (r ApiWorkflowInstancesMyGetRequest) PageReturned(pageReturned int32) ApiWorkflowInstancesMyGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiWorkflowInstancesMyGetRequest) ReturnLimit(returnLimit int32) ApiWorkflowInstancesMyGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiWorkflowInstancesMyGetRequest) SortField(sortField string) ApiWorkflowInstancesMyGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiWorkflowInstancesMyGetRequest) SortAscending(sortAscending int32) ApiWorkflowInstancesMyGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiWorkflowInstancesMyGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiWorkflowInstancesMyGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiWorkflowInstancesMyGetRequest) Execute() ([]KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	return r.ApiService.WorkflowInstancesMyGetExecute(r)
}

/*
WorkflowInstancesMyGet Gets the workflow instances started by the user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWorkflowInstancesMyGetRequest
*/
func (a *WorkflowInstanceApiService) WorkflowInstancesMyGet(ctx context.Context) ApiWorkflowInstancesMyGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiWorkflowInstancesMyGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return []KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse
func (a *WorkflowInstanceApiService) WorkflowInstancesMyGetExecute(r ApiWorkflowInstancesMyGetRequest) ([]KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KeyfactorWebKeyfactorApiModelsWorkflowsInstanceQueryResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/Workflow/Instances/My"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.queryString != nil {
		parameterAddToQuery(localVarQueryParams, "QueryString", r.queryString, "")
	}
	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
