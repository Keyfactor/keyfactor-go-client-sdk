/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest{}

// KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest struct for KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest
type KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest struct {
	CertificateId     int32                                      `json:"certificateId"`
	CertificateStores []ModelsCertificateStoreEntry              `json:"certificateStores"`
	Schedule          KeyfactorCommonSchedulingKeyfactorSchedule `json:"schedule"`
	CollectionId      NullableInt32                              `json:"collectionId,omitempty"`
}

// NewKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest instantiates a new KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest(certificateId int32, certificateStores []ModelsCertificateStoreEntry, schedule KeyfactorCommonSchedulingKeyfactorSchedule) *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest {
	this := KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest{}
	this.CertificateId = certificateId
	this.CertificateStores = certificateStores
	this.Schedule = schedule
	return &this
}

// NewKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequestWithDefaults instantiates a new KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequestWithDefaults() *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest {
	this := KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest{}
	return &this
}

// GetCertificateId returns the CertificateId field value
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCertificateId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CertificateId
}

// GetCertificateIdOk returns a tuple with the CertificateId field value
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCertificateIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateId, true
}

// SetCertificateId sets field value
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) SetCertificateId(v int32) {
	o.CertificateId = v
}

// GetCertificateStores returns the CertificateStores field value
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCertificateStores() []ModelsCertificateStoreEntry {
	if o == nil {
		var ret []ModelsCertificateStoreEntry
		return ret
	}

	return o.CertificateStores
}

// GetCertificateStoresOk returns a tuple with the CertificateStores field value
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCertificateStoresOk() ([]ModelsCertificateStoreEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateStores, true
}

// SetCertificateStores sets field value
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) SetCertificateStores(v []ModelsCertificateStoreEntry) {
	o.CertificateStores = v
}

// GetSchedule returns the Schedule field value
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) GetSchedule() KeyfactorCommonSchedulingKeyfactorSchedule {
	if o == nil {
		var ret KeyfactorCommonSchedulingKeyfactorSchedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) GetScheduleOk() (*KeyfactorCommonSchedulingKeyfactorSchedule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) SetSchedule(v KeyfactorCommonSchedulingKeyfactorSchedule) {
	o.Schedule = v
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCollectionId() int32 {
	if o == nil || isNil(o.CollectionId.Get()) {
		var ret int32
		return ret
	}
	return *o.CollectionId.Get()
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) GetCollectionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CollectionId.Get(), o.CollectionId.IsSet()
}

// HasCollectionId returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) HasCollectionId() bool {
	if o != nil && o.CollectionId.IsSet() {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given NullableInt32 and assigns it to the CollectionId field.
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) SetCollectionId(v int32) {
	o.CollectionId.Set(&v)
}

// SetCollectionIdNil sets the value for CollectionId to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) SetCollectionIdNil() {
	o.CollectionId.Set(nil)
}

// UnsetCollectionId ensures that no value is present for CollectionId, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) UnsetCollectionId() {
	o.CollectionId.Unset()
}

func (o KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificateId"] = o.CertificateId
	toSerialize["certificateStores"] = o.CertificateStores
	toSerialize["schedule"] = o.Schedule
	if o.CollectionId.IsSet() {
		toSerialize["collectionId"] = o.CollectionId.Get()
	}
	return toSerialize, nil
}

type NullableKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest struct {
	value *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest
	isSet bool
}

func (v NullableKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) Get() *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest {
	return v.value
}

func (v *NullableKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) Set(val *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest(val *KeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) *NullableKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest {
	return &NullableKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest{value: val, isSet: true}
}

func (v NullableKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorWebKeyfactorApiModelsCertificateStoresAddCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
