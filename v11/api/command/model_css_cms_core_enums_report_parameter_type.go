/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"fmt"
)

// CSSCMSCoreEnumsReportParameterType the model 'CSSCMSCoreEnumsReportParameterType'
type CSSCMSCoreEnumsReportParameterType int32

// List of CSS.CMS.Core.Enums.ReportParameterType
const (
	_0  CSSCMSCoreEnumsReportParameterType = 0
	_1  CSSCMSCoreEnumsReportParameterType = 1
	_2  CSSCMSCoreEnumsReportParameterType = 2
	_3  CSSCMSCoreEnumsReportParameterType = 3
	_4  CSSCMSCoreEnumsReportParameterType = 4
	_10 CSSCMSCoreEnumsReportParameterType = 10
	_11 CSSCMSCoreEnumsReportParameterType = 11
	_12 CSSCMSCoreEnumsReportParameterType = 12
	_13 CSSCMSCoreEnumsReportParameterType = 13
	_14 CSSCMSCoreEnumsReportParameterType = 14
	_15 CSSCMSCoreEnumsReportParameterType = 15
	_16 CSSCMSCoreEnumsReportParameterType = 16
	_17 CSSCMSCoreEnumsReportParameterType = 17
	_18 CSSCMSCoreEnumsReportParameterType = 18
	_19 CSSCMSCoreEnumsReportParameterType = 19
	_20 CSSCMSCoreEnumsReportParameterType = 20
	_21 CSSCMSCoreEnumsReportParameterType = 21
)

// All allowed values of CSSCMSCoreEnumsReportParameterType enum
var AllowedCSSCMSCoreEnumsReportParameterTypeEnumValues = []CSSCMSCoreEnumsReportParameterType{
	0,
	1,
	2,
	3,
	4,
	10,
	11,
	12,
	13,
	14,
	15,
	16,
	17,
	18,
	19,
	20,
	21,
}

func (v *CSSCMSCoreEnumsReportParameterType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CSSCMSCoreEnumsReportParameterType(value)
	for _, existing := range AllowedCSSCMSCoreEnumsReportParameterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CSSCMSCoreEnumsReportParameterType", value)
}

// NewCSSCMSCoreEnumsReportParameterTypeFromValue returns a pointer to a valid CSSCMSCoreEnumsReportParameterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCSSCMSCoreEnumsReportParameterTypeFromValue(v int32) (*CSSCMSCoreEnumsReportParameterType, error) {
	ev := CSSCMSCoreEnumsReportParameterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CSSCMSCoreEnumsReportParameterType: valid values are %v", v, AllowedCSSCMSCoreEnumsReportParameterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CSSCMSCoreEnumsReportParameterType) IsValid() bool {
	for _, existing := range AllowedCSSCMSCoreEnumsReportParameterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CSS.CMS.Core.Enums.ReportParameterType value
func (v CSSCMSCoreEnumsReportParameterType) Ptr() *CSSCMSCoreEnumsReportParameterType {
	return &v
}

type NullableCSSCMSCoreEnumsReportParameterType struct {
	value *CSSCMSCoreEnumsReportParameterType
	isSet bool
}

func (v NullableCSSCMSCoreEnumsReportParameterType) Get() *CSSCMSCoreEnumsReportParameterType {
	return v.value
}

func (v *NullableCSSCMSCoreEnumsReportParameterType) Set(val *CSSCMSCoreEnumsReportParameterType) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSCoreEnumsReportParameterType) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSCoreEnumsReportParameterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSCoreEnumsReportParameterType(val *CSSCMSCoreEnumsReportParameterType) *NullableCSSCMSCoreEnumsReportParameterType {
	return &NullableCSSCMSCoreEnumsReportParameterType{value: val, isSet: true}
}

func (v NullableCSSCMSCoreEnumsReportParameterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSCoreEnumsReportParameterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
