/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"fmt"
)

// KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult the model 'KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult'
type KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult int32

// List of Keyfactor.Orchestrators.Common.Enums.OrchestratorJobStatusJobResult
const (
	_0 KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult = 0
	_1 KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult = 1
	_2 KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult = 2
	_3 KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult = 3
	_4 KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult = 4
)

// All allowed values of KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult enum
var AllowedKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResultEnumValues = []KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult{
	0,
	1,
	2,
	3,
	4,
}

func (v *KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult(value)
	for _, existing := range AllowedKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult", value)
}

// NewKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResultFromValue returns a pointer to a valid KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResultFromValue(v int32) (*KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult, error) {
	ev := KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult: valid values are %v", v, AllowedKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) IsValid() bool {
	for _, existing := range AllowedKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Keyfactor.Orchestrators.Common.Enums.OrchestratorJobStatusJobResult value
func (v KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) Ptr() *KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult {
	return &v
}

type NullableKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult struct {
	value *KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult
	isSet bool
}

func (v NullableKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) Get() *KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult {
	return v.value
}

func (v *NullableKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) Set(val *KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult(val *KeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) *NullableKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult {
	return &NullableKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult{value: val, isSet: true}
}

func (v NullableKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorOrchestratorsCommonEnumsOrchestratorJobStatusJobResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
