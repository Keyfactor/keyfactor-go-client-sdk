/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"time"
)

// checks if the KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense{}

// KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense struct for KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense
type KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense struct {
	LicenseId        NullableString                                                        `json:"licenseId,omitempty"`
	Customer         *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedCustomer `json:"customer,omitempty"`
	IssuedDate       *time.Time                                                            `json:"issuedDate,omitempty"`
	ExpirationDate   NullableTime                                                          `json:"expirationDate,omitempty"`
	LicensedProducts []KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct `json:"licensedProducts,omitempty"`
}

// NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense instantiates a new KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense() *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense {
	this := KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense{}
	return &this
}

// NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicenseWithDefaults instantiates a new KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicenseWithDefaults() *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense {
	this := KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense{}
	return &this
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) GetLicenseId() string {
	if o == nil || isNil(o.LicenseId.Get()) {
		var ret string
		return ret
	}
	return *o.LicenseId.Get()
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) GetLicenseIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LicenseId.Get(), o.LicenseId.IsSet()
}

// HasLicenseId returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) HasLicenseId() bool {
	if o != nil && o.LicenseId.IsSet() {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given NullableString and assigns it to the LicenseId field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) SetLicenseId(v string) {
	o.LicenseId.Set(&v)
}

// SetLicenseIdNil sets the value for LicenseId to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) SetLicenseIdNil() {
	o.LicenseId.Set(nil)
}

// UnsetLicenseId ensures that no value is present for LicenseId, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) UnsetLicenseId() {
	o.LicenseId.Unset()
}

// GetCustomer returns the Customer field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) GetCustomer() KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedCustomer {
	if o == nil || isNil(o.Customer) {
		var ret KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedCustomer
		return ret
	}
	return *o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) GetCustomerOk() (*KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedCustomer, bool) {
	if o == nil || isNil(o.Customer) {
		return nil, false
	}
	return o.Customer, true
}

// HasCustomer returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) HasCustomer() bool {
	if o != nil && !isNil(o.Customer) {
		return true
	}

	return false
}

// SetCustomer gets a reference to the given KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedCustomer and assigns it to the Customer field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) SetCustomer(v KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedCustomer) {
	o.Customer = &v
}

// GetIssuedDate returns the IssuedDate field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) GetIssuedDate() time.Time {
	if o == nil || isNil(o.IssuedDate) {
		var ret time.Time
		return ret
	}
	return *o.IssuedDate
}

// GetIssuedDateOk returns a tuple with the IssuedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) GetIssuedDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.IssuedDate) {
		return nil, false
	}
	return o.IssuedDate, true
}

// HasIssuedDate returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) HasIssuedDate() bool {
	if o != nil && !isNil(o.IssuedDate) {
		return true
	}

	return false
}

// SetIssuedDate gets a reference to the given time.Time and assigns it to the IssuedDate field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) SetIssuedDate(v time.Time) {
	o.IssuedDate = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) GetExpirationDate() time.Time {
	if o == nil || isNil(o.ExpirationDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given NullableTime and assigns it to the ExpirationDate field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) SetExpirationDate(v time.Time) {
	o.ExpirationDate.Set(&v)
}

// SetExpirationDateNil sets the value for ExpirationDate to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) SetExpirationDateNil() {
	o.ExpirationDate.Set(nil)
}

// UnsetExpirationDate ensures that no value is present for ExpirationDate, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) UnsetExpirationDate() {
	o.ExpirationDate.Unset()
}

// GetLicensedProducts returns the LicensedProducts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) GetLicensedProducts() []KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct {
	if o == nil {
		var ret []KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct
		return ret
	}
	return o.LicensedProducts
}

// GetLicensedProductsOk returns a tuple with the LicensedProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) GetLicensedProductsOk() ([]KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct, bool) {
	if o == nil || isNil(o.LicensedProducts) {
		return nil, false
	}
	return o.LicensedProducts, true
}

// HasLicensedProducts returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) HasLicensedProducts() bool {
	if o != nil && isNil(o.LicensedProducts) {
		return true
	}

	return false
}

// SetLicensedProducts gets a reference to the given []KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct and assigns it to the LicensedProducts field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) SetLicensedProducts(v []KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedProduct) {
	o.LicensedProducts = v
}

func (o KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.LicenseId.IsSet() {
		toSerialize["licenseId"] = o.LicenseId.Get()
	}
	if !isNil(o.Customer) {
		toSerialize["customer"] = o.Customer
	}
	if !isNil(o.IssuedDate) {
		toSerialize["issuedDate"] = o.IssuedDate
	}
	if o.ExpirationDate.IsSet() {
		toSerialize["expirationDate"] = o.ExpirationDate.Get()
	}
	if o.LicensedProducts != nil {
		toSerialize["licensedProducts"] = o.LicensedProducts
	}
	return toSerialize, nil
}

type NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense struct {
	value *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense
	isSet bool
}

func (v NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) Get() *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense {
	return v.value
}

func (v *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) Set(val *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense(val *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense {
	return &NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense{value: val, isSet: true}
}

func (v NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
