/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"time"
)

// checks if the KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature{}

// KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature struct for KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature
type KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature struct {
	FeatureID      NullableString `json:"featureID,omitempty"`
	DisplayName    NullableString `json:"displayName,omitempty"`
	Enabled        *bool          `json:"enabled,omitempty"`
	Quantity       NullableInt32  `json:"quantity,omitempty"`
	ExpirationDate NullableTime   `json:"expirationDate,omitempty"`
}

// NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature instantiates a new KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature() *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature {
	this := KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature{}
	return &this
}

// NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeatureWithDefaults instantiates a new KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeatureWithDefaults() *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature {
	this := KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature{}
	return &this
}

// GetFeatureID returns the FeatureID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetFeatureID() string {
	if o == nil || isNil(o.FeatureID.Get()) {
		var ret string
		return ret
	}
	return *o.FeatureID.Get()
}

// GetFeatureIDOk returns a tuple with the FeatureID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetFeatureIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeatureID.Get(), o.FeatureID.IsSet()
}

// HasFeatureID returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) HasFeatureID() bool {
	if o != nil && o.FeatureID.IsSet() {
		return true
	}

	return false
}

// SetFeatureID gets a reference to the given NullableString and assigns it to the FeatureID field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetFeatureID(v string) {
	o.FeatureID.Set(&v)
}

// SetFeatureIDNil sets the value for FeatureID to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetFeatureIDNil() {
	o.FeatureID.Set(nil)
}

// UnsetFeatureID ensures that no value is present for FeatureID, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) UnsetFeatureID() {
	o.FeatureID.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}

// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetQuantity() int32 {
	if o == nil || isNil(o.Quantity.Get()) {
		var ret int32
		return ret
	}
	return *o.Quantity.Get()
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quantity.Get(), o.Quantity.IsSet()
}

// HasQuantity returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) HasQuantity() bool {
	if o != nil && o.Quantity.IsSet() {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given NullableInt32 and assigns it to the Quantity field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetQuantity(v int32) {
	o.Quantity.Set(&v)
}

// SetQuantityNil sets the value for Quantity to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetQuantityNil() {
	o.Quantity.Set(nil)
}

// UnsetQuantity ensures that no value is present for Quantity, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) UnsetQuantity() {
	o.Quantity.Unset()
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetExpirationDate() time.Time {
	if o == nil || isNil(o.ExpirationDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given NullableTime and assigns it to the ExpirationDate field.
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetExpirationDate(v time.Time) {
	o.ExpirationDate.Set(&v)
}

// SetExpirationDateNil sets the value for ExpirationDate to be an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) SetExpirationDateNil() {
	o.ExpirationDate.Set(nil)
}

// UnsetExpirationDate ensures that no value is present for ExpirationDate, not even an explicit nil
func (o *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) UnsetExpirationDate() {
	o.ExpirationDate.Unset()
}

func (o KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FeatureID.IsSet() {
		toSerialize["featureID"] = o.FeatureID.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Quantity.IsSet() {
		toSerialize["quantity"] = o.Quantity.Get()
	}
	if o.ExpirationDate.IsSet() {
		toSerialize["expirationDate"] = o.ExpirationDate.Get()
	}
	return toSerialize, nil
}

type NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature struct {
	value *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature
	isSet bool
}

func (v NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) Get() *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature {
	return v.value
}

func (v *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) Set(val *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature(val *KeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature {
	return &NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature{value: val, isSet: true}
}

func (v NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorWebKeyfactorApiModelsLicenseLicenseResponseLicensedFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
