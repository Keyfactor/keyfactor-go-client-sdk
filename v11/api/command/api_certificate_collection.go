/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// CertificateCollectionApiService CertificateCollectionApi service
type CertificateCollectionApiService service

type ApiCertificateCollectionsCollectionListGetRequest struct {
	ctx                     context.Context
	ApiService              *CertificateCollectionApiService
	xKeyfactorRequestedWith *string
	queryString             *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateCollectionsCollectionListGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateCollectionsCollectionListGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiCertificateCollectionsCollectionListGetRequest) QueryString(queryString string) ApiCertificateCollectionsCollectionListGetRequest {
	r.queryString = &queryString
	return r
}

func (r ApiCertificateCollectionsCollectionListGetRequest) PageReturned(pageReturned int32) ApiCertificateCollectionsCollectionListGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiCertificateCollectionsCollectionListGetRequest) ReturnLimit(returnLimit int32) ApiCertificateCollectionsCollectionListGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiCertificateCollectionsCollectionListGetRequest) SortField(sortField string) ApiCertificateCollectionsCollectionListGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiCertificateCollectionsCollectionListGetRequest) SortAscending(sortAscending int32) ApiCertificateCollectionsCollectionListGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateCollectionsCollectionListGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateCollectionsCollectionListGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateCollectionsCollectionListGetRequest) Execute() ([]KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionListResponse, *http.Response, error) {
	return r.ApiService.CertificateCollectionsCollectionListGetExecute(r)
}

/*
CertificateCollectionsCollectionListGet Get certificate collection list with duplication field name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCertificateCollectionsCollectionListGetRequest
*/
func (a *CertificateCollectionApiService) CertificateCollectionsCollectionListGet(ctx context.Context) ApiCertificateCollectionsCollectionListGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiCertificateCollectionsCollectionListGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return []KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionListResponse
func (a *CertificateCollectionApiService) CertificateCollectionsCollectionListGetExecute(r ApiCertificateCollectionsCollectionListGetRequest) ([]KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionListResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/CertificateCollections/CollectionList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.queryString != nil {
		parameterAddToQuery(localVarQueryParams, "QueryString", r.queryString, "")
	}
	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateCollectionsCopyPostRequest struct {
	ctx                                                                                  context.Context
	ApiService                                                                           *CertificateCollectionApiService
	xKeyfactorRequestedWith                                                              *string
	xKeyfactorApiVersion                                                                 *string
	keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCopyRequest *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCopyRequest
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateCollectionsCopyPostRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateCollectionsCopyPostRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateCollectionsCopyPostRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateCollectionsCopyPostRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Information related to the certificate collection query
func (r ApiCertificateCollectionsCopyPostRequest) KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCopyRequest(keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCopyRequest KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCopyRequest) ApiCertificateCollectionsCopyPostRequest {
	r.keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCopyRequest = &keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCopyRequest
	return r
}

func (r ApiCertificateCollectionsCopyPostRequest) Execute() (*KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse, *http.Response, error) {
	return r.ApiService.CertificateCollectionsCopyPostExecute(r)
}

/*
CertificateCollectionsCopyPost Creates a new certificate collection from an existing collection. The permissions, query and description of the   existing collection are copied when creating the new record, with the option to overwrite the query or description.

### Duplication Field Values ###
The field used to determine if a certificate is a duplicate of another.
| Value              | Description               |
|--------------------|---------------------------|
| 1                  | Common name               |
| 2                  | Distinguished name        |
| 3                  | Principal name            |

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCertificateCollectionsCopyPostRequest
*/
func (a *CertificateCollectionApiService) CertificateCollectionsCopyPost(ctx context.Context) ApiCertificateCollectionsCopyPostRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiCertificateCollectionsCopyPostRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse
func (a *CertificateCollectionApiService) CertificateCollectionsCopyPostExecute(r ApiCertificateCollectionsCopyPostRequest) (*KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/CertificateCollections/Copy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCopyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateCollectionsGetRequest struct {
	ctx                     context.Context
	ApiService              *CertificateCollectionApiService
	xKeyfactorRequestedWith *string
	queryString             *string
	pageReturned            *int32
	returnLimit             *int32
	sortField               *string
	sortAscending           *int32
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateCollectionsGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateCollectionsGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

func (r ApiCertificateCollectionsGetRequest) QueryString(queryString string) ApiCertificateCollectionsGetRequest {
	r.queryString = &queryString
	return r
}

func (r ApiCertificateCollectionsGetRequest) PageReturned(pageReturned int32) ApiCertificateCollectionsGetRequest {
	r.pageReturned = &pageReturned
	return r
}

func (r ApiCertificateCollectionsGetRequest) ReturnLimit(returnLimit int32) ApiCertificateCollectionsGetRequest {
	r.returnLimit = &returnLimit
	return r
}

func (r ApiCertificateCollectionsGetRequest) SortField(sortField string) ApiCertificateCollectionsGetRequest {
	r.sortField = &sortField
	return r
}

func (r ApiCertificateCollectionsGetRequest) SortAscending(sortAscending int32) ApiCertificateCollectionsGetRequest {
	r.sortAscending = &sortAscending
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateCollectionsGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateCollectionsGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateCollectionsGetRequest) Execute() ([]ModelsCertificateQuery, *http.Response, error) {
	return r.ApiService.CertificateCollectionsGetExecute(r)
}

/*
CertificateCollectionsGet Returns all certificate collections

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCertificateCollectionsGetRequest
*/
func (a *CertificateCollectionApiService) CertificateCollectionsGet(ctx context.Context) ApiCertificateCollectionsGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiCertificateCollectionsGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return []ModelsCertificateQuery
func (a *CertificateCollectionApiService) CertificateCollectionsGetExecute(r ApiCertificateCollectionsGetRequest) ([]ModelsCertificateQuery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ModelsCertificateQuery
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/CertificateCollections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	if r.queryString != nil {
		parameterAddToQuery(localVarQueryParams, "QueryString", r.queryString, "")
	}
	if r.pageReturned != nil {
		parameterAddToQuery(localVarQueryParams, "PageReturned", r.pageReturned, "")
	}
	if r.returnLimit != nil {
		parameterAddToQuery(localVarQueryParams, "ReturnLimit", r.returnLimit, "")
	}
	if r.sortField != nil {
		parameterAddToQuery(localVarQueryParams, "SortField", r.sortField, "")
	}
	if r.sortAscending != nil {
		parameterAddToQuery(localVarQueryParams, "SortAscending", r.sortAscending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateCollectionsIdDeleteRequest struct {
	ctx                     context.Context
	ApiService              *CertificateCollectionApiService
	id                      int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateCollectionsIdDeleteRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateCollectionsIdDeleteRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateCollectionsIdDeleteRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateCollectionsIdDeleteRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateCollectionsIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.CertificateCollectionsIdDeleteExecute(r)
}

/*
CertificateCollectionsIdDelete Delete one certificate collection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The collection to delete
	@return ApiCertificateCollectionsIdDeleteRequest
*/
func (a *CertificateCollectionApiService) CertificateCollectionsIdDelete(ctx context.Context, id int32) ApiCertificateCollectionsIdDeleteRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiCertificateCollectionsIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		id:                      id,
	}
}

// Execute executes the request
func (a *CertificateCollectionApiService) CertificateCollectionsIdDeleteExecute(r ApiCertificateCollectionsIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/CertificateCollections/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id < 1 {
		return nil, reportError("id must be greater than 1")
	}
	if r.id > 2147483647 {
		return nil, reportError("id must be less than 2147483647")
	}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCertificateCollectionsIdFavoritePutRequest struct {
	ctx                                                                                      context.Context
	ApiService                                                                               *CertificateCollectionApiService
	id                                                                                       int32
	xKeyfactorRequestedWith                                                                  *string
	xKeyfactorApiVersion                                                                     *string
	keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionFavoriteRequest *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionFavoriteRequest
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateCollectionsIdFavoritePutRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateCollectionsIdFavoritePutRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateCollectionsIdFavoritePutRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateCollectionsIdFavoritePutRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Information for the certificate collection favorite update
func (r ApiCertificateCollectionsIdFavoritePutRequest) KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionFavoriteRequest(keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionFavoriteRequest KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionFavoriteRequest) ApiCertificateCollectionsIdFavoritePutRequest {
	r.keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionFavoriteRequest = &keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionFavoriteRequest
	return r
}

func (r ApiCertificateCollectionsIdFavoritePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.CertificateCollectionsIdFavoritePutExecute(r)
}

/*
CertificateCollectionsIdFavoritePut Update favorite for one collection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The collection to update favorite with
	@return ApiCertificateCollectionsIdFavoritePutRequest
*/
func (a *CertificateCollectionApiService) CertificateCollectionsIdFavoritePut(ctx context.Context, id int32) ApiCertificateCollectionsIdFavoritePutRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiCertificateCollectionsIdFavoritePutRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		id:                      id,
	}
}

// Execute executes the request
func (a *CertificateCollectionApiService) CertificateCollectionsIdFavoritePutExecute(r ApiCertificateCollectionsIdFavoritePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/CertificateCollections/{id}/Favorite"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionFavoriteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCertificateCollectionsIdGetRequest struct {
	ctx                     context.Context
	ApiService              *CertificateCollectionApiService
	id                      int32
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateCollectionsIdGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateCollectionsIdGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateCollectionsIdGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateCollectionsIdGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateCollectionsIdGetRequest) Execute() (*ModelsCertificateQuery, *http.Response, error) {
	return r.ApiService.CertificateCollectionsIdGetExecute(r)
}

/*
CertificateCollectionsIdGet Returns the certificate collection definition associated with the provided Keyfactor identifier

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Identifier of the certificate collection
	@return ApiCertificateCollectionsIdGetRequest
*/
func (a *CertificateCollectionApiService) CertificateCollectionsIdGet(ctx context.Context, id int32) ApiCertificateCollectionsIdGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiCertificateCollectionsIdGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		id:                      id,
	}
}

// Execute executes the request
//
//	@return ModelsCertificateQuery
func (a *CertificateCollectionApiService) CertificateCollectionsIdGetExecute(r ApiCertificateCollectionsIdGetRequest) (*ModelsCertificateQuery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModelsCertificateQuery
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/CertificateCollections/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateCollectionsNameGetRequest struct {
	ctx                     context.Context
	ApiService              *CertificateCollectionApiService
	name                    string
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateCollectionsNameGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateCollectionsNameGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateCollectionsNameGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateCollectionsNameGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateCollectionsNameGetRequest) Execute() (*ModelsCertificateQuery, *http.Response, error) {
	return r.ApiService.CertificateCollectionsNameGetExecute(r)
}

/*
CertificateCollectionsNameGet Returns the certificate collection associated with the provided collection name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param name Name of the Collection
	@return ApiCertificateCollectionsNameGetRequest
*/
func (a *CertificateCollectionApiService) CertificateCollectionsNameGet(ctx context.Context, name string) ApiCertificateCollectionsNameGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiCertificateCollectionsNameGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
		name:                    name,
	}
}

// Execute executes the request
//
//	@return ModelsCertificateQuery
func (a *CertificateCollectionApiService) CertificateCollectionsNameGetExecute(r ApiCertificateCollectionsNameGetRequest) (*ModelsCertificateQuery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModelsCertificateQuery
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/CertificateCollections/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateCollectionsNavItemsGetRequest struct {
	ctx                     context.Context
	ApiService              *CertificateCollectionApiService
	xKeyfactorRequestedWith *string
	xKeyfactorApiVersion    *string
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateCollectionsNavItemsGetRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateCollectionsNavItemsGetRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateCollectionsNavItemsGetRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateCollectionsNavItemsGetRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

func (r ApiCertificateCollectionsNavItemsGetRequest) Execute() ([]ModelsCertificateCollectionNavItem, *http.Response, error) {
	return r.ApiService.CertificateCollectionsNavItemsGetExecute(r)
}

/*
CertificateCollectionsNavItemsGet Get the list of navigation items for certificate collection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCertificateCollectionsNavItemsGetRequest
*/
func (a *CertificateCollectionApiService) CertificateCollectionsNavItemsGet(ctx context.Context) ApiCertificateCollectionsNavItemsGetRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiCertificateCollectionsNavItemsGetRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return []ModelsCertificateCollectionNavItem
func (a *CertificateCollectionApiService) CertificateCollectionsNavItemsGetExecute(r ApiCertificateCollectionsNavItemsGetRequest) ([]ModelsCertificateCollectionNavItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ModelsCertificateCollectionNavItem
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/CertificateCollections/NavItems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateCollectionsPostRequest struct {
	ctx                                                                                    context.Context
	ApiService                                                                             *CertificateCollectionApiService
	xKeyfactorRequestedWith                                                                *string
	xKeyfactorApiVersion                                                                   *string
	keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCreateRequest *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCreateRequest
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateCollectionsPostRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateCollectionsPostRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateCollectionsPostRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateCollectionsPostRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Information related to the certificate collection query
func (r ApiCertificateCollectionsPostRequest) KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCreateRequest(keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCreateRequest KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCreateRequest) ApiCertificateCollectionsPostRequest {
	r.keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCreateRequest = &keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCreateRequest
	return r
}

func (r ApiCertificateCollectionsPostRequest) Execute() (*KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse, *http.Response, error) {
	return r.ApiService.CertificateCollectionsPostExecute(r)
}

/*
CertificateCollectionsPost Creates a new certificate collection with the provided properties

### Duplication Field Values ###
The field used to determine if a certificate is a duplicate of another.
| Value              | Description               |
|--------------------|---------------------------|
| 1                  | Common name               |
| 2                  | Distinguished name        |
| 3                  | Principal name            |

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCertificateCollectionsPostRequest
*/
func (a *CertificateCollectionApiService) CertificateCollectionsPost(ctx context.Context) ApiCertificateCollectionsPostRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiCertificateCollectionsPostRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse
func (a *CertificateCollectionApiService) CertificateCollectionsPostExecute(r ApiCertificateCollectionsPostRequest) (*KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/CertificateCollections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCertificateCollectionsPutRequest struct {
	ctx                                                                                    context.Context
	ApiService                                                                             *CertificateCollectionApiService
	xKeyfactorRequestedWith                                                                *string
	xKeyfactorApiVersion                                                                   *string
	keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionUpdateRequest *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionUpdateRequest
}

// Type of the request [XMLHttpRequest, APIClient]
func (r ApiCertificateCollectionsPutRequest) XKeyfactorRequestedWith(xKeyfactorRequestedWith string) ApiCertificateCollectionsPutRequest {
	r.xKeyfactorRequestedWith = &xKeyfactorRequestedWith
	return r
}

// Desired version of the api, if not provided defaults to v1
func (r ApiCertificateCollectionsPutRequest) XKeyfactorApiVersion(xKeyfactorApiVersion string) ApiCertificateCollectionsPutRequest {
	r.xKeyfactorApiVersion = &xKeyfactorApiVersion
	return r
}

// Information related to the certificate collection query
func (r ApiCertificateCollectionsPutRequest) KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionUpdateRequest(keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionUpdateRequest KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionUpdateRequest) ApiCertificateCollectionsPutRequest {
	r.keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionUpdateRequest = &keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionUpdateRequest
	return r
}

func (r ApiCertificateCollectionsPutRequest) Execute() (*KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse, *http.Response, error) {
	return r.ApiService.CertificateCollectionsPutExecute(r)
}

/*
CertificateCollectionsPut Updates an existing certificate collection with the provided properties

### Duplication Field Values ###
The field used to determine if a certificate is a duplicate of another.
| Value              | Description               |
|--------------------|---------------------------|
| 1                  | Common name               |
| 2                  | Distinguished name        |
| 3                  | Principal name            |

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCertificateCollectionsPutRequest
*/
func (a *CertificateCollectionApiService) CertificateCollectionsPut(ctx context.Context) ApiCertificateCollectionsPutRequest {

	xKeyfactorRequestedWith := "APIClient"

	return ApiCertificateCollectionsPutRequest{
		ApiService: a,
		ctx:        ctx,

		xKeyfactorRequestedWith: &xKeyfactorRequestedWith,
	}
}

// Execute executes the request
//
//	@return KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse
func (a *CertificateCollectionApiService) CertificateCollectionsPutExecute(r ApiCertificateCollectionsPutRequest) (*KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KeyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionResponse
	)

	apiBasePath := a.client.cfg.APIPath
	if apiBasePath == "" {
		apiBasePath = "/KeyfactorAPI"
	}

	localVarPath := apiBasePath + "/CertificateCollections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xKeyfactorRequestedWith == nil {
		return localVarReturnValue, nil, reportError("xKeyfactorRequestedWith is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xKeyfactorApiVersion != nil {
		parameterAddToQuery(localVarHeaderParams, "x-keyfactor-api-version", r.xKeyfactorApiVersion, "")
	}
	parameterAddToQuery(localVarHeaderParams, "x-keyfactor-requested-with", r.xKeyfactorRequestedWith, "")
	// body params
	localVarPostBody = r.keyfactorWebKeyfactorApiModelsCertificateCollectionsCertificateCollectionUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
