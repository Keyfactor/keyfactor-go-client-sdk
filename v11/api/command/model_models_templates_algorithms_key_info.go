/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsTemplatesAlgorithmsKeyInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsTemplatesAlgorithmsKeyInfo{}

// ModelsTemplatesAlgorithmsKeyInfo struct for ModelsTemplatesAlgorithmsKeyInfo
type ModelsTemplatesAlgorithmsKeyInfo struct {
	Ecdsa   *ModelsTemplatesAlgorithmsAlgorithmData `json:"ecdsa,omitempty"`
	Rsa     *ModelsTemplatesAlgorithmsAlgorithmData `json:"rsa,omitempty"`
	Ed448   *ModelsTemplatesAlgorithmsAlgorithmData `json:"ed448,omitempty"`
	Ed25519 *ModelsTemplatesAlgorithmsAlgorithmData `json:"ed25519,omitempty"`
}

// NewModelsTemplatesAlgorithmsKeyInfo instantiates a new ModelsTemplatesAlgorithmsKeyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTemplatesAlgorithmsKeyInfo() *ModelsTemplatesAlgorithmsKeyInfo {
	this := ModelsTemplatesAlgorithmsKeyInfo{}
	return &this
}

// NewModelsTemplatesAlgorithmsKeyInfoWithDefaults instantiates a new ModelsTemplatesAlgorithmsKeyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTemplatesAlgorithmsKeyInfoWithDefaults() *ModelsTemplatesAlgorithmsKeyInfo {
	this := ModelsTemplatesAlgorithmsKeyInfo{}
	return &this
}

// GetEcdsa returns the Ecdsa field value if set, zero value otherwise.
func (o *ModelsTemplatesAlgorithmsKeyInfo) GetEcdsa() ModelsTemplatesAlgorithmsAlgorithmData {
	if o == nil || isNil(o.Ecdsa) {
		var ret ModelsTemplatesAlgorithmsAlgorithmData
		return ret
	}
	return *o.Ecdsa
}

// GetEcdsaOk returns a tuple with the Ecdsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTemplatesAlgorithmsKeyInfo) GetEcdsaOk() (*ModelsTemplatesAlgorithmsAlgorithmData, bool) {
	if o == nil || isNil(o.Ecdsa) {
		return nil, false
	}
	return o.Ecdsa, true
}

// HasEcdsa returns a boolean if a field has been set.
func (o *ModelsTemplatesAlgorithmsKeyInfo) HasEcdsa() bool {
	if o != nil && !isNil(o.Ecdsa) {
		return true
	}

	return false
}

// SetEcdsa gets a reference to the given ModelsTemplatesAlgorithmsAlgorithmData and assigns it to the Ecdsa field.
func (o *ModelsTemplatesAlgorithmsKeyInfo) SetEcdsa(v ModelsTemplatesAlgorithmsAlgorithmData) {
	o.Ecdsa = &v
}

// GetRsa returns the Rsa field value if set, zero value otherwise.
func (o *ModelsTemplatesAlgorithmsKeyInfo) GetRsa() ModelsTemplatesAlgorithmsAlgorithmData {
	if o == nil || isNil(o.Rsa) {
		var ret ModelsTemplatesAlgorithmsAlgorithmData
		return ret
	}
	return *o.Rsa
}

// GetRsaOk returns a tuple with the Rsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTemplatesAlgorithmsKeyInfo) GetRsaOk() (*ModelsTemplatesAlgorithmsAlgorithmData, bool) {
	if o == nil || isNil(o.Rsa) {
		return nil, false
	}
	return o.Rsa, true
}

// HasRsa returns a boolean if a field has been set.
func (o *ModelsTemplatesAlgorithmsKeyInfo) HasRsa() bool {
	if o != nil && !isNil(o.Rsa) {
		return true
	}

	return false
}

// SetRsa gets a reference to the given ModelsTemplatesAlgorithmsAlgorithmData and assigns it to the Rsa field.
func (o *ModelsTemplatesAlgorithmsKeyInfo) SetRsa(v ModelsTemplatesAlgorithmsAlgorithmData) {
	o.Rsa = &v
}

// GetEd448 returns the Ed448 field value if set, zero value otherwise.
func (o *ModelsTemplatesAlgorithmsKeyInfo) GetEd448() ModelsTemplatesAlgorithmsAlgorithmData {
	if o == nil || isNil(o.Ed448) {
		var ret ModelsTemplatesAlgorithmsAlgorithmData
		return ret
	}
	return *o.Ed448
}

// GetEd448Ok returns a tuple with the Ed448 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTemplatesAlgorithmsKeyInfo) GetEd448Ok() (*ModelsTemplatesAlgorithmsAlgorithmData, bool) {
	if o == nil || isNil(o.Ed448) {
		return nil, false
	}
	return o.Ed448, true
}

// HasEd448 returns a boolean if a field has been set.
func (o *ModelsTemplatesAlgorithmsKeyInfo) HasEd448() bool {
	if o != nil && !isNil(o.Ed448) {
		return true
	}

	return false
}

// SetEd448 gets a reference to the given ModelsTemplatesAlgorithmsAlgorithmData and assigns it to the Ed448 field.
func (o *ModelsTemplatesAlgorithmsKeyInfo) SetEd448(v ModelsTemplatesAlgorithmsAlgorithmData) {
	o.Ed448 = &v
}

// GetEd25519 returns the Ed25519 field value if set, zero value otherwise.
func (o *ModelsTemplatesAlgorithmsKeyInfo) GetEd25519() ModelsTemplatesAlgorithmsAlgorithmData {
	if o == nil || isNil(o.Ed25519) {
		var ret ModelsTemplatesAlgorithmsAlgorithmData
		return ret
	}
	return *o.Ed25519
}

// GetEd25519Ok returns a tuple with the Ed25519 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTemplatesAlgorithmsKeyInfo) GetEd25519Ok() (*ModelsTemplatesAlgorithmsAlgorithmData, bool) {
	if o == nil || isNil(o.Ed25519) {
		return nil, false
	}
	return o.Ed25519, true
}

// HasEd25519 returns a boolean if a field has been set.
func (o *ModelsTemplatesAlgorithmsKeyInfo) HasEd25519() bool {
	if o != nil && !isNil(o.Ed25519) {
		return true
	}

	return false
}

// SetEd25519 gets a reference to the given ModelsTemplatesAlgorithmsAlgorithmData and assigns it to the Ed25519 field.
func (o *ModelsTemplatesAlgorithmsKeyInfo) SetEd25519(v ModelsTemplatesAlgorithmsAlgorithmData) {
	o.Ed25519 = &v
}

func (o ModelsTemplatesAlgorithmsKeyInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsTemplatesAlgorithmsKeyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Ecdsa) {
		toSerialize["ecdsa"] = o.Ecdsa
	}
	if !isNil(o.Rsa) {
		toSerialize["rsa"] = o.Rsa
	}
	if !isNil(o.Ed448) {
		toSerialize["ed448"] = o.Ed448
	}
	if !isNil(o.Ed25519) {
		toSerialize["ed25519"] = o.Ed25519
	}
	return toSerialize, nil
}

type NullableModelsTemplatesAlgorithmsKeyInfo struct {
	value *ModelsTemplatesAlgorithmsKeyInfo
	isSet bool
}

func (v NullableModelsTemplatesAlgorithmsKeyInfo) Get() *ModelsTemplatesAlgorithmsKeyInfo {
	return v.value
}

func (v *NullableModelsTemplatesAlgorithmsKeyInfo) Set(val *ModelsTemplatesAlgorithmsKeyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTemplatesAlgorithmsKeyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTemplatesAlgorithmsKeyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTemplatesAlgorithmsKeyInfo(val *ModelsTemplatesAlgorithmsKeyInfo) *NullableModelsTemplatesAlgorithmsKeyInfo {
	return &NullableModelsTemplatesAlgorithmsKeyInfo{value: val, isSet: true}
}

func (v NullableModelsTemplatesAlgorithmsKeyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTemplatesAlgorithmsKeyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
