/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsRevocationSuspendedRevocationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsRevocationSuspendedRevocationResponse{}

// ModelsRevocationSuspendedRevocationResponse struct for ModelsRevocationSuspendedRevocationResponse
type ModelsRevocationSuspendedRevocationResponse struct {
	CertId     *int32         `json:"certId,omitempty"`
	WorkflowId *string        `json:"workflowId,omitempty"`
	Message    NullableString `json:"message,omitempty"`
}

// NewModelsRevocationSuspendedRevocationResponse instantiates a new ModelsRevocationSuspendedRevocationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsRevocationSuspendedRevocationResponse() *ModelsRevocationSuspendedRevocationResponse {
	this := ModelsRevocationSuspendedRevocationResponse{}
	return &this
}

// NewModelsRevocationSuspendedRevocationResponseWithDefaults instantiates a new ModelsRevocationSuspendedRevocationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsRevocationSuspendedRevocationResponseWithDefaults() *ModelsRevocationSuspendedRevocationResponse {
	this := ModelsRevocationSuspendedRevocationResponse{}
	return &this
}

// GetCertId returns the CertId field value if set, zero value otherwise.
func (o *ModelsRevocationSuspendedRevocationResponse) GetCertId() int32 {
	if o == nil || isNil(o.CertId) {
		var ret int32
		return ret
	}
	return *o.CertId
}

// GetCertIdOk returns a tuple with the CertId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRevocationSuspendedRevocationResponse) GetCertIdOk() (*int32, bool) {
	if o == nil || isNil(o.CertId) {
		return nil, false
	}
	return o.CertId, true
}

// HasCertId returns a boolean if a field has been set.
func (o *ModelsRevocationSuspendedRevocationResponse) HasCertId() bool {
	if o != nil && !isNil(o.CertId) {
		return true
	}

	return false
}

// SetCertId gets a reference to the given int32 and assigns it to the CertId field.
func (o *ModelsRevocationSuspendedRevocationResponse) SetCertId(v int32) {
	o.CertId = &v
}

// GetWorkflowId returns the WorkflowId field value if set, zero value otherwise.
func (o *ModelsRevocationSuspendedRevocationResponse) GetWorkflowId() string {
	if o == nil || isNil(o.WorkflowId) {
		var ret string
		return ret
	}
	return *o.WorkflowId
}

// GetWorkflowIdOk returns a tuple with the WorkflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRevocationSuspendedRevocationResponse) GetWorkflowIdOk() (*string, bool) {
	if o == nil || isNil(o.WorkflowId) {
		return nil, false
	}
	return o.WorkflowId, true
}

// HasWorkflowId returns a boolean if a field has been set.
func (o *ModelsRevocationSuspendedRevocationResponse) HasWorkflowId() bool {
	if o != nil && !isNil(o.WorkflowId) {
		return true
	}

	return false
}

// SetWorkflowId gets a reference to the given string and assigns it to the WorkflowId field.
func (o *ModelsRevocationSuspendedRevocationResponse) SetWorkflowId(v string) {
	o.WorkflowId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsRevocationSuspendedRevocationResponse) GetMessage() string {
	if o == nil || isNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsRevocationSuspendedRevocationResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *ModelsRevocationSuspendedRevocationResponse) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *ModelsRevocationSuspendedRevocationResponse) SetMessage(v string) {
	o.Message.Set(&v)
}

// SetMessageNil sets the value for Message to be an explicit nil
func (o *ModelsRevocationSuspendedRevocationResponse) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *ModelsRevocationSuspendedRevocationResponse) UnsetMessage() {
	o.Message.Unset()
}

func (o ModelsRevocationSuspendedRevocationResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsRevocationSuspendedRevocationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CertId) {
		toSerialize["certId"] = o.CertId
	}
	if !isNil(o.WorkflowId) {
		toSerialize["workflowId"] = o.WorkflowId
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	return toSerialize, nil
}

type NullableModelsRevocationSuspendedRevocationResponse struct {
	value *ModelsRevocationSuspendedRevocationResponse
	isSet bool
}

func (v NullableModelsRevocationSuspendedRevocationResponse) Get() *ModelsRevocationSuspendedRevocationResponse {
	return v.value
}

func (v *NullableModelsRevocationSuspendedRevocationResponse) Set(val *ModelsRevocationSuspendedRevocationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsRevocationSuspendedRevocationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsRevocationSuspendedRevocationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsRevocationSuspendedRevocationResponse(val *ModelsRevocationSuspendedRevocationResponse) *NullableModelsRevocationSuspendedRevocationResponse {
	return &NullableModelsRevocationSuspendedRevocationResponse{value: val, isSet: true}
}

func (v NullableModelsRevocationSuspendedRevocationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsRevocationSuspendedRevocationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
