/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsReport{}

// ModelsReport struct for ModelsReport
type ModelsReport struct {
	Id                      *int32                   `json:"id,omitempty"`
	Scheduled               NullableInt32            `json:"scheduled,omitempty"`
	DisplayName             NullableString           `json:"displayName,omitempty"`
	Description             NullableString           `json:"description,omitempty"`
	ReportPath              NullableString           `json:"reportPath,omitempty"`
	VersionNumber           NullableString           `json:"versionNumber,omitempty"`
	Categories              NullableString           `json:"categories,omitempty"`
	ShortName               NullableString           `json:"shortName,omitempty"`
	InNavigator             *bool                    `json:"inNavigator,omitempty"`
	Favorite                *bool                    `json:"favorite,omitempty"`
	RemoveDuplicates        *bool                    `json:"removeDuplicates,omitempty"`
	UsesCollection          *bool                    `json:"usesCollection,omitempty"`
	ReportParameter         []ModelsReportParameters `json:"reportParameter,omitempty"`
	Schedules               []ModelsReportSchedule   `json:"schedules,omitempty"`
	AcceptedScheduleFormats []string                 `json:"acceptedScheduleFormats,omitempty"`
}

// NewModelsReport instantiates a new ModelsReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsReport() *ModelsReport {
	this := ModelsReport{}
	return &this
}

// NewModelsReportWithDefaults instantiates a new ModelsReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsReportWithDefaults() *ModelsReport {
	this := ModelsReport{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsReport) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsReport) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsReport) SetId(v int32) {
	o.Id = &v
}

// GetScheduled returns the Scheduled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReport) GetScheduled() int32 {
	if o == nil || isNil(o.Scheduled.Get()) {
		var ret int32
		return ret
	}
	return *o.Scheduled.Get()
}

// GetScheduledOk returns a tuple with the Scheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReport) GetScheduledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scheduled.Get(), o.Scheduled.IsSet()
}

// HasScheduled returns a boolean if a field has been set.
func (o *ModelsReport) HasScheduled() bool {
	if o != nil && o.Scheduled.IsSet() {
		return true
	}

	return false
}

// SetScheduled gets a reference to the given NullableInt32 and assigns it to the Scheduled field.
func (o *ModelsReport) SetScheduled(v int32) {
	o.Scheduled.Set(&v)
}

// SetScheduledNil sets the value for Scheduled to be an explicit nil
func (o *ModelsReport) SetScheduledNil() {
	o.Scheduled.Set(nil)
}

// UnsetScheduled ensures that no value is present for Scheduled, not even an explicit nil
func (o *ModelsReport) UnsetScheduled() {
	o.Scheduled.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReport) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReport) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ModelsReport) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *ModelsReport) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}

// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *ModelsReport) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *ModelsReport) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReport) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReport) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelsReport) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ModelsReport) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ModelsReport) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ModelsReport) UnsetDescription() {
	o.Description.Unset()
}

// GetReportPath returns the ReportPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReport) GetReportPath() string {
	if o == nil || isNil(o.ReportPath.Get()) {
		var ret string
		return ret
	}
	return *o.ReportPath.Get()
}

// GetReportPathOk returns a tuple with the ReportPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReport) GetReportPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReportPath.Get(), o.ReportPath.IsSet()
}

// HasReportPath returns a boolean if a field has been set.
func (o *ModelsReport) HasReportPath() bool {
	if o != nil && o.ReportPath.IsSet() {
		return true
	}

	return false
}

// SetReportPath gets a reference to the given NullableString and assigns it to the ReportPath field.
func (o *ModelsReport) SetReportPath(v string) {
	o.ReportPath.Set(&v)
}

// SetReportPathNil sets the value for ReportPath to be an explicit nil
func (o *ModelsReport) SetReportPathNil() {
	o.ReportPath.Set(nil)
}

// UnsetReportPath ensures that no value is present for ReportPath, not even an explicit nil
func (o *ModelsReport) UnsetReportPath() {
	o.ReportPath.Unset()
}

// GetVersionNumber returns the VersionNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReport) GetVersionNumber() string {
	if o == nil || isNil(o.VersionNumber.Get()) {
		var ret string
		return ret
	}
	return *o.VersionNumber.Get()
}

// GetVersionNumberOk returns a tuple with the VersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReport) GetVersionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionNumber.Get(), o.VersionNumber.IsSet()
}

// HasVersionNumber returns a boolean if a field has been set.
func (o *ModelsReport) HasVersionNumber() bool {
	if o != nil && o.VersionNumber.IsSet() {
		return true
	}

	return false
}

// SetVersionNumber gets a reference to the given NullableString and assigns it to the VersionNumber field.
func (o *ModelsReport) SetVersionNumber(v string) {
	o.VersionNumber.Set(&v)
}

// SetVersionNumberNil sets the value for VersionNumber to be an explicit nil
func (o *ModelsReport) SetVersionNumberNil() {
	o.VersionNumber.Set(nil)
}

// UnsetVersionNumber ensures that no value is present for VersionNumber, not even an explicit nil
func (o *ModelsReport) UnsetVersionNumber() {
	o.VersionNumber.Unset()
}

// GetCategories returns the Categories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReport) GetCategories() string {
	if o == nil || isNil(o.Categories.Get()) {
		var ret string
		return ret
	}
	return *o.Categories.Get()
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReport) GetCategoriesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Categories.Get(), o.Categories.IsSet()
}

// HasCategories returns a boolean if a field has been set.
func (o *ModelsReport) HasCategories() bool {
	if o != nil && o.Categories.IsSet() {
		return true
	}

	return false
}

// SetCategories gets a reference to the given NullableString and assigns it to the Categories field.
func (o *ModelsReport) SetCategories(v string) {
	o.Categories.Set(&v)
}

// SetCategoriesNil sets the value for Categories to be an explicit nil
func (o *ModelsReport) SetCategoriesNil() {
	o.Categories.Set(nil)
}

// UnsetCategories ensures that no value is present for Categories, not even an explicit nil
func (o *ModelsReport) UnsetCategories() {
	o.Categories.Unset()
}

// GetShortName returns the ShortName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReport) GetShortName() string {
	if o == nil || isNil(o.ShortName.Get()) {
		var ret string
		return ret
	}
	return *o.ShortName.Get()
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReport) GetShortNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShortName.Get(), o.ShortName.IsSet()
}

// HasShortName returns a boolean if a field has been set.
func (o *ModelsReport) HasShortName() bool {
	if o != nil && o.ShortName.IsSet() {
		return true
	}

	return false
}

// SetShortName gets a reference to the given NullableString and assigns it to the ShortName field.
func (o *ModelsReport) SetShortName(v string) {
	o.ShortName.Set(&v)
}

// SetShortNameNil sets the value for ShortName to be an explicit nil
func (o *ModelsReport) SetShortNameNil() {
	o.ShortName.Set(nil)
}

// UnsetShortName ensures that no value is present for ShortName, not even an explicit nil
func (o *ModelsReport) UnsetShortName() {
	o.ShortName.Unset()
}

// GetInNavigator returns the InNavigator field value if set, zero value otherwise.
func (o *ModelsReport) GetInNavigator() bool {
	if o == nil || isNil(o.InNavigator) {
		var ret bool
		return ret
	}
	return *o.InNavigator
}

// GetInNavigatorOk returns a tuple with the InNavigator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetInNavigatorOk() (*bool, bool) {
	if o == nil || isNil(o.InNavigator) {
		return nil, false
	}
	return o.InNavigator, true
}

// HasInNavigator returns a boolean if a field has been set.
func (o *ModelsReport) HasInNavigator() bool {
	if o != nil && !isNil(o.InNavigator) {
		return true
	}

	return false
}

// SetInNavigator gets a reference to the given bool and assigns it to the InNavigator field.
func (o *ModelsReport) SetInNavigator(v bool) {
	o.InNavigator = &v
}

// GetFavorite returns the Favorite field value if set, zero value otherwise.
func (o *ModelsReport) GetFavorite() bool {
	if o == nil || isNil(o.Favorite) {
		var ret bool
		return ret
	}
	return *o.Favorite
}

// GetFavoriteOk returns a tuple with the Favorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetFavoriteOk() (*bool, bool) {
	if o == nil || isNil(o.Favorite) {
		return nil, false
	}
	return o.Favorite, true
}

// HasFavorite returns a boolean if a field has been set.
func (o *ModelsReport) HasFavorite() bool {
	if o != nil && !isNil(o.Favorite) {
		return true
	}

	return false
}

// SetFavorite gets a reference to the given bool and assigns it to the Favorite field.
func (o *ModelsReport) SetFavorite(v bool) {
	o.Favorite = &v
}

// GetRemoveDuplicates returns the RemoveDuplicates field value if set, zero value otherwise.
func (o *ModelsReport) GetRemoveDuplicates() bool {
	if o == nil || isNil(o.RemoveDuplicates) {
		var ret bool
		return ret
	}
	return *o.RemoveDuplicates
}

// GetRemoveDuplicatesOk returns a tuple with the RemoveDuplicates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetRemoveDuplicatesOk() (*bool, bool) {
	if o == nil || isNil(o.RemoveDuplicates) {
		return nil, false
	}
	return o.RemoveDuplicates, true
}

// HasRemoveDuplicates returns a boolean if a field has been set.
func (o *ModelsReport) HasRemoveDuplicates() bool {
	if o != nil && !isNil(o.RemoveDuplicates) {
		return true
	}

	return false
}

// SetRemoveDuplicates gets a reference to the given bool and assigns it to the RemoveDuplicates field.
func (o *ModelsReport) SetRemoveDuplicates(v bool) {
	o.RemoveDuplicates = &v
}

// GetUsesCollection returns the UsesCollection field value if set, zero value otherwise.
func (o *ModelsReport) GetUsesCollection() bool {
	if o == nil || isNil(o.UsesCollection) {
		var ret bool
		return ret
	}
	return *o.UsesCollection
}

// GetUsesCollectionOk returns a tuple with the UsesCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReport) GetUsesCollectionOk() (*bool, bool) {
	if o == nil || isNil(o.UsesCollection) {
		return nil, false
	}
	return o.UsesCollection, true
}

// HasUsesCollection returns a boolean if a field has been set.
func (o *ModelsReport) HasUsesCollection() bool {
	if o != nil && !isNil(o.UsesCollection) {
		return true
	}

	return false
}

// SetUsesCollection gets a reference to the given bool and assigns it to the UsesCollection field.
func (o *ModelsReport) SetUsesCollection(v bool) {
	o.UsesCollection = &v
}

// GetReportParameter returns the ReportParameter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReport) GetReportParameter() []ModelsReportParameters {
	if o == nil {
		var ret []ModelsReportParameters
		return ret
	}
	return o.ReportParameter
}

// GetReportParameterOk returns a tuple with the ReportParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReport) GetReportParameterOk() ([]ModelsReportParameters, bool) {
	if o == nil || isNil(o.ReportParameter) {
		return nil, false
	}
	return o.ReportParameter, true
}

// HasReportParameter returns a boolean if a field has been set.
func (o *ModelsReport) HasReportParameter() bool {
	if o != nil && isNil(o.ReportParameter) {
		return true
	}

	return false
}

// SetReportParameter gets a reference to the given []ModelsReportParameters and assigns it to the ReportParameter field.
func (o *ModelsReport) SetReportParameter(v []ModelsReportParameters) {
	o.ReportParameter = v
}

// GetSchedules returns the Schedules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReport) GetSchedules() []ModelsReportSchedule {
	if o == nil {
		var ret []ModelsReportSchedule
		return ret
	}
	return o.Schedules
}

// GetSchedulesOk returns a tuple with the Schedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReport) GetSchedulesOk() ([]ModelsReportSchedule, bool) {
	if o == nil || isNil(o.Schedules) {
		return nil, false
	}
	return o.Schedules, true
}

// HasSchedules returns a boolean if a field has been set.
func (o *ModelsReport) HasSchedules() bool {
	if o != nil && isNil(o.Schedules) {
		return true
	}

	return false
}

// SetSchedules gets a reference to the given []ModelsReportSchedule and assigns it to the Schedules field.
func (o *ModelsReport) SetSchedules(v []ModelsReportSchedule) {
	o.Schedules = v
}

// GetAcceptedScheduleFormats returns the AcceptedScheduleFormats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelsReport) GetAcceptedScheduleFormats() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AcceptedScheduleFormats
}

// GetAcceptedScheduleFormatsOk returns a tuple with the AcceptedScheduleFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelsReport) GetAcceptedScheduleFormatsOk() ([]string, bool) {
	if o == nil || isNil(o.AcceptedScheduleFormats) {
		return nil, false
	}
	return o.AcceptedScheduleFormats, true
}

// HasAcceptedScheduleFormats returns a boolean if a field has been set.
func (o *ModelsReport) HasAcceptedScheduleFormats() bool {
	if o != nil && isNil(o.AcceptedScheduleFormats) {
		return true
	}

	return false
}

// SetAcceptedScheduleFormats gets a reference to the given []string and assigns it to the AcceptedScheduleFormats field.
func (o *ModelsReport) SetAcceptedScheduleFormats(v []string) {
	o.AcceptedScheduleFormats = v
}

func (o ModelsReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Scheduled.IsSet() {
		toSerialize["scheduled"] = o.Scheduled.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ReportPath.IsSet() {
		toSerialize["reportPath"] = o.ReportPath.Get()
	}
	if o.VersionNumber.IsSet() {
		toSerialize["versionNumber"] = o.VersionNumber.Get()
	}
	if o.Categories.IsSet() {
		toSerialize["categories"] = o.Categories.Get()
	}
	if o.ShortName.IsSet() {
		toSerialize["shortName"] = o.ShortName.Get()
	}
	if !isNil(o.InNavigator) {
		toSerialize["inNavigator"] = o.InNavigator
	}
	if !isNil(o.Favorite) {
		toSerialize["favorite"] = o.Favorite
	}
	if !isNil(o.RemoveDuplicates) {
		toSerialize["removeDuplicates"] = o.RemoveDuplicates
	}
	if !isNil(o.UsesCollection) {
		toSerialize["usesCollection"] = o.UsesCollection
	}
	if o.ReportParameter != nil {
		toSerialize["reportParameter"] = o.ReportParameter
	}
	if o.Schedules != nil {
		toSerialize["schedules"] = o.Schedules
	}
	if o.AcceptedScheduleFormats != nil {
		toSerialize["acceptedScheduleFormats"] = o.AcceptedScheduleFormats
	}
	return toSerialize, nil
}

type NullableModelsReport struct {
	value *ModelsReport
	isSet bool
}

func (v NullableModelsReport) Get() *ModelsReport {
	return v.value
}

func (v *NullableModelsReport) Set(val *ModelsReport) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsReport) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsReport(val *ModelsReport) *NullableModelsReport {
	return &NullableModelsReport{value: val, isSet: true}
}

func (v NullableModelsReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
