/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor API Reference and Utility

<p>This page provides a utility through which the Keyfactor API endpoints can be called and results returned.                                                           It is intended to be used primarily for validation, testing and workflow development.                                                           It also serves secondarily as documentation for the API.</p>                                                          <p>If you would like to view documentation containing details on the Keyfactor API and endpoints,                                                           please refer to the Web API section of the Keyfactor Command documentation.</p>

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the CSSCMSDataModelModelsCertStoreNewPasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSSCMSDataModelModelsCertStoreNewPasswordRequest{}

// CSSCMSDataModelModelsCertStoreNewPasswordRequest struct for CSSCMSDataModelModelsCertStoreNewPasswordRequest
type CSSCMSDataModelModelsCertStoreNewPasswordRequest struct {
	CertStoreId string      `json:"certStoreId"`
	NewPassword interface{} `json:"newPassword"`
}

// NewCSSCMSDataModelModelsCertStoreNewPasswordRequest instantiates a new CSSCMSDataModelModelsCertStoreNewPasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSSCMSDataModelModelsCertStoreNewPasswordRequest(certStoreId string, newPassword interface{}) *CSSCMSDataModelModelsCertStoreNewPasswordRequest {
	this := CSSCMSDataModelModelsCertStoreNewPasswordRequest{}
	this.CertStoreId = certStoreId
	this.NewPassword = newPassword
	return &this
}

// NewCSSCMSDataModelModelsCertStoreNewPasswordRequestWithDefaults instantiates a new CSSCMSDataModelModelsCertStoreNewPasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSSCMSDataModelModelsCertStoreNewPasswordRequestWithDefaults() *CSSCMSDataModelModelsCertStoreNewPasswordRequest {
	this := CSSCMSDataModelModelsCertStoreNewPasswordRequest{}
	return &this
}

// GetCertStoreId returns the CertStoreId field value
func (o *CSSCMSDataModelModelsCertStoreNewPasswordRequest) GetCertStoreId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertStoreId
}

// GetCertStoreIdOk returns a tuple with the CertStoreId field value
// and a boolean to check if the value has been set.
func (o *CSSCMSDataModelModelsCertStoreNewPasswordRequest) GetCertStoreIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertStoreId, true
}

// SetCertStoreId sets field value
func (o *CSSCMSDataModelModelsCertStoreNewPasswordRequest) SetCertStoreId(v string) {
	o.CertStoreId = v
}

// GetNewPassword returns the NewPassword field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CSSCMSDataModelModelsCertStoreNewPasswordRequest) GetNewPassword() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSSCMSDataModelModelsCertStoreNewPasswordRequest) GetNewPasswordOk() (*interface{}, bool) {
	if o == nil || isNil(o.NewPassword) {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *CSSCMSDataModelModelsCertStoreNewPasswordRequest) SetNewPassword(v interface{}) {
	o.NewPassword = v
}

func (o CSSCMSDataModelModelsCertStoreNewPasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSSCMSDataModelModelsCertStoreNewPasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certStoreId"] = o.CertStoreId
	if o.NewPassword != nil {
		toSerialize["newPassword"] = o.NewPassword
	}
	return toSerialize, nil
}

type NullableCSSCMSDataModelModelsCertStoreNewPasswordRequest struct {
	value *CSSCMSDataModelModelsCertStoreNewPasswordRequest
	isSet bool
}

func (v NullableCSSCMSDataModelModelsCertStoreNewPasswordRequest) Get() *CSSCMSDataModelModelsCertStoreNewPasswordRequest {
	return v.value
}

func (v *NullableCSSCMSDataModelModelsCertStoreNewPasswordRequest) Set(val *CSSCMSDataModelModelsCertStoreNewPasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCSSCMSDataModelModelsCertStoreNewPasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCSSCMSDataModelModelsCertStoreNewPasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSSCMSDataModelModelsCertStoreNewPasswordRequest(val *CSSCMSDataModelModelsCertStoreNewPasswordRequest) *NullableCSSCMSDataModelModelsCertStoreNewPasswordRequest {
	return &NullableCSSCMSDataModelModelsCertStoreNewPasswordRequest{value: val, isSet: true}
}

func (v NullableCSSCMSDataModelModelsCertStoreNewPasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSSCMSDataModelModelsCertStoreNewPasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
