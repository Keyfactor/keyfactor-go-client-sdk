/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsSecuritySecurityRolesSecurityRoleUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsSecuritySecurityRolesSecurityRoleUpdateRequest{}

// ModelsSecuritySecurityRolesSecurityRoleUpdateRequest struct for ModelsSecuritySecurityRolesSecurityRoleUpdateRequest
type ModelsSecuritySecurityRolesSecurityRoleUpdateRequest struct {
	// The Id of the security role to update
	Id int64 `json:"Id"`
	// The name of the security role to update
	Name string `json:"Name"`
	// The description to be used on the updated security role
	Description string `json:"Description"`
	// Whether or not the security role should be enabled
	Enabled *bool `json:"Enabled,omitempty"`
	// Whether or not the security role should be private
	Private *bool `json:"Private,omitempty"`
	// The permissions to include in the role. These must be supplied in the format \"Area:Permission\"
	Permissions []string `json:"Permissions,omitempty"`
	// The Keyfactor identities to assign to the updated role
	Identities           []ModelsSecurityIdentitiesSecurityIdentityIdentifier `json:"Identities,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsSecuritySecurityRolesSecurityRoleUpdateRequest ModelsSecuritySecurityRolesSecurityRoleUpdateRequest

// NewModelsSecuritySecurityRolesSecurityRoleUpdateRequest instantiates a new ModelsSecuritySecurityRolesSecurityRoleUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsSecuritySecurityRolesSecurityRoleUpdateRequest(id int64, name string, description string) *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest {
	this := ModelsSecuritySecurityRolesSecurityRoleUpdateRequest{}
	this.Id = id
	this.Name = name
	this.Description = description
	return &this
}

// NewModelsSecuritySecurityRolesSecurityRoleUpdateRequestWithDefaults instantiates a new ModelsSecuritySecurityRolesSecurityRoleUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsSecuritySecurityRolesSecurityRoleUpdateRequestWithDefaults() *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest {
	this := ModelsSecuritySecurityRolesSecurityRoleUpdateRequest{}
	return &this
}

// GetId returns the Id field value
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) SetDescription(v string) {
	o.Description = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetPrivate() bool {
	if o == nil || isNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetPrivateOk() (*bool, bool) {
	if o == nil || isNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) HasPrivate() bool {
	if o != nil && !isNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) SetPrivate(v bool) {
	o.Private = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetPermissions() []string {
	if o == nil || isNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetPermissionsOk() ([]string, bool) {
	if o == nil || isNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) HasPermissions() bool {
	if o != nil && !isNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) SetPermissions(v []string) {
	o.Permissions = v
}

// GetIdentities returns the Identities field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetIdentities() []ModelsSecurityIdentitiesSecurityIdentityIdentifier {
	if o == nil || isNil(o.Identities) {
		var ret []ModelsSecurityIdentitiesSecurityIdentityIdentifier
		return ret
	}
	return o.Identities
}

// GetIdentitiesOk returns a tuple with the Identities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) GetIdentitiesOk() ([]ModelsSecurityIdentitiesSecurityIdentityIdentifier, bool) {
	if o == nil || isNil(o.Identities) {
		return nil, false
	}
	return o.Identities, true
}

// HasIdentities returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) HasIdentities() bool {
	if o != nil && !isNil(o.Identities) {
		return true
	}

	return false
}

// SetIdentities gets a reference to the given []ModelsSecurityIdentitiesSecurityIdentityIdentifier and assigns it to the Identities field.
func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) SetIdentities(v []ModelsSecurityIdentitiesSecurityIdentityIdentifier) {
	o.Identities = v
}

func (o ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Id"] = o.Id
	toSerialize["Name"] = o.Name
	toSerialize["Description"] = o.Description
	if !isNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !isNil(o.Private) {
		toSerialize["Private"] = o.Private
	}
	if !isNil(o.Permissions) {
		toSerialize["Permissions"] = o.Permissions
	}
	if !isNil(o.Identities) {
		toSerialize["Identities"] = o.Identities
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) UnmarshalJSON(bytes []byte) (err error) {
	varModelsSecuritySecurityRolesSecurityRoleUpdateRequest := _ModelsSecuritySecurityRolesSecurityRoleUpdateRequest{}

	if err = json.Unmarshal(bytes, &varModelsSecuritySecurityRolesSecurityRoleUpdateRequest); err == nil {
		*o = ModelsSecuritySecurityRolesSecurityRoleUpdateRequest(varModelsSecuritySecurityRolesSecurityRoleUpdateRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Id")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "Private")
		delete(additionalProperties, "Permissions")
		delete(additionalProperties, "Identities")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsSecuritySecurityRolesSecurityRoleUpdateRequest struct {
	value *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest
	isSet bool
}

func (v NullableModelsSecuritySecurityRolesSecurityRoleUpdateRequest) Get() *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest {
	return v.value
}

func (v *NullableModelsSecuritySecurityRolesSecurityRoleUpdateRequest) Set(val *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsSecuritySecurityRolesSecurityRoleUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsSecuritySecurityRolesSecurityRoleUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsSecuritySecurityRolesSecurityRoleUpdateRequest(val *ModelsSecuritySecurityRolesSecurityRoleUpdateRequest) *NullableModelsSecuritySecurityRolesSecurityRoleUpdateRequest {
	return &NullableModelsSecuritySecurityRolesSecurityRoleUpdateRequest{value: val, isSet: true}
}

func (v NullableModelsSecuritySecurityRolesSecurityRoleUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsSecuritySecurityRolesSecurityRoleUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
