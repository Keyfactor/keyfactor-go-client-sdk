/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsCertificateStoresCertificateStoreResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsCertificateStoresCertificateStoreResponse{}

// KeyfactorApiModelsCertificateStoresCertificateStoreResponse struct for KeyfactorApiModelsCertificateStoresCertificateStoreResponse
type KeyfactorApiModelsCertificateStoresCertificateStoreResponse struct {
	// A string indicating the GUID of the certificate store within Keyfactor Command. This ID is automatically set by Keyfactor Command.
	Id *string `json:"Id,omitempty"`
	// An integer indicating the ID of the certificate store's associated certificate store container, if applicable (see GET Certificate Store Containers).
	ContainerId *int32 `json:"ContainerId,omitempty"`
	// A string indicating the display name of the certificate store.
	DisplayName *string `json:"DisplayName,omitempty"`
	// The string value of the client machine. The value for this will vary depending on the certificate store type. For example, for a Java keystore or an F5 device, it is the hostname of the machine on which the store is located, but for an Amazon Web Services store, it is the FQDN of the Keyfactor Command Windows Orchestrator. See Adding or Modifying a Certificate Store in the Keyfactor Command Reference Guide for more information.
	ClientMachine *string `json:"ClientMachine,omitempty"`
	// A string indicating the path to the certificate store on the target. The format for this path will vary depending on the certificate store type. For example, for a Java keystore, this will be a file path (e.g. /opt/myapp/store.jks), but for an F5 device, this will be a partition name on the device (e.g. Common). See Adding or Modifying a Certificate Store in the Keyfactor Command Reference Guide for more information. The maximum number of characters supported in this field is 722.
	Storepath *string `json:"Storepath,omitempty"`
	// A string indicating the GUID that identifies the inventory job for the certificate store in the Keyfactor Command database. This will be null if an inventory schedule is not set for the certificate store.
	CertStoreInventoryJobId *string `json:"CertStoreInventoryJobId,omitempty"`
	// An integer indicating the ID of the certificate store type, as defined in Keyfactor Command, for this certificate store. (0-Javakeystore,2-PEMFile, 3-F5SSLProfiles,4-IISRoots, 5-NetScaler, 6-IISPersonal, 7-F5WebServer, 8-IISRevoked, 9-F5WebServerREST, 10-F5SSLProfilesREST, 11-F5CABundlesREST, 100-AmazonWebServices, 101-FileTransferProtocol)
	CertStoreType *int32 `json:"CertStoreType,omitempty"`
	// A Boolean that indicates whether a certificate store is approved (true) or not (false). If a certificate store is approved, it can be used and updated. A certificate store that has been discovered using the discover feature but not yet marked as approved will be false here.
	Approved *bool `json:"Approved,omitempty"`
	// A Boolean that indicates whether a new certificate store should be created with the information provided (true) or not (false). This option is only valid for Java keystores and any custom certificate store types you have defined to support this functionality.
	CreateIfMissing *bool `json:"CreateIfMissing,omitempty"`
	// Some types of certificate stores have additional properties that are stored in this parameter. The data is stored in a series of, typically, key value pairs that define the property name and value (see GET Certificate Store Types for more information).  As of Keyfactor Command v10, this parameter is used to store certificate store server usernames, server passwords, and the UseSSL flag. Built-in certificate stores that typically require configuration of certificate store server parameters include NetScaler and F5 stores. The legacy methods for managing certificate store server credentials have been deprecated but are retained for backwards compatiblity. For more information, see POST Certificate Stores Server.  When reading this field, the values are returned as simple key value pairs, with the values being individual values. When writing, the values are specified as objects, though they are typically single values.
	Properties *string `json:"Properties,omitempty"`
	// A string indicating the Keyfactor Command GUID of the orchestrator for this store.
	AgentId *string `json:"AgentId,omitempty"`
	// A Boolean that indicates whether there is an orchestrator assigned to this certificate store (true) or not (false).
	AgentAssigned *bool `json:"AgentAssigned,omitempty"`
	// A string indicating the name of the certificate store's associated container, if applicable.
	ContainerName      *string                                     `json:"ContainerName,omitempty"`
	InventorySchedule  *KeyfactorCommonSchedulingKeyfactorSchedule `json:"InventorySchedule,omitempty"`
	ReenrollmentStatus *ModelsReenrollmentStatus                   `json:"ReenrollmentStatus,omitempty"`
	// A Boolean that indicates whether the store password can be changed (true) or not (false).
	SetNewPasswordAllowed *bool `json:"SetNewPasswordAllowed,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _KeyfactorApiModelsCertificateStoresCertificateStoreResponse KeyfactorApiModelsCertificateStoresCertificateStoreResponse

// NewKeyfactorApiModelsCertificateStoresCertificateStoreResponse instantiates a new KeyfactorApiModelsCertificateStoresCertificateStoreResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsCertificateStoresCertificateStoreResponse() *KeyfactorApiModelsCertificateStoresCertificateStoreResponse {
	this := KeyfactorApiModelsCertificateStoresCertificateStoreResponse{}
	return &this
}

// NewKeyfactorApiModelsCertificateStoresCertificateStoreResponseWithDefaults instantiates a new KeyfactorApiModelsCertificateStoresCertificateStoreResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsCertificateStoresCertificateStoreResponseWithDefaults() *KeyfactorApiModelsCertificateStoresCertificateStoreResponse {
	this := KeyfactorApiModelsCertificateStoresCertificateStoreResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetId(v string) {
	o.Id = &v
}

// GetContainerId returns the ContainerId field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetContainerId() int32 {
	if o == nil || isNil(o.ContainerId) {
		var ret int32
		return ret
	}
	return *o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetContainerIdOk() (*int32, bool) {
	if o == nil || isNil(o.ContainerId) {
		return nil, false
	}
	return o.ContainerId, true
}

// HasContainerId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasContainerId() bool {
	if o != nil && !isNil(o.ContainerId) {
		return true
	}

	return false
}

// SetContainerId gets a reference to the given int32 and assigns it to the ContainerId field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetContainerId(v int32) {
	o.ContainerId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetClientMachine returns the ClientMachine field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetClientMachine() string {
	if o == nil || isNil(o.ClientMachine) {
		var ret string
		return ret
	}
	return *o.ClientMachine
}

// GetClientMachineOk returns a tuple with the ClientMachine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetClientMachineOk() (*string, bool) {
	if o == nil || isNil(o.ClientMachine) {
		return nil, false
	}
	return o.ClientMachine, true
}

// HasClientMachine returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasClientMachine() bool {
	if o != nil && !isNil(o.ClientMachine) {
		return true
	}

	return false
}

// SetClientMachine gets a reference to the given string and assigns it to the ClientMachine field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetClientMachine(v string) {
	o.ClientMachine = &v
}

// GetStorepath returns the Storepath field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetStorepath() string {
	if o == nil || isNil(o.Storepath) {
		var ret string
		return ret
	}
	return *o.Storepath
}

// GetStorepathOk returns a tuple with the Storepath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetStorepathOk() (*string, bool) {
	if o == nil || isNil(o.Storepath) {
		return nil, false
	}
	return o.Storepath, true
}

// HasStorepath returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasStorepath() bool {
	if o != nil && !isNil(o.Storepath) {
		return true
	}

	return false
}

// SetStorepath gets a reference to the given string and assigns it to the Storepath field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetStorepath(v string) {
	o.Storepath = &v
}

// GetCertStoreInventoryJobId returns the CertStoreInventoryJobId field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetCertStoreInventoryJobId() string {
	if o == nil || isNil(o.CertStoreInventoryJobId) {
		var ret string
		return ret
	}
	return *o.CertStoreInventoryJobId
}

// GetCertStoreInventoryJobIdOk returns a tuple with the CertStoreInventoryJobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetCertStoreInventoryJobIdOk() (*string, bool) {
	if o == nil || isNil(o.CertStoreInventoryJobId) {
		return nil, false
	}
	return o.CertStoreInventoryJobId, true
}

// HasCertStoreInventoryJobId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasCertStoreInventoryJobId() bool {
	if o != nil && !isNil(o.CertStoreInventoryJobId) {
		return true
	}

	return false
}

// SetCertStoreInventoryJobId gets a reference to the given string and assigns it to the CertStoreInventoryJobId field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetCertStoreInventoryJobId(v string) {
	o.CertStoreInventoryJobId = &v
}

// GetCertStoreType returns the CertStoreType field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetCertStoreType() int32 {
	if o == nil || isNil(o.CertStoreType) {
		var ret int32
		return ret
	}
	return *o.CertStoreType
}

// GetCertStoreTypeOk returns a tuple with the CertStoreType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetCertStoreTypeOk() (*int32, bool) {
	if o == nil || isNil(o.CertStoreType) {
		return nil, false
	}
	return o.CertStoreType, true
}

// HasCertStoreType returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasCertStoreType() bool {
	if o != nil && !isNil(o.CertStoreType) {
		return true
	}

	return false
}

// SetCertStoreType gets a reference to the given int32 and assigns it to the CertStoreType field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetCertStoreType(v int32) {
	o.CertStoreType = &v
}

// GetApproved returns the Approved field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetApproved() bool {
	if o == nil || isNil(o.Approved) {
		var ret bool
		return ret
	}
	return *o.Approved
}

// GetApprovedOk returns a tuple with the Approved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetApprovedOk() (*bool, bool) {
	if o == nil || isNil(o.Approved) {
		return nil, false
	}
	return o.Approved, true
}

// HasApproved returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasApproved() bool {
	if o != nil && !isNil(o.Approved) {
		return true
	}

	return false
}

// SetApproved gets a reference to the given bool and assigns it to the Approved field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetApproved(v bool) {
	o.Approved = &v
}

// GetCreateIfMissing returns the CreateIfMissing field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetCreateIfMissing() bool {
	if o == nil || isNil(o.CreateIfMissing) {
		var ret bool
		return ret
	}
	return *o.CreateIfMissing
}

// GetCreateIfMissingOk returns a tuple with the CreateIfMissing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetCreateIfMissingOk() (*bool, bool) {
	if o == nil || isNil(o.CreateIfMissing) {
		return nil, false
	}
	return o.CreateIfMissing, true
}

// HasCreateIfMissing returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasCreateIfMissing() bool {
	if o != nil && !isNil(o.CreateIfMissing) {
		return true
	}

	return false
}

// SetCreateIfMissing gets a reference to the given bool and assigns it to the CreateIfMissing field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetCreateIfMissing(v bool) {
	o.CreateIfMissing = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetProperties() string {
	if o == nil || isNil(o.Properties) {
		var ret string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetPropertiesOk() (*string, bool) {
	if o == nil || isNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasProperties() bool {
	if o != nil && !isNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given string and assigns it to the Properties field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetProperties(v string) {
	o.Properties = &v
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetAgentId() string {
	if o == nil || isNil(o.AgentId) {
		var ret string
		return ret
	}
	return *o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetAgentIdOk() (*string, bool) {
	if o == nil || isNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasAgentId() bool {
	if o != nil && !isNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given string and assigns it to the AgentId field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetAgentId(v string) {
	o.AgentId = &v
}

// GetAgentAssigned returns the AgentAssigned field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetAgentAssigned() bool {
	if o == nil || isNil(o.AgentAssigned) {
		var ret bool
		return ret
	}
	return *o.AgentAssigned
}

// GetAgentAssignedOk returns a tuple with the AgentAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetAgentAssignedOk() (*bool, bool) {
	if o == nil || isNil(o.AgentAssigned) {
		return nil, false
	}
	return o.AgentAssigned, true
}

// HasAgentAssigned returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasAgentAssigned() bool {
	if o != nil && !isNil(o.AgentAssigned) {
		return true
	}

	return false
}

// SetAgentAssigned gets a reference to the given bool and assigns it to the AgentAssigned field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetAgentAssigned(v bool) {
	o.AgentAssigned = &v
}

// GetContainerName returns the ContainerName field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetContainerName() string {
	if o == nil || isNil(o.ContainerName) {
		var ret string
		return ret
	}
	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetContainerNameOk() (*string, bool) {
	if o == nil || isNil(o.ContainerName) {
		return nil, false
	}
	return o.ContainerName, true
}

// HasContainerName returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasContainerName() bool {
	if o != nil && !isNil(o.ContainerName) {
		return true
	}

	return false
}

// SetContainerName gets a reference to the given string and assigns it to the ContainerName field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetContainerName(v string) {
	o.ContainerName = &v
}

// GetInventorySchedule returns the InventorySchedule field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetInventorySchedule() KeyfactorCommonSchedulingKeyfactorSchedule {
	if o == nil || isNil(o.InventorySchedule) {
		var ret KeyfactorCommonSchedulingKeyfactorSchedule
		return ret
	}
	return *o.InventorySchedule
}

// GetInventoryScheduleOk returns a tuple with the InventorySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetInventoryScheduleOk() (*KeyfactorCommonSchedulingKeyfactorSchedule, bool) {
	if o == nil || isNil(o.InventorySchedule) {
		return nil, false
	}
	return o.InventorySchedule, true
}

// HasInventorySchedule returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasInventorySchedule() bool {
	if o != nil && !isNil(o.InventorySchedule) {
		return true
	}

	return false
}

// SetInventorySchedule gets a reference to the given KeyfactorCommonSchedulingKeyfactorSchedule and assigns it to the InventorySchedule field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetInventorySchedule(v KeyfactorCommonSchedulingKeyfactorSchedule) {
	o.InventorySchedule = &v
}

// GetReenrollmentStatus returns the ReenrollmentStatus field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetReenrollmentStatus() ModelsReenrollmentStatus {
	if o == nil || isNil(o.ReenrollmentStatus) {
		var ret ModelsReenrollmentStatus
		return ret
	}
	return *o.ReenrollmentStatus
}

// GetReenrollmentStatusOk returns a tuple with the ReenrollmentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetReenrollmentStatusOk() (*ModelsReenrollmentStatus, bool) {
	if o == nil || isNil(o.ReenrollmentStatus) {
		return nil, false
	}
	return o.ReenrollmentStatus, true
}

// HasReenrollmentStatus returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasReenrollmentStatus() bool {
	if o != nil && !isNil(o.ReenrollmentStatus) {
		return true
	}

	return false
}

// SetReenrollmentStatus gets a reference to the given ModelsReenrollmentStatus and assigns it to the ReenrollmentStatus field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetReenrollmentStatus(v ModelsReenrollmentStatus) {
	o.ReenrollmentStatus = &v
}

// GetSetNewPasswordAllowed returns the SetNewPasswordAllowed field value if set, zero value otherwise.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetSetNewPasswordAllowed() bool {
	if o == nil || isNil(o.SetNewPasswordAllowed) {
		var ret bool
		return ret
	}
	return *o.SetNewPasswordAllowed
}

// GetSetNewPasswordAllowedOk returns a tuple with the SetNewPasswordAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) GetSetNewPasswordAllowedOk() (*bool, bool) {
	if o == nil || isNil(o.SetNewPasswordAllowed) {
		return nil, false
	}
	return o.SetNewPasswordAllowed, true
}

// HasSetNewPasswordAllowed returns a boolean if a field has been set.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) HasSetNewPasswordAllowed() bool {
	if o != nil && !isNil(o.SetNewPasswordAllowed) {
		return true
	}

	return false
}

// SetSetNewPasswordAllowed gets a reference to the given bool and assigns it to the SetNewPasswordAllowed field.
func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) SetSetNewPasswordAllowed(v bool) {
	o.SetNewPasswordAllowed = &v
}

func (o KeyfactorApiModelsCertificateStoresCertificateStoreResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsCertificateStoresCertificateStoreResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.ContainerId) {
		toSerialize["ContainerId"] = o.ContainerId
	}
	if !isNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !isNil(o.ClientMachine) {
		toSerialize["ClientMachine"] = o.ClientMachine
	}
	if !isNil(o.Storepath) {
		toSerialize["Storepath"] = o.Storepath
	}
	if !isNil(o.CertStoreInventoryJobId) {
		toSerialize["CertStoreInventoryJobId"] = o.CertStoreInventoryJobId
	}
	if !isNil(o.CertStoreType) {
		toSerialize["CertStoreType"] = o.CertStoreType
	}
	if !isNil(o.Approved) {
		toSerialize["Approved"] = o.Approved
	}
	if !isNil(o.CreateIfMissing) {
		toSerialize["CreateIfMissing"] = o.CreateIfMissing
	}
	if !isNil(o.Properties) {
		toSerialize["Properties"] = o.Properties
	}
	if !isNil(o.AgentId) {
		toSerialize["AgentId"] = o.AgentId
	}
	if !isNil(o.AgentAssigned) {
		toSerialize["AgentAssigned"] = o.AgentAssigned
	}
	if !isNil(o.ContainerName) {
		toSerialize["ContainerName"] = o.ContainerName
	}
	if !isNil(o.InventorySchedule) {
		toSerialize["InventorySchedule"] = o.InventorySchedule
	}
	if !isNil(o.ReenrollmentStatus) {
		toSerialize["ReenrollmentStatus"] = o.ReenrollmentStatus
	}
	if !isNil(o.SetNewPasswordAllowed) {
		toSerialize["SetNewPasswordAllowed"] = o.SetNewPasswordAllowed
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) UnmarshalJSON(bytes []byte) (err error) {
	varKeyfactorApiModelsCertificateStoresCertificateStoreResponse := _KeyfactorApiModelsCertificateStoresCertificateStoreResponse{}

	if err = json.Unmarshal(bytes, &varKeyfactorApiModelsCertificateStoresCertificateStoreResponse); err == nil {
		*o = KeyfactorApiModelsCertificateStoresCertificateStoreResponse(varKeyfactorApiModelsCertificateStoresCertificateStoreResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Id")
		delete(additionalProperties, "ContainerId")
		delete(additionalProperties, "DisplayName")
		delete(additionalProperties, "ClientMachine")
		delete(additionalProperties, "Storepath")
		delete(additionalProperties, "CertStoreInventoryJobId")
		delete(additionalProperties, "CertStoreType")
		delete(additionalProperties, "Approved")
		delete(additionalProperties, "CreateIfMissing")
		delete(additionalProperties, "Properties")
		delete(additionalProperties, "AgentId")
		delete(additionalProperties, "AgentAssigned")
		delete(additionalProperties, "ContainerName")
		delete(additionalProperties, "InventorySchedule")
		delete(additionalProperties, "ReenrollmentStatus")
		delete(additionalProperties, "SetNewPasswordAllowed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyfactorApiModelsCertificateStoresCertificateStoreResponse struct {
	value *KeyfactorApiModelsCertificateStoresCertificateStoreResponse
	isSet bool
}

func (v NullableKeyfactorApiModelsCertificateStoresCertificateStoreResponse) Get() *KeyfactorApiModelsCertificateStoresCertificateStoreResponse {
	return v.value
}

func (v *NullableKeyfactorApiModelsCertificateStoresCertificateStoreResponse) Set(val *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsCertificateStoresCertificateStoreResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsCertificateStoresCertificateStoreResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsCertificateStoresCertificateStoreResponse(val *KeyfactorApiModelsCertificateStoresCertificateStoreResponse) *NullableKeyfactorApiModelsCertificateStoresCertificateStoreResponse {
	return &NullableKeyfactorApiModelsCertificateStoresCertificateStoreResponse{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsCertificateStoresCertificateStoreResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsCertificateStoresCertificateStoreResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
