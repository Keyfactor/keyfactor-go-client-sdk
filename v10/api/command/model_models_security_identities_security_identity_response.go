/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsSecurityIdentitiesSecurityIdentityResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsSecurityIdentitiesSecurityIdentityResponse{}

// ModelsSecurityIdentitiesSecurityIdentityResponse Public DTO for handling responses that include a security identity.
type ModelsSecurityIdentitiesSecurityIdentityResponse struct {
	// The ID of the security identity.
	Id *int64 `json:"Id,omitempty"`
	// The username associated with the account.
	AccountName *string `json:"AccountName,omitempty"`
	// The type of the identity.
	IdentityType *string `json:"IdentityType,omitempty"`
	// The roles this identity belongs to.
	Roles []ModelsSecuritySecurityRolesSecurityRoleResponse `json:"Roles,omitempty"`
	// Whether or not the identity's role XML is valid.
	Valid *bool `json:"Valid,omitempty"`
	// The security identifier for the identity.
	SID                  *string `json:"SID,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsSecurityIdentitiesSecurityIdentityResponse ModelsSecurityIdentitiesSecurityIdentityResponse

// NewModelsSecurityIdentitiesSecurityIdentityResponse instantiates a new ModelsSecurityIdentitiesSecurityIdentityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsSecurityIdentitiesSecurityIdentityResponse() *ModelsSecurityIdentitiesSecurityIdentityResponse {
	this := ModelsSecurityIdentitiesSecurityIdentityResponse{}
	return &this
}

// NewModelsSecurityIdentitiesSecurityIdentityResponseWithDefaults instantiates a new ModelsSecurityIdentitiesSecurityIdentityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsSecurityIdentitiesSecurityIdentityResponseWithDefaults() *ModelsSecurityIdentitiesSecurityIdentityResponse {
	this := ModelsSecurityIdentitiesSecurityIdentityResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) SetId(v int64) {
	o.Id = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetAccountName() string {
	if o == nil || isNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetAccountNameOk() (*string, bool) {
	if o == nil || isNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) HasAccountName() bool {
	if o != nil && !isNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) SetAccountName(v string) {
	o.AccountName = &v
}

// GetIdentityType returns the IdentityType field value if set, zero value otherwise.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetIdentityType() string {
	if o == nil || isNil(o.IdentityType) {
		var ret string
		return ret
	}
	return *o.IdentityType
}

// GetIdentityTypeOk returns a tuple with the IdentityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetIdentityTypeOk() (*string, bool) {
	if o == nil || isNil(o.IdentityType) {
		return nil, false
	}
	return o.IdentityType, true
}

// HasIdentityType returns a boolean if a field has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) HasIdentityType() bool {
	if o != nil && !isNil(o.IdentityType) {
		return true
	}

	return false
}

// SetIdentityType gets a reference to the given string and assigns it to the IdentityType field.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) SetIdentityType(v string) {
	o.IdentityType = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetRoles() []ModelsSecuritySecurityRolesSecurityRoleResponse {
	if o == nil || isNil(o.Roles) {
		var ret []ModelsSecuritySecurityRolesSecurityRoleResponse
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetRolesOk() ([]ModelsSecuritySecurityRolesSecurityRoleResponse, bool) {
	if o == nil || isNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) HasRoles() bool {
	if o != nil && !isNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []ModelsSecuritySecurityRolesSecurityRoleResponse and assigns it to the Roles field.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) SetRoles(v []ModelsSecuritySecurityRolesSecurityRoleResponse) {
	o.Roles = v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetValid() bool {
	if o == nil || isNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetValidOk() (*bool, bool) {
	if o == nil || isNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) HasValid() bool {
	if o != nil && !isNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) SetValid(v bool) {
	o.Valid = &v
}

// GetSID returns the SID field value if set, zero value otherwise.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetSID() string {
	if o == nil || isNil(o.SID) {
		var ret string
		return ret
	}
	return *o.SID
}

// GetSIDOk returns a tuple with the SID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) GetSIDOk() (*string, bool) {
	if o == nil || isNil(o.SID) {
		return nil, false
	}
	return o.SID, true
}

// HasSID returns a boolean if a field has been set.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) HasSID() bool {
	if o != nil && !isNil(o.SID) {
		return true
	}

	return false
}

// SetSID gets a reference to the given string and assigns it to the SID field.
func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) SetSID(v string) {
	o.SID = &v
}

func (o ModelsSecurityIdentitiesSecurityIdentityResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsSecurityIdentitiesSecurityIdentityResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.AccountName) {
		toSerialize["AccountName"] = o.AccountName
	}
	if !isNil(o.IdentityType) {
		toSerialize["IdentityType"] = o.IdentityType
	}
	if !isNil(o.Roles) {
		toSerialize["Roles"] = o.Roles
	}
	if !isNil(o.Valid) {
		toSerialize["Valid"] = o.Valid
	}
	if !isNil(o.SID) {
		toSerialize["SID"] = o.SID
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsSecurityIdentitiesSecurityIdentityResponse) UnmarshalJSON(bytes []byte) (err error) {
	varModelsSecurityIdentitiesSecurityIdentityResponse := _ModelsSecurityIdentitiesSecurityIdentityResponse{}

	if err = json.Unmarshal(bytes, &varModelsSecurityIdentitiesSecurityIdentityResponse); err == nil {
		*o = ModelsSecurityIdentitiesSecurityIdentityResponse(varModelsSecurityIdentitiesSecurityIdentityResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Id")
		delete(additionalProperties, "AccountName")
		delete(additionalProperties, "IdentityType")
		delete(additionalProperties, "Roles")
		delete(additionalProperties, "Valid")
		delete(additionalProperties, "SID")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsSecurityIdentitiesSecurityIdentityResponse struct {
	value *ModelsSecurityIdentitiesSecurityIdentityResponse
	isSet bool
}

func (v NullableModelsSecurityIdentitiesSecurityIdentityResponse) Get() *ModelsSecurityIdentitiesSecurityIdentityResponse {
	return v.value
}

func (v *NullableModelsSecurityIdentitiesSecurityIdentityResponse) Set(val *ModelsSecurityIdentitiesSecurityIdentityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsSecurityIdentitiesSecurityIdentityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsSecurityIdentitiesSecurityIdentityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsSecurityIdentitiesSecurityIdentityResponse(val *ModelsSecurityIdentitiesSecurityIdentityResponse) *NullableModelsSecurityIdentitiesSecurityIdentityResponse {
	return &NullableModelsSecurityIdentitiesSecurityIdentityResponse{value: val, isSet: true}
}

func (v NullableModelsSecurityIdentitiesSecurityIdentityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsSecurityIdentitiesSecurityIdentityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
