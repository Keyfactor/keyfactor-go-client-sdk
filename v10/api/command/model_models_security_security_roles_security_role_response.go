/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsSecuritySecurityRolesSecurityRoleResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsSecuritySecurityRolesSecurityRoleResponse{}

// ModelsSecuritySecurityRolesSecurityRoleResponse A public DTO representing a security identity's role.
type ModelsSecuritySecurityRolesSecurityRoleResponse struct {
	// The Id of the created role
	Id *int64 `json:"Id,omitempty"`
	// The description of the created role
	Description *string `json:"Description,omitempty"`
	// A boolean indicating whether or not the created role is enabled
	Enabled *bool `json:"Enabled,omitempty"`
	// A boolean indicating whther or not the security role will be read-only
	Immutable *bool `json:"Immutable,omitempty"`
	// A boolean that indicates whether or not the Audit XML was able to be verified
	Valid *bool `json:"Valid,omitempty"`
	// A boolean that indicates whether or not the created security role is private
	Private *bool `json:"Private,omitempty"`
	// The identities assigned to the created security role
	Identities []ModelsSecurityIdentitiesSecurityIdentityResponse `json:"Identities,omitempty"`
	// The name of the created role
	Name *string `json:"Name,omitempty"`
	// The permissions included in the created security role
	Permissions          []string `json:"Permissions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsSecuritySecurityRolesSecurityRoleResponse ModelsSecuritySecurityRolesSecurityRoleResponse

// NewModelsSecuritySecurityRolesSecurityRoleResponse instantiates a new ModelsSecuritySecurityRolesSecurityRoleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsSecuritySecurityRolesSecurityRoleResponse() *ModelsSecuritySecurityRolesSecurityRoleResponse {
	this := ModelsSecuritySecurityRolesSecurityRoleResponse{}
	return &this
}

// NewModelsSecuritySecurityRolesSecurityRoleResponseWithDefaults instantiates a new ModelsSecuritySecurityRolesSecurityRoleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsSecuritySecurityRolesSecurityRoleResponseWithDefaults() *ModelsSecuritySecurityRolesSecurityRoleResponse {
	this := ModelsSecuritySecurityRolesSecurityRoleResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) SetId(v int64) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetImmutable returns the Immutable field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetImmutable() bool {
	if o == nil || isNil(o.Immutable) {
		var ret bool
		return ret
	}
	return *o.Immutable
}

// GetImmutableOk returns a tuple with the Immutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetImmutableOk() (*bool, bool) {
	if o == nil || isNil(o.Immutable) {
		return nil, false
	}
	return o.Immutable, true
}

// HasImmutable returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) HasImmutable() bool {
	if o != nil && !isNil(o.Immutable) {
		return true
	}

	return false
}

// SetImmutable gets a reference to the given bool and assigns it to the Immutable field.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) SetImmutable(v bool) {
	o.Immutable = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetValid() bool {
	if o == nil || isNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetValidOk() (*bool, bool) {
	if o == nil || isNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) HasValid() bool {
	if o != nil && !isNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) SetValid(v bool) {
	o.Valid = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetPrivate() bool {
	if o == nil || isNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetPrivateOk() (*bool, bool) {
	if o == nil || isNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) HasPrivate() bool {
	if o != nil && !isNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) SetPrivate(v bool) {
	o.Private = &v
}

// GetIdentities returns the Identities field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetIdentities() []ModelsSecurityIdentitiesSecurityIdentityResponse {
	if o == nil || isNil(o.Identities) {
		var ret []ModelsSecurityIdentitiesSecurityIdentityResponse
		return ret
	}
	return o.Identities
}

// GetIdentitiesOk returns a tuple with the Identities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetIdentitiesOk() ([]ModelsSecurityIdentitiesSecurityIdentityResponse, bool) {
	if o == nil || isNil(o.Identities) {
		return nil, false
	}
	return o.Identities, true
}

// HasIdentities returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) HasIdentities() bool {
	if o != nil && !isNil(o.Identities) {
		return true
	}

	return false
}

// SetIdentities gets a reference to the given []ModelsSecurityIdentitiesSecurityIdentityResponse and assigns it to the Identities field.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) SetIdentities(v []ModelsSecurityIdentitiesSecurityIdentityResponse) {
	o.Identities = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) SetName(v string) {
	o.Name = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetPermissions() []string {
	if o == nil || isNil(o.Permissions) {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) GetPermissionsOk() ([]string, bool) {
	if o == nil || isNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) HasPermissions() bool {
	if o != nil && !isNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) SetPermissions(v []string) {
	o.Permissions = v
}

func (o ModelsSecuritySecurityRolesSecurityRoleResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsSecuritySecurityRolesSecurityRoleResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !isNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !isNil(o.Immutable) {
		toSerialize["Immutable"] = o.Immutable
	}
	if !isNil(o.Valid) {
		toSerialize["Valid"] = o.Valid
	}
	if !isNil(o.Private) {
		toSerialize["Private"] = o.Private
	}
	if !isNil(o.Identities) {
		toSerialize["Identities"] = o.Identities
	}
	if !isNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !isNil(o.Permissions) {
		toSerialize["Permissions"] = o.Permissions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsSecuritySecurityRolesSecurityRoleResponse) UnmarshalJSON(bytes []byte) (err error) {
	varModelsSecuritySecurityRolesSecurityRoleResponse := _ModelsSecuritySecurityRolesSecurityRoleResponse{}

	if err = json.Unmarshal(bytes, &varModelsSecuritySecurityRolesSecurityRoleResponse); err == nil {
		*o = ModelsSecuritySecurityRolesSecurityRoleResponse(varModelsSecuritySecurityRolesSecurityRoleResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Id")
		delete(additionalProperties, "Description")
		delete(additionalProperties, "Enabled")
		delete(additionalProperties, "Immutable")
		delete(additionalProperties, "Valid")
		delete(additionalProperties, "Private")
		delete(additionalProperties, "Identities")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsSecuritySecurityRolesSecurityRoleResponse struct {
	value *ModelsSecuritySecurityRolesSecurityRoleResponse
	isSet bool
}

func (v NullableModelsSecuritySecurityRolesSecurityRoleResponse) Get() *ModelsSecuritySecurityRolesSecurityRoleResponse {
	return v.value
}

func (v *NullableModelsSecuritySecurityRolesSecurityRoleResponse) Set(val *ModelsSecuritySecurityRolesSecurityRoleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsSecuritySecurityRolesSecurityRoleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsSecuritySecurityRolesSecurityRoleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsSecuritySecurityRolesSecurityRoleResponse(val *ModelsSecuritySecurityRolesSecurityRoleResponse) *NullableModelsSecuritySecurityRolesSecurityRoleResponse {
	return &NullableModelsSecuritySecurityRolesSecurityRoleResponse{value: val, isSet: true}
}

func (v NullableModelsSecuritySecurityRolesSecurityRoleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsSecuritySecurityRolesSecurityRoleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
