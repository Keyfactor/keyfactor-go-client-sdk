/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse{}

// KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse struct for KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse
type KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse struct {
	Id                   *int64  `json:"Id,omitempty"`
	DisplayName          *string `json:"DisplayName,omitempty"`
	UseHandler           *bool   `json:"UseHandler,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse

// NewKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse instantiates a new KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse() *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse {
	this := KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse{}
	return &this
}

// NewKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponseWithDefaults instantiates a new KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponseWithDefaults() *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse {
	this := KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) SetId(v int64) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetUseHandler returns the UseHandler field value if set, zero value otherwise.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) GetUseHandler() bool {
	if o == nil || isNil(o.UseHandler) {
		var ret bool
		return ret
	}
	return *o.UseHandler
}

// GetUseHandlerOk returns a tuple with the UseHandler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) GetUseHandlerOk() (*bool, bool) {
	if o == nil || isNil(o.UseHandler) {
		return nil, false
	}
	return o.UseHandler, true
}

// HasUseHandler returns a boolean if a field has been set.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) HasUseHandler() bool {
	if o != nil && !isNil(o.UseHandler) {
		return true
	}

	return false
}

// SetUseHandler gets a reference to the given bool and assigns it to the UseHandler field.
func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) SetUseHandler(v bool) {
	o.UseHandler = &v
}

func (o KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !isNil(o.UseHandler) {
		toSerialize["UseHandler"] = o.UseHandler
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) UnmarshalJSON(bytes []byte) (err error) {
	varKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse := _KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse{}

	if err = json.Unmarshal(bytes, &varKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse); err == nil {
		*o = KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse(varKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Id")
		delete(additionalProperties, "DisplayName")
		delete(additionalProperties, "UseHandler")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse struct {
	value *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse
	isSet bool
}

func (v NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) Get() *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse {
	return v.value
}

func (v *NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) Set(val *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse(val *KeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) *NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse {
	return &NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse{value: val, isSet: true}
}

func (v NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorApiModelsEventHandlerRegisteredEventHandlerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
