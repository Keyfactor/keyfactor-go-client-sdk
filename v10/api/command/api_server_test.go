/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

Testing ServerApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_command_ServerApiService(t *testing.T) {

	cwd, _ := os.Getwd()
	t.Logf("Working directory: %s", cwd)
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test ServerApiService ServerAddAccess", func(t *testing.T) {

		t.Log("ServerApi_ServerAddAccess_payload: <none>")
		resp, httpRes, err := apiClient.ServerApi.ServerAddAccess(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServerApiService ServerCreateServer", func(t *testing.T) {

		t.Log("ServerApi_ServerCreateServer_payload: <none>")
		resp, httpRes, err := apiClient.ServerApi.ServerCreateServer(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServerApiService ServerDelete", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ServerApi_ServerDelete_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("ServerApi_ServerDelete_id: %v", id)

		t.Log("ServerApi_ServerDelete_payload: <none>")
		httpRes, err := apiClient.ServerApi.ServerDelete(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServerApiService ServerGet", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ServerApi_ServerGet_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("ServerApi_ServerGet_id: %v", id)

		t.Log("ServerApi_ServerGet_payload: <none>")
		resp, httpRes, err := apiClient.ServerApi.ServerGet(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServerApiService ServerGetAccess", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("ServerApi_ServerGetAccess_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("ServerApi_ServerGetAccess_id: %v", id)

		t.Log("ServerApi_ServerGetAccess_payload: <none>")
		resp, httpRes, err := apiClient.ServerApi.ServerGetAccess(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServerApiService ServerQueryServers", func(t *testing.T) {

		t.Log("ServerApi_ServerQueryServers_payload: <none>")
		resp, httpRes, err := apiClient.ServerApi.ServerQueryServers(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServerApiService ServerRemoveAccess", func(t *testing.T) {

		t.Log("ServerApi_ServerRemoveAccess_payload: <none>")
		resp, httpRes, err := apiClient.ServerApi.ServerRemoveAccess(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test ServerApiService ServerUpdateServer", func(t *testing.T) {

		t.Log("ServerApi_ServerUpdateServer_payload: <none>")
		resp, httpRes, err := apiClient.ServerApi.ServerUpdateServer(context.Background()).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

}
