/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsEnrollmentAvailableRenewal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsEnrollmentAvailableRenewal{}

// ModelsEnrollmentAvailableRenewal struct for ModelsEnrollmentAvailableRenewal
type ModelsEnrollmentAvailableRenewal struct {
	AvailableRenewalType *int32  `json:"AvailableRenewalType,omitempty"`
	Message              *string `json:"Message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsEnrollmentAvailableRenewal ModelsEnrollmentAvailableRenewal

// NewModelsEnrollmentAvailableRenewal instantiates a new ModelsEnrollmentAvailableRenewal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsEnrollmentAvailableRenewal() *ModelsEnrollmentAvailableRenewal {
	this := ModelsEnrollmentAvailableRenewal{}
	return &this
}

// NewModelsEnrollmentAvailableRenewalWithDefaults instantiates a new ModelsEnrollmentAvailableRenewal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsEnrollmentAvailableRenewalWithDefaults() *ModelsEnrollmentAvailableRenewal {
	this := ModelsEnrollmentAvailableRenewal{}
	return &this
}

// GetAvailableRenewalType returns the AvailableRenewalType field value if set, zero value otherwise.
func (o *ModelsEnrollmentAvailableRenewal) GetAvailableRenewalType() int32 {
	if o == nil || isNil(o.AvailableRenewalType) {
		var ret int32
		return ret
	}
	return *o.AvailableRenewalType
}

// GetAvailableRenewalTypeOk returns a tuple with the AvailableRenewalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsEnrollmentAvailableRenewal) GetAvailableRenewalTypeOk() (*int32, bool) {
	if o == nil || isNil(o.AvailableRenewalType) {
		return nil, false
	}
	return o.AvailableRenewalType, true
}

// HasAvailableRenewalType returns a boolean if a field has been set.
func (o *ModelsEnrollmentAvailableRenewal) HasAvailableRenewalType() bool {
	if o != nil && !isNil(o.AvailableRenewalType) {
		return true
	}

	return false
}

// SetAvailableRenewalType gets a reference to the given int32 and assigns it to the AvailableRenewalType field.
func (o *ModelsEnrollmentAvailableRenewal) SetAvailableRenewalType(v int32) {
	o.AvailableRenewalType = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ModelsEnrollmentAvailableRenewal) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsEnrollmentAvailableRenewal) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ModelsEnrollmentAvailableRenewal) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ModelsEnrollmentAvailableRenewal) SetMessage(v string) {
	o.Message = &v
}

func (o ModelsEnrollmentAvailableRenewal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsEnrollmentAvailableRenewal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AvailableRenewalType) {
		toSerialize["AvailableRenewalType"] = o.AvailableRenewalType
	}
	if !isNil(o.Message) {
		toSerialize["Message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsEnrollmentAvailableRenewal) UnmarshalJSON(bytes []byte) (err error) {
	varModelsEnrollmentAvailableRenewal := _ModelsEnrollmentAvailableRenewal{}

	if err = json.Unmarshal(bytes, &varModelsEnrollmentAvailableRenewal); err == nil {
		*o = ModelsEnrollmentAvailableRenewal(varModelsEnrollmentAvailableRenewal)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "AvailableRenewalType")
		delete(additionalProperties, "Message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsEnrollmentAvailableRenewal struct {
	value *ModelsEnrollmentAvailableRenewal
	isSet bool
}

func (v NullableModelsEnrollmentAvailableRenewal) Get() *ModelsEnrollmentAvailableRenewal {
	return v.value
}

func (v *NullableModelsEnrollmentAvailableRenewal) Set(val *ModelsEnrollmentAvailableRenewal) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsEnrollmentAvailableRenewal) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsEnrollmentAvailableRenewal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsEnrollmentAvailableRenewal(val *ModelsEnrollmentAvailableRenewal) *NullableModelsEnrollmentAvailableRenewal {
	return &NullableModelsEnrollmentAvailableRenewal{value: val, isSet: true}
}

func (v NullableModelsEnrollmentAvailableRenewal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsEnrollmentAvailableRenewal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
