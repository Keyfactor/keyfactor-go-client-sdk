/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsTemplateEnrollmentField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsTemplateEnrollmentField{}

// ModelsTemplateEnrollmentField struct for ModelsTemplateEnrollmentField
type ModelsTemplateEnrollmentField struct {
	Id                   *int64   `json:"Id,omitempty"`
	Name                 *string  `json:"Name,omitempty"`
	Options              []string `json:"Options,omitempty"`
	DataType             *int64   `json:"DataType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsTemplateEnrollmentField ModelsTemplateEnrollmentField

// NewModelsTemplateEnrollmentField instantiates a new ModelsTemplateEnrollmentField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTemplateEnrollmentField() *ModelsTemplateEnrollmentField {
	this := ModelsTemplateEnrollmentField{}
	return &this
}

// NewModelsTemplateEnrollmentFieldWithDefaults instantiates a new ModelsTemplateEnrollmentField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTemplateEnrollmentFieldWithDefaults() *ModelsTemplateEnrollmentField {
	this := ModelsTemplateEnrollmentField{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsTemplateEnrollmentField) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTemplateEnrollmentField) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsTemplateEnrollmentField) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ModelsTemplateEnrollmentField) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsTemplateEnrollmentField) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTemplateEnrollmentField) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsTemplateEnrollmentField) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsTemplateEnrollmentField) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ModelsTemplateEnrollmentField) GetOptions() []string {
	if o == nil || isNil(o.Options) {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTemplateEnrollmentField) GetOptionsOk() ([]string, bool) {
	if o == nil || isNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ModelsTemplateEnrollmentField) HasOptions() bool {
	if o != nil && !isNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *ModelsTemplateEnrollmentField) SetOptions(v []string) {
	o.Options = v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ModelsTemplateEnrollmentField) GetDataType() int64 {
	if o == nil || isNil(o.DataType) {
		var ret int64
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTemplateEnrollmentField) GetDataTypeOk() (*int64, bool) {
	if o == nil || isNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ModelsTemplateEnrollmentField) HasDataType() bool {
	if o != nil && !isNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given int64 and assigns it to the DataType field.
func (o *ModelsTemplateEnrollmentField) SetDataType(v int64) {
	o.DataType = &v
}

func (o ModelsTemplateEnrollmentField) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsTemplateEnrollmentField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !isNil(o.Options) {
		toSerialize["Options"] = o.Options
	}
	if !isNil(o.DataType) {
		toSerialize["DataType"] = o.DataType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsTemplateEnrollmentField) UnmarshalJSON(bytes []byte) (err error) {
	varModelsTemplateEnrollmentField := _ModelsTemplateEnrollmentField{}

	if err = json.Unmarshal(bytes, &varModelsTemplateEnrollmentField); err == nil {
		*o = ModelsTemplateEnrollmentField(varModelsTemplateEnrollmentField)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Id")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Options")
		delete(additionalProperties, "DataType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsTemplateEnrollmentField struct {
	value *ModelsTemplateEnrollmentField
	isSet bool
}

func (v NullableModelsTemplateEnrollmentField) Get() *ModelsTemplateEnrollmentField {
	return v.value
}

func (v *NullableModelsTemplateEnrollmentField) Set(val *ModelsTemplateEnrollmentField) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTemplateEnrollmentField) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTemplateEnrollmentField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTemplateEnrollmentField(val *ModelsTemplateEnrollmentField) *NullableModelsTemplateEnrollmentField {
	return &NullableModelsTemplateEnrollmentField{value: val, isSet: true}
}

func (v NullableModelsTemplateEnrollmentField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTemplateEnrollmentField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
