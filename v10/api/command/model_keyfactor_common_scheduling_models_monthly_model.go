/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
	"time"
)

// checks if the KeyfactorCommonSchedulingModelsMonthlyModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyfactorCommonSchedulingModelsMonthlyModel{}

// KeyfactorCommonSchedulingModelsMonthlyModel struct for KeyfactorCommonSchedulingModelsMonthlyModel
type KeyfactorCommonSchedulingModelsMonthlyModel struct {
	Day                  *int64     `json:"Day,omitempty"`
	Time                 *time.Time `json:"Time,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KeyfactorCommonSchedulingModelsMonthlyModel KeyfactorCommonSchedulingModelsMonthlyModel

// NewKeyfactorCommonSchedulingModelsMonthlyModel instantiates a new KeyfactorCommonSchedulingModelsMonthlyModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyfactorCommonSchedulingModelsMonthlyModel() *KeyfactorCommonSchedulingModelsMonthlyModel {
	this := KeyfactorCommonSchedulingModelsMonthlyModel{}
	return &this
}

// NewKeyfactorCommonSchedulingModelsMonthlyModelWithDefaults instantiates a new KeyfactorCommonSchedulingModelsMonthlyModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyfactorCommonSchedulingModelsMonthlyModelWithDefaults() *KeyfactorCommonSchedulingModelsMonthlyModel {
	this := KeyfactorCommonSchedulingModelsMonthlyModel{}
	return &this
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) GetDay() int64 {
	if o == nil || isNil(o.Day) {
		var ret int64
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) GetDayOk() (*int64, bool) {
	if o == nil || isNil(o.Day) {
		return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) HasDay() bool {
	if o != nil && !isNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given int64 and assigns it to the Day field.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) SetDay(v int64) {
	o.Day = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) GetTime() time.Time {
	if o == nil || isNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) GetTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) HasTime() bool {
	if o != nil && !isNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *KeyfactorCommonSchedulingModelsMonthlyModel) SetTime(v time.Time) {
	o.Time = &v
}

func (o KeyfactorCommonSchedulingModelsMonthlyModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyfactorCommonSchedulingModelsMonthlyModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Day) {
		toSerialize["Day"] = o.Day
	}
	if !isNil(o.Time) {
		toSerialize["Time"] = o.Time
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KeyfactorCommonSchedulingModelsMonthlyModel) UnmarshalJSON(bytes []byte) (err error) {
	varKeyfactorCommonSchedulingModelsMonthlyModel := _KeyfactorCommonSchedulingModelsMonthlyModel{}

	if err = json.Unmarshal(bytes, &varKeyfactorCommonSchedulingModelsMonthlyModel); err == nil {
		*o = KeyfactorCommonSchedulingModelsMonthlyModel(varKeyfactorCommonSchedulingModelsMonthlyModel)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Day")
		delete(additionalProperties, "Time")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKeyfactorCommonSchedulingModelsMonthlyModel struct {
	value *KeyfactorCommonSchedulingModelsMonthlyModel
	isSet bool
}

func (v NullableKeyfactorCommonSchedulingModelsMonthlyModel) Get() *KeyfactorCommonSchedulingModelsMonthlyModel {
	return v.value
}

func (v *NullableKeyfactorCommonSchedulingModelsMonthlyModel) Set(val *KeyfactorCommonSchedulingModelsMonthlyModel) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyfactorCommonSchedulingModelsMonthlyModel) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyfactorCommonSchedulingModelsMonthlyModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyfactorCommonSchedulingModelsMonthlyModel(val *KeyfactorCommonSchedulingModelsMonthlyModel) *NullableKeyfactorCommonSchedulingModelsMonthlyModel {
	return &NullableKeyfactorCommonSchedulingModelsMonthlyModel{value: val, isSet: true}
}

func (v NullableKeyfactorCommonSchedulingModelsMonthlyModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyfactorCommonSchedulingModelsMonthlyModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
