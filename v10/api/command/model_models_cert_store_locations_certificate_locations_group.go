/*

Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

This reference serves to document REST-based methods to manage and integrate with Keyfactor. In addition, an embedded interface allows for the execution of calls against the current Keyfactor API instance.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package command

import (
	"encoding/json"
)

// checks if the ModelsCertStoreLocationsCertificateLocationsGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertStoreLocationsCertificateLocationsGroup{}

// ModelsCertStoreLocationsCertificateLocationsGroup struct for ModelsCertStoreLocationsCertificateLocationsGroup
type ModelsCertStoreLocationsCertificateLocationsGroup struct {
	StoreType            *string                                                   `json:"StoreType,omitempty"`
	StoreTypeId          *int64                                                    `json:"StoreTypeId,omitempty"`
	StoreCount           *int64                                                    `json:"StoreCount,omitempty"`
	Locations            []ModelsCertStoreLocationsCertificateStoreLocationsDetail `json:"Locations,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsCertStoreLocationsCertificateLocationsGroup ModelsCertStoreLocationsCertificateLocationsGroup

// NewModelsCertStoreLocationsCertificateLocationsGroup instantiates a new ModelsCertStoreLocationsCertificateLocationsGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertStoreLocationsCertificateLocationsGroup() *ModelsCertStoreLocationsCertificateLocationsGroup {
	this := ModelsCertStoreLocationsCertificateLocationsGroup{}
	return &this
}

// NewModelsCertStoreLocationsCertificateLocationsGroupWithDefaults instantiates a new ModelsCertStoreLocationsCertificateLocationsGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertStoreLocationsCertificateLocationsGroupWithDefaults() *ModelsCertStoreLocationsCertificateLocationsGroup {
	this := ModelsCertStoreLocationsCertificateLocationsGroup{}
	return &this
}

// GetStoreType returns the StoreType field value if set, zero value otherwise.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreType() string {
	if o == nil || isNil(o.StoreType) {
		var ret string
		return ret
	}
	return *o.StoreType
}

// GetStoreTypeOk returns a tuple with the StoreType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreTypeOk() (*string, bool) {
	if o == nil || isNil(o.StoreType) {
		return nil, false
	}
	return o.StoreType, true
}

// HasStoreType returns a boolean if a field has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) HasStoreType() bool {
	if o != nil && !isNil(o.StoreType) {
		return true
	}

	return false
}

// SetStoreType gets a reference to the given string and assigns it to the StoreType field.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) SetStoreType(v string) {
	o.StoreType = &v
}

// GetStoreTypeId returns the StoreTypeId field value if set, zero value otherwise.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreTypeId() int64 {
	if o == nil || isNil(o.StoreTypeId) {
		var ret int64
		return ret
	}
	return *o.StoreTypeId
}

// GetStoreTypeIdOk returns a tuple with the StoreTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreTypeIdOk() (*int64, bool) {
	if o == nil || isNil(o.StoreTypeId) {
		return nil, false
	}
	return o.StoreTypeId, true
}

// HasStoreTypeId returns a boolean if a field has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) HasStoreTypeId() bool {
	if o != nil && !isNil(o.StoreTypeId) {
		return true
	}

	return false
}

// SetStoreTypeId gets a reference to the given int64 and assigns it to the StoreTypeId field.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) SetStoreTypeId(v int64) {
	o.StoreTypeId = &v
}

// GetStoreCount returns the StoreCount field value if set, zero value otherwise.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreCount() int64 {
	if o == nil || isNil(o.StoreCount) {
		var ret int64
		return ret
	}
	return *o.StoreCount
}

// GetStoreCountOk returns a tuple with the StoreCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetStoreCountOk() (*int64, bool) {
	if o == nil || isNil(o.StoreCount) {
		return nil, false
	}
	return o.StoreCount, true
}

// HasStoreCount returns a boolean if a field has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) HasStoreCount() bool {
	if o != nil && !isNil(o.StoreCount) {
		return true
	}

	return false
}

// SetStoreCount gets a reference to the given int64 and assigns it to the StoreCount field.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) SetStoreCount(v int64) {
	o.StoreCount = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetLocations() []ModelsCertStoreLocationsCertificateStoreLocationsDetail {
	if o == nil || isNil(o.Locations) {
		var ret []ModelsCertStoreLocationsCertificateStoreLocationsDetail
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) GetLocationsOk() ([]ModelsCertStoreLocationsCertificateStoreLocationsDetail, bool) {
	if o == nil || isNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) HasLocations() bool {
	if o != nil && !isNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []ModelsCertStoreLocationsCertificateStoreLocationsDetail and assigns it to the Locations field.
func (o *ModelsCertStoreLocationsCertificateLocationsGroup) SetLocations(v []ModelsCertStoreLocationsCertificateStoreLocationsDetail) {
	o.Locations = v
}

func (o ModelsCertStoreLocationsCertificateLocationsGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertStoreLocationsCertificateLocationsGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: StoreType is readOnly
	// skip: StoreTypeId is readOnly
	// skip: StoreCount is readOnly
	if !isNil(o.Locations) {
		toSerialize["Locations"] = o.Locations
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelsCertStoreLocationsCertificateLocationsGroup) UnmarshalJSON(bytes []byte) (err error) {
	varModelsCertStoreLocationsCertificateLocationsGroup := _ModelsCertStoreLocationsCertificateLocationsGroup{}

	if err = json.Unmarshal(bytes, &varModelsCertStoreLocationsCertificateLocationsGroup); err == nil {
		*o = ModelsCertStoreLocationsCertificateLocationsGroup(varModelsCertStoreLocationsCertificateLocationsGroup)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "StoreType")
		delete(additionalProperties, "StoreTypeId")
		delete(additionalProperties, "StoreCount")
		delete(additionalProperties, "Locations")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsCertStoreLocationsCertificateLocationsGroup struct {
	value *ModelsCertStoreLocationsCertificateLocationsGroup
	isSet bool
}

func (v NullableModelsCertStoreLocationsCertificateLocationsGroup) Get() *ModelsCertStoreLocationsCertificateLocationsGroup {
	return v.value
}

func (v *NullableModelsCertStoreLocationsCertificateLocationsGroup) Set(val *ModelsCertStoreLocationsCertificateLocationsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertStoreLocationsCertificateLocationsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertStoreLocationsCertificateLocationsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertStoreLocationsCertificateLocationsGroup(val *ModelsCertStoreLocationsCertificateLocationsGroup) *NullableModelsCertStoreLocationsCertificateLocationsGroup {
	return &NullableModelsCertStoreLocationsCertificateLocationsGroup{value: val, isSet: true}
}

func (v NullableModelsCertStoreLocationsCertificateLocationsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertStoreLocationsCertificateLocationsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
