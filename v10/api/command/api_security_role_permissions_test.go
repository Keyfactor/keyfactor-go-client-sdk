/*
Copyright 2023 Keyfactor
Licensed under the Apache License, Version 2.0 (the License); you may
not use this file except in compliance with the License.  You may obtain a
copy of the License at http://www.apache.org/licenses/LICENSE-2.0.  Unless
required by applicable law or agreed to in writing, software distributed
under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied. See the License for
the specific language governing permissions and limitations under the
License.

Keyfactor-v1

Testing SecurityRolePermissionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package command

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_command_SecurityRolePermissionsApiService(t *testing.T) {

	cwd, _ := os.Getwd()
	t.Logf("Working directory: %s", cwd)
	config := GetEnvConfiguration()

	configuration, configErr := NewConfiguration(config)
	require.Nil(t, configErr)

	apiClient := NewAPIClient(configuration)

	t.Run("Test SecurityRolePermissionsApiService SecurityRolePermissionsAddCollectionPermissions", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolePermissionsAddCollectionPermissions_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("SecurityRolePermissionsApi_SecurityRolePermissionsAddCollectionPermissions_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolePermissionsAddCollectionPermissions_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolePermissionsAddCollectionPermissions(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolePermissionsAddContainerPermissions", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolePermissionsAddContainerPermissions_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("SecurityRolePermissionsApi_SecurityRolePermissionsAddContainerPermissions_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolePermissionsAddContainerPermissions_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolePermissionsAddContainerPermissions(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolePermissionsAddGlobalPermissions", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolePermissionsAddGlobalPermissions_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("SecurityRolePermissionsApi_SecurityRolePermissionsAddGlobalPermissions_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolePermissionsAddGlobalPermissions_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolePermissionsAddGlobalPermissions(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolePermissionsGetCollectionPermissionsForRole", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolePermissionsGetCollectionPermissionsForRole_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("SecurityRolePermissionsApi_SecurityRolePermissionsGetCollectionPermissionsForRole_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolePermissionsGetCollectionPermissionsForRole_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolePermissionsGetCollectionPermissionsForRole(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolePermissionsGetContainerPermissionsForRole", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolePermissionsGetContainerPermissionsForRole_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("SecurityRolePermissionsApi_SecurityRolePermissionsGetContainerPermissionsForRole_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolePermissionsGetContainerPermissionsForRole_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolePermissionsGetContainerPermissionsForRole(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolePermissionsGetGlobalPermissionsForRole", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolePermissionsGetGlobalPermissionsForRole_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("SecurityRolePermissionsApi_SecurityRolePermissionsGetGlobalPermissionsForRole_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolePermissionsGetGlobalPermissionsForRole_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolePermissionsGetGlobalPermissionsForRole(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolePermissionsGetPermissionsForRole", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolePermissionsGetPermissionsForRole_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("SecurityRolePermissionsApi_SecurityRolePermissionsGetPermissionsForRole_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolePermissionsGetPermissionsForRole_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolePermissionsGetPermissionsForRole(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolePermissionsSetCollectionPermissions", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolePermissionsSetCollectionPermissions_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("SecurityRolePermissionsApi_SecurityRolePermissionsSetCollectionPermissions_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolePermissionsSetCollectionPermissions_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolePermissionsSetCollectionPermissions(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolePermissionsSetContainerPermissions", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolePermissionsSetContainerPermissions_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("SecurityRolePermissionsApi_SecurityRolePermissionsSetContainerPermissions_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolePermissionsSetContainerPermissions_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolePermissionsSetContainerPermissions(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test SecurityRolePermissionsApiService SecurityRolePermissionsSetGlobalPermissions", func(t *testing.T) {

		var id interface{}

		id = os.Getenv("SecurityRolePermissionsApi_SecurityRolePermissionsSetGlobalPermissions_id")
		id, _ = convertParamInterface(id, "int64")
		t.Logf("SecurityRolePermissionsApi_SecurityRolePermissionsSetGlobalPermissions_id: %v", id)

		t.Log("SecurityRolePermissionsApi_SecurityRolePermissionsSetGlobalPermissions_payload: <none>")
		resp, httpRes, err := apiClient.SecurityRolePermissionsApi.SecurityRolePermissionsSetGlobalPermissions(context.Background(), id.(int64)).Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

}
