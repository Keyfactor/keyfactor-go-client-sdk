/*
Keyfactor-v1

Testing SslApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package keyfactor

import (
	"context"
	openapiclient "github.com/Keyfactor/keyfactor-go-client-sdk/v1/api/keyfactor"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_keyfactor_SslApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SslApiService SslAddNetworkRanges", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SslApi.SslAddNetworkRanges(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslCreateNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SslApi.SslCreateNetwork(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslEndpoint", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SslApi.SslEndpoint(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslEndpointHistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SslApi.SslEndpointHistory(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslGetNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var identifier string

		resp, httpRes, err := apiClient.SslApi.SslGetNetwork(context.Background(), identifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslGetNetworkRangesForNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SslApi.SslGetNetworkRangesForNetwork(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslGetNetworks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SslApi.SslGetNetworks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslImmediateSslScan", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.SslApi.SslImmediateSslScan(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslMonitorAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SslApi.SslMonitorAll(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslMonitoringStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SslApi.SslMonitoringStatus(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslNetworkScanParts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SslApi.SslNetworkScanParts(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslRemoveAllNetworkRanges", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.SslApi.SslRemoveAllNetworkRanges(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslRemoveNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.SslApi.SslRemoveNetwork(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslResults", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SslApi.SslResults(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslReviewAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SslApi.SslReviewAll(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslReviewedStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SslApi.SslReviewedStatus(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslScanPart", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SslApi.SslScanPart(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslSetNetworkRanges", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SslApi.SslSetNetworkRanges(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslUpdateNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SslApi.SslUpdateNetwork(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SslApiService SslValidateNetworkRanges", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SslApi.SslValidateNetworkRanges(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
